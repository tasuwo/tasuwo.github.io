<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 開発モデル | tasuwo blog]]></title>
  <link href="http://tasuwo.github.io/blog/categories/kai-fa-moderu/atom.xml" rel="self"/>
  <link href="http://tasuwo.github.io/"/>
  <updated>2016-05-10T06:44:00+09:00</updated>
  <id>http://tasuwo.github.io/</id>
  <author>
    <name><![CDATA[tasuwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[開発モデルの話]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/07/model/"/>
    <updated>2015-05-07T09:48:27+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/07/model</id>
    <content type="html"><![CDATA[<p>開発モデルについて，調べる機会があったのでメモしておく．<br>
調査記録なので，間違い等が含まれる可能性がある．</p>

<!-- more -->

<h1>はじめに</h1>

<h2>開発プロセスとは</h2>

<p>開発の企画からリリース，運用・保守までの作業段階．以下のように分けられる．</p>

<ol>
<li>要件定義

<ul>
<li>機能やパフォーマンス等の条件の明確化</li>
</ul></li>
<li>基本設計(外部設計)

<ul>
<li>UIや入出力等</li>
</ul></li>
<li>詳細設計(内部設計)

<ul>
<li>具体的な機能の設計</li>
</ul></li>
<li>実装</li>
<li>単体テスト</li>
<li>結合テスト</li>
<li>総合テスト</li>
<li>導入・運用</li>
</ol>

<h2>開発モデルとは</h2>

<p>開発プロセスを実施する順番・形式をモデル化したもの．</p>

<h1>1. ウォーターフォールモデル</h1>

<p>最も基本的な開発モデル．前のプロセスの成果物を基に次のプロセスの作業を行う．</p>

<ul>
<li>主流．ドキュメントの作成量が多い．</li>
<li>大規模システム開発に有効とされる</li>
</ul>

<h3>メリット</h3>

<ul>
<li>計画を立て易い

<ul>
<li>各開発プロセスの区切りが明確で，流れを把握しやすい</li>
</ul></li>
<li>進捗管理がし易い</li>
</ul>

<h3>デメリット</h3>

<ul>
<li>上流工程でしか要件定義をしない</li>
<li>仕様変更の影響が強い

<ul>
<li>手戻りの発生</li>
</ul></li>
<li>成果物管理の稼働不可

<ul>
<li>成果物の作成が重みになる</li>
</ul></li>
</ul>

<h1>2. プロトタイピングモデル</h1>

<ul>
<li>比較的小規模な開発向け．</li>
<li>プロトタイプをユーザに提示し，システムの機能を確認してもらう

<ul>
<li>評価と改善を繰り替えし，要件に見合った製品を作り上げる</li>
</ul></li>
</ul>

<h3>メリット</h3>

<ul>
<li>設計段階でユーザの意見が取り入れられるため，手戻りが少なくなる</li>
</ul>

<h3>デメリット</h3>

<ul>
<li>プロトタイプ作りから始めるため，手間と費用がかかる</li>
</ul>

<h1>3. 繰り返し型開発モデル</h1>

<p>ウォーターフォールにおける，手戻りの大きいデメリットを改善するために考えられた．</p>

<h2>3.1 スパイラルモデル</h2>

<p>ソフトウェア全体を，独立性の高いサブシステムに分割する</p>

<ul>
<li><code>要件定義⇒設計⇒プログラミング⇒テスト</code> の流れを繰り返す</li>
<li>開発のリスクが最小となるように改良しながらシステムを育てる

<ol>
<li>リスク分析・代替手段評価</li>
<li>開発と検証</li>
<li>次のフェーズの計画</li>
<li>目標の設定・代替手段検討</li>
</ol></li>
</ul>

<h3>メリット</h3>

<ul>
<li>リスクの現象が計れる</li>
<li>大きな手戻りが発生しにくい

<ul>
<li>ユーザとの認識の違い，設計・要件定義のミスを早期発見可能</li>
</ul></li>
<li>仕様変更に対応しやすい</li>
</ul>

<h3>デメリット</h3>

<ul>
<li>システムの分割方法によっては運用しにくい</li>
<li>ユーザに仕様変更の余地を与えてしまう</li>
<li>プロジェクト全体の管理が困難

<ul>
<li>終了時期の見極めが難しい</li>
</ul></li>
</ul>

<h2>3.2 インクリメンタルモデル(漸増型)</h2>

<p>要求を一度に全て実現するのではなく，開発単位毎に新規の増分を追加していく．<br>
スパイラルモデルとは，繰り返しの範囲が異なる．<br>
スパイラルモデルは <code>要求定義〜テスト工程</code> を繰り返すが，インクリメンタルモデルは要求定義は最初の1回だけ行い，それ以後の <code>設計〜テスト工程</code> のみを繰り返す．</p>

<ul>
<li>最初にシステム全体の要求定義を行う

<ul>
<li>ソフトウェアを独立性の高い機能に分割する</li>
</ul></li>
<li>機能ごとに並行して開発を行う

<ul>
<li>各機能について段階的にリリースする</li>
</ul></li>
</ul>

<h3>メリット</h3>

<ul>
<li>機能毎のソフトウェア構造がまったく異なるもの，依存関係のないものに適している

<ul>
<li>繰り返しの単位の独立性が保てる</li>
</ul></li>
<li>機能毎に開発する

<ul>
<li>全ての機能が揃っていなくても，最初のリリースからシステムの動作を確認できる</li>
</ul></li>
</ul>

<h3>デメリット</h3>

<ul>
<li>開発単位間に共通した構造が存在した場合，二重に開発を行ってしまう

<ul>
<li>保守性に問題が生じる</li>
</ul></li>
<li>細部まで作り込んでしまうと，修正が大変</li>
</ul>

<h2>3.3 イテレーションモデル(反復型)</h2>

<p>何度も薄く色を塗ることで，最終的にしっかりとした色へもっていくイメージ．<br>
スパイラルモデルとの違いは，分割の仕方．<br>
スパイラルモデルは <code>設計〜テスト工程</code> を繰り返すが，イテレーションモデルは <code>機能追加</code> の工程を繰り返し，各機能の完成度を高めていく．</p>

<ul>
<li>ソフトウェアの全体，あるいは部分について，最初は薄く作り，少しずつ肉付けしていく

<ul>
<li>システムの要素をとりあえず完成させ，段階的に要素を開発・追加してく</li>
</ul></li>
<li>OS の開発に向いている

<ul>
<li>どんなモジュールからも呼び出すカーネル(プロセス管理等)を先に開発する</li>
<li>カーネルのモジュールを利用しながらシェルを追加して行く</li>
</ul></li>
</ul>

<p>エヴォリューショナルモデルと同義(たぶん&#8230;)．</p>

<h3>メリット</h3>

<ul>
<li>徐々に確認しながら肉付けし，中身を濃くしていける

<ul>
<li>非常に重要かつ複雑なソフトウェアの箇所に対して有効</li>
</ul></li>
</ul>

<h3>デメリット</h3>

<ul>
<li>ユーザーの要求が発散してしまい，ソフトウェアがいつまでたっても完成しないリスクがある</li>
</ul>

<h2>UP(Unified Process)</h2>

<p>開発モデルというわけじゃないけど，このタイミングで書いておく．<br>
UP は有名な反復型プロセス(イテレーション + インクリメンタル)フレームワーク．<br>
実際の現場では，インクリメンタルモデル，イテレーションモデルをミックスした戦略がよくとられる．</p>

<ul>
<li>機能単位の開発：インクリメンタル戦略</li>
<li>コアアーキテクチャの開発：イテレーション戦略</li>
</ul>

<h3>最終目標</h3>

<p>品質の高いソフトウェアを開発するためのガイドラインを提供する</p>

<h3>思想</h3>

<ul>
<li>ユーザーの求める真の要求を満足させる</li>
<li>要求や環境の変化に対応できる</li>
<li>ソフトウエア開発のリスクを減少させる</li>
<li>再利用可能なコンポーネントベースのシステムを実現する</li>
</ul>

<h3>アプローチ</h3>

<ul>
<li>ユースケース駆動

<ul>
<li>ユースケースを出発点として開発する</li>
<li>反復の度に1つ以上のユースケースを実装していく</li>
</ul></li>
<li>アーキテクチャセントリック

<ul>
<li>アーキテクチャ中心で開発する</li>
<li>開発早期でアーキテクチャを確立する</li>
<li>開発者視点ではなく，ユーザ視点(ユースケース)から考える

<ul>
<li>開発者視点の関連モジュールではなく，ユースケースを実現するモジュール群を優先して開発する</li>
</ul></li>
</ul></li>
<li>反復型開発

<ul>
<li>要求，成果物，人，リスク等を管理しつつ，マイルストーンを設定した計画のもとで反復開発を行う</li>
</ul></li>
</ul>

<h3>フェーズ</h3>

<ol>
<li>インセプション(方向づけ)フェーズ

<ul>
<li>アイデアのプロトタイプの開発と評価</li>
<li>開発を進めるべきか，止めるべきかを判断する</li>
</ul></li>
<li>エラボレーション(推敲)フェーズ

<ul>
<li>システム構築のための核となるアーキテクチャベースラインを作る</li>
<li>骨組みと黄金ルート(必ず通る基本のルート)を作る</li>
</ul></li>
<li>コンストラクション(作成)フェーズ

<ul>
<li>システムとして仕上げる</li>
<li>β版のリリースが目標</li>
</ul></li>
<li>トランジション(移行)フェーズ

<ul>
<li>β版のリリース</li>
<li>フィールドでの評価結果の反映.</li>
</ul></li>
</ol>

<h2>3.4 アジャイルプロセスモデル</h2>

<ul>
<li>重厚長大な開発手法(UP)に対するアンチテーゼ

<ul>
<li>小さいシステムはもっと簡単に作っても良い</li>
</ul></li>
<li>状況に対して柔軟かつ迅速に対応する</li>
<li>イテレーションを区切り，必須度の高い機能から定義・開発して行く</li>
</ul>

<h3>メリット</h3>

<ul>
<li>最低限だが使用可能なソフトを早期リリース可能</li>
<li>優先度の低い開発を後続のイテレーションに後回しに出来る</li>
</ul>

<h3>デメリット</h3>

<ul>
<li>大規模システムに向かない</li>
<li>場当たり的なシステムになってしまう可能性がある</li>
<li>習熟した技術者によってのみ成し遂げられる</li>
</ul>

<h1>参考文献</h1>

<blockquote>
<p><a href="http://www.linuxacademy.ne.jp/lablog/programmer/98/">開発手法の基礎、ウォーターフォールモデルの特徴とは</a><br>
<a href="http://gihyo.jp/lifestyle/serial/01/ipa-terminology/0012">第12回　システム開発の工程とソフトウェア開発モデル | めざせ!情報処理技術者試験</a><br>
<a href="http://monoist.atmarkit.co.jp/mn/articles/1011/25/news112.html">【問題5】ソフトウェア開発モデルについて</a><br>
<a href="http://www.itmedia.co.jp/im/articles/0310/08/news001.html">第10回 開発プロセスの上手な組み合わせ</a><br>
<a href="http://d.hatena.ne.jp/incarose86/20121117/1353144430">インクリメンタル開発とイテレーション開発</a><br>
<a href="http://itpro.nikkeibp.co.jp/article/lecture/20070221/262716/">Part1　Unified Process，その生い立ちと構造を知る</a><br>
<a href="http://hhhuang.homelinux.com/lectures/OO_Dalian/Lesson05.pdf">第5講 オブジェクト指向開発とは何か</a><br>
<a href="http://itpro.nikkeibp.co.jp/article/lecture/20070221/262716/">Part1 Unified Process，その生い立ちと構造を知る</a><br>
<a href="http://codezine.jp/article/detail/6423">第１回 RUPはどこに消えたのか？</a><br>
<a href="http://blog.livedoor.jp/yasuyukimiyoshi/archives/51283739.html">テーマ０１：ソフトウェア開発モデル</a><br>
<a href="http://stackoverflow.com/questions/3897335/whats-the-difference-between-incremental-software-process-model-evolutionary-m">What&#39;s the difference between incremental software process model, evolutionary model, and the spiral model?</a><br>
<a href="http://www.it-shikaku.jp/top30.php?hidari=13-01-01.php&amp;migi=km13-01.php">1.ソフトウェア開発手法 - it-shikaku.jp</a></p>
</blockquote>
]]></content>
  </entry>
  
</feed>
