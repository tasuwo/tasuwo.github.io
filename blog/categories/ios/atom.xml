<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | tasuwo blog]]></title>
  <link href="http://tasuwo.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://tasuwo.github.io/"/>
  <updated>2016-02-16T10:35:07+09:00</updated>
  <id>http://tasuwo.github.io/</id>
  <author>
    <name><![CDATA[tasuwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発時の個人的に好みなディレクトリ構成とか Xib ファイルの使い方とか]]></title>
    <link href="http://tasuwo.github.io/blog/2016/01/10/ios-dev-setting/"/>
    <updated>2016-01-10T20:47:24+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/01/10/ios-dev-setting</id>
    <content type="html"><![CDATA[<p>自分が iOS アプリケーションを作るとき使いまわそうと思った，テンプレ的な設定とかをまとめておく．</p>

<!-- more -->

<h2>やりたいこと</h2>

<p>やることは以下．</p>

<ol>
<li>ディレクトリ構成をきれいにする

<ul>
<li>MVCアーキテクチャに対応させる</li>
</ul></li>
<li>Storyboard を削除する

<ul>
<li>segue とかで画面遷移させたり，一つの storyboard に複数の view controller が対応しているのは管理しづらくなりそうかな，と思ったので</li>
</ul></li>
<li>UI 整形に xib ファイルを使う

<ul>
<li>UIView を各画面ごとに作成し，対応した xib ファイルを UI 整形用に使う</li>
</ul></li>
</ol>

<h2>0. 環境</h2>

<ul>
<li>Xcode7.2</li>
<li>Swift2.0</li>
<li>OS X Yosemite</li>
</ul>

<h2>1. ディレクトリ構成をきれいにする</h2>

<p>iOS アプリケーションは MVC アーキテクチャに則っているので，対応したディレクトリ構成にする．<code>File &gt; New &gt; Project</code> から <code>Single View Application</code> を作成すると，デフォルトのディレクトリ構成は以下のようなかんじ．</p>

<p><img src="/images/20160110_default.png" alt="default.png"></p>

<p>これを，以下のようなディレクトリ構成に変更する．</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">┬ /resources
│  ├ info.plist
│  └ Assets.xcassets
└ /src
   ├ AppDelegate.swift
   ├ /model
   ├ /view
   └ /controller
       └ ViewController.swift
</code></pre></div>
<p>実際のディレクトリ構成と Xcode のカラム上でのディレクトリ構成は異なるので，その同期を撮りたいときには <a href="https://github.com/venmo/synx">venmo/synx</a> を使うと良い．</p>

<h2>2. Storyboard を削除する</h2>

<p>デフォルトで存在する，<code>Main.storyboard</code>, <code>LaunchScreen.storyboard</code> は削除する．削除するだけだとエラーとなってしまうので，以下のようにプロジェクトの設定を変更する．</p>

<ul>
<li><code>Deployment Info &gt; Main Interface</code> のテキストフィールドを空にする</li>
<li><code>App Icons and Launch Images &gt; Launch Screen File</code> のテキストフィールドを空にする</li>
</ul>

<p>これでプロジェクトから storyboard を除くことはできたが，この時点で Run しても画面に何も表示されない．rootViewConstroller を設定できていないためである．</p>

<p><img src="/images/20160110_black.png" alt="black.png"></p>

<p>そこで，<code>AppDelegate.swift</code> に以下を追記することで，ViewController を rootViewController に設定する．</p>
<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSObject</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>

        <span class="n">window</span> <span class="o">=</span> <span class="bp">UIWindow</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">().</span><span class="n">bounds</span><span class="p">)</span>
        <span class="k">if</span> <span class="k">let</span> <span class="n">window</span> <span class="o">=</span> <span class="n">window</span> <span class="p">{</span>
            <span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">whiteColor</span><span class="p">()</span>
            <span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">ViewController</span><span class="p">()</span>
            <span class="n">window</span><span class="p">.</span><span class="n">makeKeyAndVisible</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nb">true</span>
    <span class="p">}</span>
</code></pre></div>
<p>これでOK．</p>

<p><img src="/images/20160110_white.png" alt="white.png"></p>

<h2>3. UI 整形に xib ファイルを使う</h2>

<p>まず，以下のような <code>MainView.swift</code> を <code>src/view</code> 以下に作成する．</p>
<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">import</span> <span class="n">UIKit</span>

<span class="k">class</span> <span class="nl">MainView</span> <span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div>
<p>次に，<code>New file</code> から <code>iOS &gt; User Interface</code> 内の <code>view</code> を選択し， xib ファイル作成する．その <code>File&#39;s Owner</code> の Custom Class を <code>Main View</code> に設定</p>

<p><img src="/images/20160110_mainview.png" alt="mainview.png"></p>

<p>この UI が適用されたことがわかるように，適当にラベルを設置しておく．</p>

<p><img src="/images/20160110_main.png" alt="main.png"></p>

<p>xib ファイル側の view を <code>MainView.swift</code> に対応させる．</p>

<p><img src="/images/20160110_outlet.png" alt="outlet.png"></p>

<p>MainView.swift を以下のように編集する．</p>
<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">import</span> <span class="n">UIKit</span>

<span class="k">class</span> <span class="nl">MainView</span> <span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">var</span> <span class="nl">MainView</span><span class="p">:</span> <span class="bp">UIView</span><span class="o">!</span>

    <span class="kr">override</span> <span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>

        <span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">loadNibNamed</span><span class="p">(</span><span class="s">&quot;MainView&quot;</span><span class="p">,</span> <span class="nl">owner</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
        <span class="n">MainView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span>

        <span class="n">addSubview</span><span class="p">(</span><span class="n">MainView</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">required</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>さらに，<code>ViewController.swift</code> に以下を追記</p>
<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kr">override</span> <span class="k">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>

    <span class="k">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">MainView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>
<p>これで Run すればよい．</p>

<p><img src="/images/20160110_mianvi.png" alt="mianvi.png"></p>

<h2>捕捉 : Auto layout</h2>

<p>中央揃えしたいとかそういうのは auto layout を活用すれば良い．以下のサイトが参考になる．</p>

<p><a href="http://qiita.com/teradonburi/items/94b89379aa5a0bfdc71d">iOS - xcode6でAutoLayoutでレスポンシブデザイン - Qiita</a><br>
<a href="http://swift-salaryman.com/autolayout.php">AutoLayout - Swiftサラリーマン</a></p>

<p>ラベルから Ctrl 押しながら 親view へドラッグ</p>

<p><img src="/images/20160110_auto.png" alt=" auto.png"></p>

<p>制約を適当に付加する．</p>

<p><img src="/images/20160110_constraint.png" alt="constraint.png"></p>

<p>今回はこんな感じ．</p>

<p><img src="/images/20160110_cons.png" alt="cons.png"></p>

<p>これで Run すると中央揃えになる．</p>

<p><img src="/images/20160110_mmm.png" alt="mmm.png"></p>

<h2>おわりに</h2>

<p>最終的なディレクトリ構成は以下．</p>

<p><img src="/images/20160110_V.png" alt="V.png"></p>

<h2>参考</h2>

<p><a href="http://tanihiro.hatenablog.com/entry/2015/10/13/092710">【iOS】【swift】カスタムViewとxibを紐付ける - tanihiro.log</a><br>
<a href="http://qiita.com/iKichiemon/items/3cfa6c2bf2a0acb299a0">[Swift]xibファイルを呼び出す最も簡単な方法 - Qiita</a><br>
<a href="http://qiita.com/noppefoxwolf/items/11401622950768c93fd2">Swift+xibで簡単レイアウトでカスタムビュー - Qiita</a><br>
<a href="http://qiita.com/MTattin/items/61beb3b4afcc779f707f">XCode7 - Storyboardにxib利用 - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリケーションの実行時の振る舞いについて]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/30/ios-02/"/>
    <updated>2015-05-30T11:18:52+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/30/ios-02</id>
    <content type="html"><![CDATA[<p>iOSアプリケーションの構造がよくわからなかったので，とりあえず実行時の振る舞いから理解していくためのまとめ．</p>

<!-- more -->

<p>以下の初心者用ガイドを一通りやった．</p>

<blockquote>
<p><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/">Start Developing iOS Apps Today: Setup - Apple Developer</a></p>
</blockquote>

<p>ちなみに，上記サイトの使用言語は Swift ではなく Objective-C．</p>

<h2>1. アプリケーション実行時の振る舞い</h2>

<p>アプリケーション起動時にはどのようなことが起きるのだろうか？Swift でも Objective-C でも，記述方法が違うだけでやってることは同じはずなので，結局何をしているのか？を公式ドキュメントから抽出してみる．</p>

<h3>やっていること</h3>

<p><code>UIApplicationMain</code>関数が呼び出され，以下の2つのインスタンスが生成される．</p>

<ul>
<li><code>UIApplication</code>クラスのインスタンス生成(<strong>application object</strong>)

<ul>
<li>イベントループを開始する</li>
<li>アプリケーションの基盤となる</li>
</ul></li>
<li><code>AppDelegate</code>クラスのインスタンス生成(<strong>app delegate</strong>)

<ul>
<li>コンテンツ描画のためのウインドウを管理する</li>
<li>状態遷移を管理する</li>
</ul></li>
</ul>

<p><em>application object</em> が <em>app delegate</em> 上に定義されたメソッドを呼び出し，記述されたコードを実行する．コードを見てみると，<code>UIApplicationMain</code>関数に<code>AppDelegate</code>クラスが渡され，紐づけられているようだ．</p>

<h2>2. App Delegate について</h2>

<p>アプリケーションを開発する上で関わりが深いのは<code>AppDelegate</code>だろう．初心者用ガイドに書かれていたことをメモしておく．</p>

<h3>window 属性</h3>

<p>コンテンツが描画されるウインドウが格納される</p>

<h3>重要メソッドのスケルトン</h3>

<p>アプリケーションが特殊な状態に陥った場合&#8230;アプリケーションの実行時，メモリ不足時，アプリケーション終了時など&#8230;には，<em>application object</em> が <em>app delegate</em> 内の対応したメソッドが呼び出す．デフォルトでは，対応した各メソッドのスケルトンが定義されている．これらの中身が空，もしくは削除されている場合には，デフォルトの振る舞いが呼び出される．必要に応じて記述すれば良い．</p>

<h2>3. Objective-C と Swift での違いについて</h2>

<p>開発言語は Swift を使用する予定だけど，気になったのでメモしておく．実行時の振る舞いに関係する各ソースコードを示したのちに，その違いについて考えてみる．各ソースコードは，Xcode で Single View Application を作成した時のテンプレ．中略の部分は，スケルトンコードが書かれていた部分．</p>

<h3>Objective-C</h3>

<p><code>AppDelegate</code>が定義されたファイルの他に，<code>main.m</code>がある．</p>
<div class="highlight"><pre><code class="language-Objective-C" data-lang="Objective-C"><span class="c1">//////////</span>
<span class="c1">// main.m</span>
<span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
<span class="cp">#import &quot;AppDelegate.h&quot;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="k">@autoreleasepool</span> <span class="p">{</span>
        <span class="c1">// UIApplicationMain関数に，AppDelegateクラスを渡している．</span>
        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/////////////////</span>
<span class="c1">// AppDelegate.h</span>
<span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>

<span class="k">@interface</span> <span class="nc">AppDelegate</span> : <span class="bp">UIResponder</span> <span class="o">&lt;</span><span class="bp">UIApplicationDelegate</span><span class="o">&gt;</span>
<span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">/////////////////</span>
<span class="c1">// AppDelegate.m</span>
<span class="cp">#import &quot;AppDelegate.h&quot;</span>

<span class="k">@interface</span> <span class="nc">AppDelegate</span> <span class="p">()</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">AppDelegate</span>
<span class="c1">// 中略</span>
<span class="k">@end</span>
</code></pre></div>
<h3>Swift</h3>
<div class="highlight"><pre><code class="language-Swift" data-lang="Swift"><span class="c1">/////////////////////</span>
<span class="c1">// AppDelegate.swift</span>
<span class="k">import</span> <span class="n">UIKit</span>

<span class="c1">// Main関数の自動実装？</span>
<span class="p">@</span><span class="n">UIApplicationMain</span>
<span class="k">class</span> <span class="nl">AppDelegate</span><span class="p">:</span> <span class="bp">UIResponder</span><span class="p">,</span> <span class="bp">UIApplicationDelegate</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nl">window</span><span class="p">:</span> <span class="bp">UIWindow</span><span class="o">?</span>

    <span class="k">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSObject</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
        <span class="c1">// Override point for customization after application launch.</span>
        <span class="k">return</span> <span class="nb">true</span>
    <span class="p">}</span>

    <span class="c1">// 中略</span>
<span class="p">}</span>
</code></pre></div>
<p>Objective-C では，単純に<code>UIApplicationMain</code>関数に<code>AppDelegate</code>クラスを渡しているが，Swift の<code>@UIApplicationMain</code>とはなんなのか？<br>
探してみると，同じ疑問を抱いている人がいた．</p>

<blockquote>
<p><a href="http://stackoverflow.com/questions/24516250/what-does-uiapplicationmain-mean">swift - What does &quot;@UIApplicationMain&quot; mean? - Stackoverflow</a></p>
</blockquote>

<p>そもそも，iOSアプリケーションにおける<code>main</code>関数の主な役割は以下の2つである．</p>

<ul>
<li>C プログラムの入り口になる</li>
<li><code>UIApplicationMain</code>関数の呼び出し</li>
</ul>

<p>要は，<code>UIApplicationMain</code>関数と<code>AppDelegate</code>クラスをひもづけられれば良いようだ．これを実現するために，Swift では <strong>Attributes</strong> が用いられている．</p>

<p>Attributes とは定義や型に関して情報を補足するもので，先頭に<code>@</code>を付加して記述する．</p>

<blockquote>
<p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html">Attributes - iOS Developer Library</a></p>
</blockquote>

<p>公式ドキュメントでは，<code>UIApplicationMain</code> attirbute について以下のように記述されている．</p>

<blockquote>
<p>UIApplicationMain<br>
Apply this attribute to a class to indicate that it is the application delegate. Using this attribute is equivalent to calling the UIApplicationMain function and passing this class’s name as the name of the delegate class.</p>
</blockquote>

<p>まとめると&#8230;</p>

<ul>
<li><code>UIApplicationMain</code> attributes は<code>AppDelegate</code>クラスに付加する</li>
<li><code>UIApplicationMain</code> 関数を呼び出せる</li>
<li>付加されたクラスのクラス名を，<code>delegate class</code> のクラス名として登録する</li>
</ul>

<p>つまり，Objective-C における Main 関数と同等に振る舞うということらしい．ちなみに，この attributes を利用する代わりに<code>main.swift</code>を作成することもできるそうだ．</p>

<p>同じことをやっていることはわかっていたけど，やっぱり公式ドキュメントに記述を発見できたり，明確な理由付けができると，落ち着く．</p>

<h2>参考</h2>

<blockquote>
<p><a href="http://qiita.com/shu223/items/437d9a9a3502800a891b">Objective-C で書いたアプリを Swift で書き換える5ステップ - Qiita</a><br>
<a href="http://tomoyaonishi.hatenablog.jp/entry/2015/03/22/144246">SwiftのAttributesをまとめた。 - tomoyaonishiのブログ</a></p>
</blockquote>
]]></content>
  </entry>
  
</feed>
