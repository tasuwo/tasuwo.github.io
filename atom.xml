<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tasuwo blog]]></title>
  <link href="http://tasuwo.github.io/atom.xml" rel="self"/>
  <link href="http://tasuwo.github.io/"/>
  <updated>2016-05-14T16:32:18+09:00</updated>
  <id>http://tasuwo.github.io/</id>
  <author>
    <name><![CDATA[tasuwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs における Path 問題を解決した]]></title>
    <link href="http://tasuwo.github.io/blog/2016/05/14/emacs-path/"/>
    <updated>2016-05-14T15:48:12+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/05/14/emacs-path</id>
    <content type="html"><![CDATA[<p>Emacs のパスがおかしかったので修正．</p>

<!-- more -->

<p>まず，TeX 環境を Emacs で整えようと，以下のサイトを参考にシェルスクリプトを記述し，<code>/usr/local/bin</code> 直下に配置した．</p>

<p><a href="http://qiita.com/ynakayama/items/706ae9e59c1b6fd3e3d2">モダンな日本語 TeX 環境を整える - Qiita</a></p>

<p>その後，Emacs から <code>C-c t j</code> によって TeX ファイルをコンパイルしようとすると，以下のエラーが生じた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Call <span class="sb">`</span>platex2pdf ipsj_11t4054x.tex<span class="err">&#39;</span>
</span><span class='line'>/usr/local/bin/platex2pdf: line 18: platex: <span class="nb">command </span>not found
</span><span class='line'>/usr/local/bin/platex2pdf: line 19: dvipdfmx: <span class="nb">command </span>not found
</span><span class='line'>
</span><span class='line'><span class="nb">typeset </span>exited abnormally with code <span class="m">127</span> at Sat May <span class="m">14</span> 15:50:32 <span class="o">(</span>0.06 secs<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>パスが通っていないっぽいので，下記サイトを参考に <code>exec-path-from-shell</code> を導入した．</p>

<p><a href="https://github.com/purcell/exec-path-from-shell">purcell/exec-path-from-shell: Make Emacs use the $PATH set up by the user&#39;s shell</a><br>
<a href="http://qiita.com/catatsuy/items/3dda714f4c60c435bb25">EmacsでPATHの設定が引き継がれない問題をエレガントに解決する - Qiita</a></p>

<p>それでもうまくパスが通っていないように見えた．emacs上から <code>M-x getenv</code> して <code>PATH</code> を選択すると，emacs 上の環境変数の内容を確認できる．確認したところ，自分が普段使用している zsh の <code>.zprofile</code> ではなく，<code>.bash_profile</code> が参照されていることがわかった．</p>

<p>これは，普段使いは homebrew でインストールした zsh なのだが，OS のデフォルトシェルが bash になっていたためだった．ちなみに，デフォルトシェルは <code>echo $SHELL</code> で確認できる．</p>

<p>シェルを変更するには <code>chsh</code> コマンドを使用する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cush -s /usr/local/bin/zsh
</span></code></pre></td></tr></table></div></figure>

<p>ただし，homebrew 等でインストールしたシェルを設定するには，<code>/etc/shells</code> にそれを追記する必要がある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># List of acceptable shells for chpass(1).</span>
</span><span class='line'><span class="c"># Ftpd will not allow users to connect who are not using</span>
</span><span class='line'><span class="c"># one of these shells.</span>
</span><span class='line'>
</span><span class='line'>/bin/bash
</span><span class='line'>/bin/csh
</span><span class='line'>/bin/ksh
</span><span class='line'>/bin/sh
</span><span class='line'>/bin/tcsh
</span><span class='line'>/bin/zsh
</span><span class='line'>/usr/local/bin/zsh <span class="c"># &lt;- これを追加</span>
</span></code></pre></td></tr></table></div></figure>

<p>設定後はPCを<strong>再起動</strong>すること．<br>
その後，無事 TeX ファイルをコンパイルできた．</p>

<p>Terminal の設定で <code>/usr/local/bin/zsh</code> を起動するようにしていたので，気づかなかった&#8230;</p>

<p><a href="http://rcmdnk.github.io/blog/2015/05/25/computer-mac-bash-zsh/">Macでログインシェルを確認/変更するいくつかの方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TeX2img で Ghostscript Cannot Be Exexuted ではまる]]></title>
    <link href="http://tasuwo.github.io/blog/2016/05/14/tex-to-img/"/>
    <updated>2016-05-14T12:05:55+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/05/14/tex-to-img</id>
    <content type="html"><![CDATA[<p>TeX2img を使おうとしたらはまったのでメモしておく．<br>
具体的には，<code>tex2img : ghostscript cannot be executed.</code> ではまった．<br>
以下に解決までの道のりを示しておく．結果をいうと，<strong>GhostScript のバージョンが古かった</strong> というだけの話．<br>
実行時の環境は OS X Yosemite です．</p>

<!-- more -->

<h2>TeX2imgとは</h2>

<p>入力したTeXコードを画像に出力する．<a href="http://island.geocities.jp/loveinequality/#download">TeX2img配布サイト</a> でダウンロードする．</p>

<h2>テストしてみる</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="nb">{</span>jsarticle<span class="nb">}</span>
</span><span class='line'><span class="k">\usepackage</span><span class="nb">{</span>amsmath<span class="nb">}</span>
</span><span class='line'><span class="k">\pagestyle</span><span class="nb">{</span>empty<span class="nb">}</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">\section*</span><span class="nb">{</span>問題<span class="nb">}</span>
</span><span class='line'>線形写像~<span class="s">$</span><span class="nb">f</span><span class="s">$</span>に対し、
</span><span class='line'><span class="sb">\[</span><span class="nb"></span>
</span><span class='line'><span class="nv">\text</span><span class="nb">{$f$~が単射である} </span><span class="nv">\Leftrightarrow</span><span class="nb"> </span><span class="nv">\ker</span><span class="o">(</span><span class="nb">f</span><span class="o">)=</span><span class="nv">\{</span><span class="m">0</span><span class="nv">\}</span><span class="nb"></span>
</span><span class='line'><span class="s">\]</span>
</span><span class='line'>を証明せよ。
</span><span class='line'>
</span><span class='line'><span class="k">\section*</span><span class="nb">{</span>解答<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'>1.~<span class="s">$</span><span class="nv">\Rightarrow</span><span class="s">$</span>の対偶を示す。
</span><span class='line'>
</span><span class='line'><span class="s">$</span><span class="nb">f</span><span class="s">$</span>~が線型写像なら<span class="s">$</span><span class="nv">\ker</span><span class="o">(</span><span class="nb">f</span><span class="o">)</span><span class="nb"> </span><span class="nv">\ni</span><span class="nb"> </span><span class="m">0</span><span class="s">$</span>なので、<span class="s">$</span><span class="nv">\ker</span><span class="o">(</span><span class="nb">f</span><span class="o">)</span><span class="s">$</span>に属する<span class="s">$</span><span class="m">0</span><span class="s">$</span>~以外の元の存在を仮定し、それを<span class="s">$</span><span class="nb">a</span><span class="s">$</span>とする。
</span><span class='line'>このとき、<span class="s">$</span><span class="nb">a </span><span class="nv">\neq</span><span class="nb"> </span><span class="m">0</span><span class="s">$</span>かつ<span class="s">$</span><span class="nb">f</span><span class="o">(</span><span class="nb">a</span><span class="o">)=</span><span class="nb">f</span><span class="o">(</span><span class="m">0</span><span class="o">)=</span><span class="m">0</span><span class="s">$</span>なので<span class="s">$</span><span class="nb">f</span><span class="s">$</span>~は単射ではない。
</span><span class='line'>
</span><span class='line'><span class="k">\medskip</span>
</span><span class='line'>
</span><span class='line'>2.~<span class="s">$</span><span class="nv">\Leftarrow</span><span class="s">$</span>を背理法で示す。
</span><span class='line'>
</span><span class='line'><span class="s">$</span><span class="nv">\ker</span><span class="o">(</span><span class="nb">f</span><span class="o">)=</span><span class="nv">\{</span><span class="m">0</span><span class="nv">\}</span><span class="s">$</span>かつ<span class="s">$</span><span class="nb">f</span><span class="s">$</span>は単射ではないと仮定する。
</span><span class='line'><span class="s">$</span><span class="nb">f</span><span class="s">$</span>~は単射でないので<span class="s">$</span><span class="nb">a </span><span class="nv">\neq</span><span class="nb"> b</span><span class="s">$</span>かつ<span class="s">$</span><span class="nb">f</span><span class="o">(</span><span class="nb">a</span><span class="o">)=</span><span class="nb">f</span><span class="o">(</span><span class="nb">b</span><span class="o">)</span><span class="s">$</span>という<span class="s">$</span><span class="nb">a,b</span><span class="s">$</span>が存在する。
</span><span class='line'><span class="s">$</span><span class="nb">f</span><span class="s">$</span>~は線型写像だから<span class="s">$</span><span class="nb">f</span><span class="o">(</span><span class="nb">a</span><span class="o">)-</span><span class="nb">f</span><span class="o">(</span><span class="nb">b</span><span class="o">)=</span><span class="nb">f</span><span class="o">(</span><span class="nb">a</span><span class="o">-</span><span class="nb">b</span><span class="o">)</span><span class="s">$</span>となり、<span class="s">$</span><span class="nb">f</span><span class="o">(</span><span class="nb">a</span><span class="o">)=</span><span class="nb">f</span><span class="o">(</span><span class="nb">b</span><span class="o">)</span><span class="s">$</span>から<span class="s">$</span><span class="nb">f</span><span class="o">(</span><span class="nb">a</span><span class="o">-</span><span class="nb">b</span><span class="o">)=</span><span class="m">0</span><span class="s">$</span>~がいえる。
</span><span class='line'><span class="s">$</span><span class="nb">f</span><span class="o">(</span><span class="nb">a</span><span class="o">-</span><span class="nb">b</span><span class="o">)=</span><span class="m">0</span><span class="s">$</span>と<span class="s">$</span><span class="nv">\ker</span><span class="o">(</span><span class="nb">f</span><span class="o">)=</span><span class="nv">\{</span><span class="m">0</span><span class="nv">\}</span><span class="s">$</span>から<span class="s">$</span><span class="nb">a</span><span class="o">-</span><span class="nb">b</span><span class="o">=</span><span class="m">0</span><span class="s">$</span>がいえるが、これは<span class="s">$</span><span class="nb">a </span><span class="nv">\neq</span><span class="nb"> b</span><span class="s">$</span>と矛盾する。
</span><span class='line'>
</span><span class='line'><span class="k">\medskip</span>
</span><span class='line'>
</span><span class='line'>以上1.と2.により、<span class="s">$</span><span class="nv">\text</span><span class="nb">{線型写像~</span><span class="s">$</span>f<span class="s">$</span><span class="nb">が単射である}</span><span class="nv">\Leftrightarrow</span><span class="nb"> </span><span class="nv">\ker</span><span class="o">(</span><span class="nb">f</span><span class="o">)=</span><span class="nv">\{</span><span class="m">0</span><span class="nv">\}</span><span class="s">$</span>が示された。<span class="k">\rule</span><span class="nb">{</span>5pt<span class="nb">}{</span>10pt<span class="nb">}</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tex2img
</span><span class='line'>    --kanji utf8
</span><span class='line'>    --left-margin 50
</span><span class='line'>    --right-margin 50
</span><span class='line'>    --top-margin 50
</span><span class='line'>    --bottom-margin 50
</span><span class='line'>    ker.tex ker.png
</span></code></pre></td></tr></table></div></figure>

<p>エラーが出た．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dyld: Library not loaded: /usr/X11/lib/libXt.6.dylib
</span><span class='line'>  Referenced from: /usr/local/bin/gs
</span><span class='line'>  Reason: image not found
</span><span class='line'><span class="nv">$ </span>/usr/local/bin/gs -dNOPAUSE -dBATCH -sDEVICE<span class="o">=</span>eps2write -dNoOutputFonts -dFirstPage<span class="o">=</span><span class="m">1</span> -dLastPage<span class="o">=</span><span class="m">1</span> -r20016 -sOutputFile<span class="o">=</span>temp87367-7E615928-10FE-48F8-B95F-C37F37DEBE76.eps temp87367-7E615928-10FE-48F8-B95F-C37F37DEBE76.pdf  2&gt;<span class="p">&amp;</span>1
</span><span class='line'>dyld: Library not loaded: /usr/X11/lib/libXt.6.dylib
</span><span class='line'>  Referenced from: /usr/local/bin/gs
</span><span class='line'>  Reason: image not found
</span><span class='line'>sh: line 1: <span class="m">87394</span> Trace/BPT <span class="nb">trap</span>: <span class="m">5</span>       /usr/local/bin/gs -dNOPAUSE -dBATCH -sDEVICE<span class="o">=</span>eps2write -dNoOutputFonts -dFirstPage<span class="o">=</span><span class="m">1</span> -dLastPage<span class="o">=</span><span class="m">1</span> -r20016 -sOutputFile<span class="o">=</span>temp87367-7E615928-10FE-48F8-B95F-C37F37DEBE76.eps temp87367-7E615928-10FE-48F8-B95F-C37F37DEBE76.pdf 2&gt;<span class="p">&amp;</span>1
</span><span class='line'>tex2img : ghostscript cannot be executed.
</span><span class='line'>Check errors in the <span class="nb">source </span>code.
</span></code></pre></td></tr></table></div></figure>

<p><a href="http://tex.stackexchange.com/questions/208001/cant-compile-image-after-upgrading-to-os-x-yosemite">graphics - Can&#39;t compile image after upgrading to OS X Yosemite - TeX - LaTeX Stack Exchange</a> に似たようなエラーを確認．どうやら X11 のパスの問題らしい．自分の環境の場合，システム上に X11 が存在しないわけではないので，以下のようにシンボリックリンクを作成することで回避する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /opt/X11 /usr/X11
</span></code></pre></td></tr></table></div></figure>

<p>しかし，まだ以下のようなエラーが出ていた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tex2img : ghostscript cannot be executed.
</span></code></pre></td></tr></table></div></figure>

<p><a href="http://acetaminophen.hatenablog.com/entry/tex2img-cui">TeX2img のコマンドライン版の使い方（改訂版） - Acetaminophen’s diary</a> の <strong>Ghostscriptのエラー回避</strong> の場所にあった<code>--quick</code>オプションを用いるととりあえずエラーメッセージは表示されなくなったが，結果がうまく出力されないので，何の解決にもなっていない．</p>

<p><a href="http://acetaminophen.hatenablog.com/entry/2014/10/18/214403">TeX2img (Windows/Mac) の動作の詳細 - Acetaminophen’s diary</a> を参考にしてみると，内部処理は以下のようになっているらしい．</p>

<p><strong>【JPEG/PNG出力(画質優先モード)の場合】</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
<span class='line-number'>4</span><br>
<span class='line-number'>5</span><br>
<span class='line-number'>6</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>TeX →<span class="o">[</span>platex<span class="o">]</span><br>
</span><span class='line'>DVI →<span class="o">[</span>dvipdfmx<span class="o">]</span><br>
</span><span class='line'>PDF →<span class="o">[</span>gs <span class="o">(</span>eps<span class="o">(</span>2<span class="o">)</span>write<span class="o">)</span>でアウトライン化＋クロップ<span class="o">]</span><br>
</span><span class='line'>EPS →<span class="o">[</span>epstopdf <span class="o">(</span>gs<span class="o">)]</span><br>
</span><span class='line'>PDF →<span class="o">[</span>OS X の APIでビットマップ化＋余白付与<span class="o">]</span><br>
</span><span class='line'>JPEG/PNG<br>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>【JPEG/PNG出力(速度優先モードの場合)】</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
<span class='line-number'>4</span><br>
<span class='line-number'>5</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>TeX →<span class="o">[</span>platex<span class="o">]</span><br>
</span><span class='line'>DVI →<span class="o">[</span>dvipdfmx<span class="o">]</span><br>
</span><span class='line'>PDF →<span class="o">[</span>pdfcropでクロップ＋余白付与<span class="o">]</span><br>
</span><span class='line'>PDF →<span class="o">[</span>OS X のQuartz API<span class="o">]</span><br>
</span><span class='line'>JPEG/PNG<br>
</span></code></pre></td></tr></table></div></figure></p>

<p>さらに，</p>

<blockquote>
<p>EPS ファイルへの余白付与は EPS の BoundingBox 情報を書き換えることによって実装されている</p>
</blockquote>

<p>とのこと．GhostScript を使っている手順，つまり，<code>eps(2)write</code>の部分がうまくいってないのではないか？と考えられる．そこでログを見てみると，以下のような記述を発見．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/usr/local/bin/gs -dNOPAUSE -dBATCH -sDEVICE<span class="o">=</span>epswrite -dFirstPage<span class="o">=</span><span class="m">1</span> -dLastPage<span class="o">=</span><span class="m">1</span> -r20016 -sOutputFile<span class="o">=</span>temp93003-D85DBCB1-8F3C-4AC6-8FFC-B7ADB9615615.eps temp93003-D85DBCB1-8F3C-4AC6-8FFC-B7ADB9615615.pdf  2&gt;<span class="p">&amp;</span>1
</span><span class='line'>ESP Ghostscript 7.07 <span class="o">(</span>2003-07-12<span class="o">)</span>
</span><span class='line'>Copyright <span class="m">2003</span> artofcode LLC and Easy Software Products, all rights reserved.
</span><span class='line'>This software comes with NO WARRANTY: see the file PUBLIC <span class="k">for</span> details.
</span><span class='line'>Error: /syntaxerror in readxref
</span><span class='line'>Operand stack:
</span></code></pre></td></tr></table></div></figure>

<p><code>Error: /syntaxerror in readxref</code> とのこと．再現可能かどうか確かめてみるため，適当に<code>test.pdf</code>を用意してターミナルから以下を実行した．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gs -dNOPAUSE -dBATCH -sDEVICE<span class="o">=</span>epswrite -dFirstPage<span class="o">=</span><span class="m">1</span> -dLastPage<span class="o">=</span><span class="m">1</span> -r20016 -sOutputFile<span class="o">=</span>test.eps test.pdf
</span><span class='line'>ESP Ghostscript 7.07 <span class="o">(</span>2003-07-12<span class="o">)</span>
</span><span class='line'>Copyright <span class="m">2003</span> artofcode LLC and Easy Software Products, all rights reserved.
</span><span class='line'>This software comes with NO WARRANTY: see the file PUBLIC <span class="k">for</span> details.
</span><span class='line'>Processing pages <span class="m">1</span> through 1.
</span><span class='line'>Page 1
</span></code></pre></td></tr></table></div></figure>

<p>実行が終了しなかったので中断した．解像度を下げて実行してみる．解像度の指定は<code>-r</code>の部分．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gs -dNOPAUSE -dBATCH -sDEVICE<span class="o">=</span>epswrite -dFirstPage<span class="o">=</span><span class="m">1</span> -dLastPage<span class="o">=</span><span class="m">1</span> -r720 -sOutputFile<span class="o">=</span>test.eps test.pdf
</span><span class='line'>ESP Ghostscript 7.07 <span class="o">(</span>2003-07-12<span class="o">)</span>
</span><span class='line'>Copyright <span class="m">2003</span> artofcode LLC and Easy Software Products, all rights reserved.
</span><span class='line'>This software comes with NO WARRANTY: see the file PUBLIC <span class="k">for</span> details.
</span><span class='line'>Processing pages <span class="m">1</span> through 1.
</span><span class='line'>Page 1
</span></code></pre></td></tr></table></div></figure>

<p>実行できた．前回は解像度を高くしすぎたために実行に時間がかかっていただけのようだ．とりあえず，動くことはわかった．<code>/usr/local/bin/gs</code>は実行できるのでパスの問題ではないし，こうして動きもしたわけだから GS が悪いわけでもなさそう．<br>
さて，じゃぁ一体なんだよ！となるわけだが．<a href="https://groups.google.com/forum/#!topic/fa.hylafax/z-qsRvVF8eY">[hylafax-users] /syntaxerror in readxref - Google Groups</a> を見てみると，先ほどのエラーはGSがPDFを扱うときに出力されるエラーらしい．GSのバージョンを最新にしてくれとかいてある．</p>

<p>バージョンを調べる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gs -v
</span><span class='line'>ESP Ghostscript 7.07.1 <span class="o">(</span>2003-07-12<span class="o">)</span>
</span><span class='line'>Copyright <span class="m">2003</span> artofcode LLC and Easy Software Products, all rights reserved.
</span></code></pre></td></tr></table></div></figure>

<p>ん？古い&#8230;Homebewでインストールした GhostScriptは&#8230;？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install ghostscript
</span><span class='line'>Warning: ghostscript-9.15 already installed
</span></code></pre></td></tr></table></div></figure>

<p><strong>バージョンがちがう&#8230;</strong></p>

<p>homebrewでインストールした以外にすでにghostscriptが入っていたのだと思われる．finderで検索をかけるとmacportsとsmにそれらしきものがヒット．おそらくやっていたのだろうけど覚えがない&#8230;MacTeXによるインストール時に一緒にインストールしてしまったのかな？<br>
とりあえず，元のgsを削除し以下のようにシンボリックリンクを貼り直す．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ln -s /usr/local/Cellar/ghostscript/9.15/bin/gs /usr/local/bin/
</span></code></pre></td></tr></table></div></figure>

<p>確認．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> gs -v
</span><span class='line'>GPL Ghostscript 9.15 <span class="o">(</span>2014-09-22<span class="o">)</span>
</span><span class='line'>Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2014</span> Artifex Software, Inc.  All rights reserved.
</span></code></pre></td></tr></table></div></figure>

<p>無事出力できました．</p>

<p><a href="http://qiita.com/hyuki/items/692105eb72e3c8174999">tex2imgを使って、LaTeXで書いた数式を画像に変換する例</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TeX/LaTeXに関すること覚書]]></title>
    <link href="http://tasuwo.github.io/blog/2016/05/14/latex/"/>
    <updated>2016-05-14T10:46:37+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/05/14/latex</id>
    <content type="html"><![CDATA[<p>LaTeX とか TeX についていろいろまとめたので自分用メモ．<br>
2014年にまとめたものなので，現在とは環境が異なっている場合があります．環境が新しい人は以下のサイトが参考になると思われます．</p>

<p><a href="http://qiita.com/hideaki_polisci/items/3afd204449c6cdd995c9">El Capitan に 0 から TeX 環境を導入する人用</a></p>

<p><a href="http://abenori.blogspot.com/2015/10/el-capitantexplatex-dvipdfmxpdflatexmac.html">Yosemite 時代から TeX を導入しており El Capitan になった人用</a></p>

<p>また，El Capitan から TeX 関連プログラムへのパスが <code>/usr/texbin</code> ではなく <code>/Library/TeX/texbin</code> に変更になっている．</p>

<p><a href="https://texwiki.texjp.org/?TeX%20Live%2FMac#i8a16a2b">TeX Live/Mac - TeX Wiki</a></p>

<!-- more -->

<h1>1. TeXとは？</h1>

<p>コンピュータ科学者 Donald E. Knuth によって生み出された文書整形システムで，特徴は以下．</p>

<ul>
<li>複雑な数式でも綺麗に書ける</li>
<li>論文とかを書くのに適している</li>
<li>多くのOS上で動作する</li>
<li>TeXのソースはテキストファイル = 異なるシステムでもソースを共通に使える</li>
<li>フリーウェア</li>
</ul>

<p>文書作成の流れは以下.</p>

<ol>
<li>字の種類, 大きさ, 印字位置等を制御する命令を挿入したテキストファイルの作成</li>
<li>Texでコンパイルし, DVIファイルを作成</li>
<li>プレビューでDVIファイルを確認. できていなければ 1. へ戻る</li>
<li>プリンタに出力</li>
</ol>

<p><a href="http://www.juen.ac.jp/math/nakagawa/texguide.html">TeXを使って数式をきれいに書こう</a></p>

<h2>1.1 簡単な用語説明</h2>

<p><strong>TeX</strong> は組版エンジンであり一種のプログラミング言語であり，言語処理系である．自己拡張性を持つ．単一のアプリケーションではなく，プログラムやファイルの集合体．</p>

<p>TeX だけでは組版が難しかったため，プログラミング言語でいうライブラリにあたるものが必要となった．そこでまず Knuth 自身が必要最低限の機能を追加したマクロパッケージ <strong>plain TeX</strong> を作成した．</p>

<p>そこからさらに論文，レポート作成を簡単にできるよう拡張したのが，Leslie Lamport による <strong>LaTeX</strong> である．</p>

<p>LaTeX はパッケージ(スタイルファイル)の読み込みにより機能拡張が容易になっている．パッケージはユーザ自身が作成することもでき，これを集めたサイトが<a href="http://www.ctan.org/">CTAN: Comprehensive TeX Archive Network</a>である．</p>

<p>また，TeX や LaTeX は単一のアプリケーションではなく，膨大な数の実行形式ファイルやマクロ等の集合である．これらをパッケージングしたTeX/LaTeX ディストリビューションが <strong>TeX Live</strong> である．さらに，Macユーザ用に便利な周辺ツール等もまとめてパッケージングしたディストリビューションが <strong>Mac Tex</strong> である．</p>

<h2>1.2 TeXディストリビューション</h2>

<p>TeXには以下のようなものが含まれる．</p>

<ul>
<li>膨大な数の実行形式ファイル</li>
<li>マクロ</li>
<li>フォントファイル</li>
<li>周辺ユーティリティ</li>
</ul>

<p>以上の集合体がTeXである．また，マクロやフォントファイル等は開発者が個々に開発している．そこで，これらの機能をまとめて用いるために，これらをうまく組み合わせて調整した配布物を，TeXディストリビューションという．</p>

<table><thead>
<tr>
<th></th>
<th>海外</th>
<th>国内</th>
</tr>
</thead><tbody>
<tr>
<td>UNIX用ソース</td>
<td>teTeX，TeXLive</td>
<td>ptetex3，ptexlive</td>
</tr>
<tr>
<td>Windows用実行形式</td>
<td>TexLive，MiKTeX，proTeXt</td>
<td>W32TeX</td>
</tr>
</tbody></table>

<p>現在は日本でも TeXLive が主流．また，TeX Liveは<code>tlmgr</code>というユーティリティで，オンラインアップデートが可能．</p>

<h2>1.3 TeX エンジン</h2>

<p>TeX エンジン．すなわち TeX の処理系とは， TeX を入力すると DVI やら PDF が出てくるプログラムのこと．</p>

<ul>
<li><p><strong>Tex</strong>．原点．モダンな TeX ディストリビューションの標準エンジンとして使われている．プレーンなフォーマットのみ仕様する場合，これが標準エンジンとして仕様される．最終的な更新は1990年のバージョン3であり，別名を TeX90 といった．その前のバージョン2は Tex82 という．前者は 8bit，後者は 7bit を入力に仕様していた</p></li>
<li><p><strong>e-Tex</strong>．1990年代に登場．<code>Tex--XeT</code> と呼ばれる双方向植字拡張(右から左へ書く文字への対応)，レジスタ数拡張，TeXプログラミングを容易にする様々な機能を追加した．e-TeX の各条は新しいエンジンの多くに取り入れられているが，e-TeX 自体は広く使われているわけではない．ちなみに，LuaTeX は双方向植字に TeX&#8211;XeT を使用しておらず，これに関わらない部分についてのみ e-TeX のプリミティブを採用している．</p></li>
<li><p><strong>pTeX</strong>．日本語を扱うための機能を実装した．日本語と欧文の混在や縦書き組版に対応している．</p></li>
<li><p><strong>e-pTeX</strong>．e-Tex + pTeX．</p></li>
<li><p><strong>upTeX</strong>，<strong>e-upTeX</strong>．pTeXの拡張で扱える日本語は，JIS第一，第二水準までであり，Unicode には対応していない．また，TeX の文書を UTF-8 で記述した場合に対応できない．platex を使用する際，<code>nkf</code>などで TeX を EUC に変換してから pTeX に捩込む案があり，<code>--kanji=utf8</code> オプションで実行できる．しかし依然として未収録の文字は扱えない．OTFパッケージもあったが微妙なので，内部文字コードを Unicode にしようという試みが行われた．これが upTeX．e-TeX とマージされたものが e-upTeX．</p>

<ul>
<li>OTFパッケージ．文字コードのようなものを直接入力することで未収録の文字も扱えるようにしたもの．</li>
</ul></li>
<li><p><strong>pdfTeX</strong>．e-Tex にPDFに関係するプリミティブの数々を追加したもの．pdfTeX は出力形式として dvi と pdf の両方をサポートしている．一番の特徴は，dvi を介さずに pdf を直接出力すること．また，現在の絶対値取得(<code>\pdfsavepos</code>)などの便利な機能も存在する．その他にも，PDFに影響を与えるプリミティブな命令が用意されているのがいいところ．例えばリンクの出力や，複雑な図の作成が行える．pdfTeX はモダンな TeX システムのデフォルトエンジンとしてよく使用されている．</p></li>
<li><p><strong>XeTeX</strong>．e-TeX に対し，入力として UTF-8 をサポートし，さらにシステムフォントにアクセスできるようにしたもの．これまでは，「DVIファイルを出力し，フォントに関してはDVIを処理するアプリに任せる」という方針だった．e-pTeX などではフォント埋め込みする際には，TeX川の設定の後，dvipdfmx の設定をする必要があった．XeTeX はこのデバイス日依存の DVI を生成することを諦めた．内部的には XDV という DVI 拡張を経由し，xsvipdfmx と言う dvipfmx の改造品を使用してPDF を生成する．</p></li>
<li><p><strong>LuaTeX</strong>．もともとは pdfTeX のバージョン2を目指していたが，現在は独立したアプローチをとっている．e-TeX の拡張と，UTF-8 の入力，そして Lua スクリプティングエンジンを採用している．pdfTeX のプリミティブをいくつか持つが，代わりに Lua スクリプトを使用して実現しているものもある．LuaTeX は Lua を使用してシステムフォントにアクセスできる．Omega と Aleph のアイデアを採用している．</p>

<ul>
<li><strong>Omega</strong>．Unicode 対応．多書字方向(左-&gt;右，上-&gt;下&#8230;)．その他自然言語処理との連携や XML 処理等の構想があったが，2003年に開発は中断した</li>
</ul></li>
</ul>

<p><a href="http://oku.edu.mie-u.ac.jp/%7Eokumura/texfaq/intro.html">Introduction to LaTeX</a><br>
<a href="http://www.fugenji.org/%7Ethomas/texlive-guide/why.html">なぜ TeX Live なのか</a><br>
<a href="http://d.hatena.ne.jp/zrbabbler/20140321/1395360402">異様な LaTeX の話 - マクロツイーター</a><br>
<a href="http://tandoori.hatenablog.com/entry/20130802/1375451791">Mac OS X にTeXをインストールする初心者向けメモ</a><br>
<a href="http://tex.stackexchange.com/questions/13593/the-differences-between-tex-engines">tex core - The differences between TeX engines - TeX - LaTeX Stack Exchange</a><br>
<a href="https://oku.edu.mie-u.ac.jp/texconf10/presentations/yato.pdf">日本人の知らないTeX - TeXの過去・現在・未来 - yato.pdf</a><br>
<a href="http://qiita.com/yyu/items/6404656f822ce14db935">TeX処理系御伽話 - Qiita</a></p>

<h1>2. TeX の歴史</h1>

<h2>2.1 世界史</h2>

<p>Donald E. Knuthは，SRIインターナショナル(世界で最も大きな研究機関の一つ)に所属していた.1974年に投稿論文の執筆を行っていたが，「論文の出来上がりがあまりにもひどく，見るに堪えなかった」ために執筆を中断する．その後1977年から組版についての研究を開始．自分自身で心ゆくまで組版を制御するためにTeXの開発を行った．伝統的な組版やその関連技術に関して幅広く調査を行い，その調査結果が反映され，TeXは商標品質の組版ができる柔軟で強力な組み版システムとなった．<br>
plain TeXは，プロが使うと非常に便利なシステム．1984年，TeXの仕様書とも云うべき「TeXbook」が出版された．ここには様々なコマンドが記載されていたが，コマンドの使用は多岐に渡るため，一読しただけでは理解できない部分が多かった．<br>
そこで登場したのがLaTeXである．TeX素人であっても，ある程度LaTeXの規則を学習すれば，TeXを使えるようになる．<br>
TeXはフリーソフトであり，ソースコードも公開されているので，誰でも改良を加えることができる．改良版の配布も，TeXと区別できるような別名をつけさえすれば許される．<br>
そのため，TeX/LaTeXには多数のバリエーションが存在する．しかし，TeX/LaTeXは単一のアプリケーションではない．そのため，個々のバリエーションも周辺ファイルと一揃えにして公開しなければならない．これは非常に効率が悪い．そこで，1992年にCTANの公開がスタートする．これにより，TeX/LaTeX関連のアーカイブを効率良く入手できる．<br>
2006年まではteTeXと呼ばれるものがメジャーだった．コンパクトで，フリーなプログラムのみを含み，徹底的なデバッグが行われていたからである．<br>
しかし，2006年5月にメンテナのThomas Esserはメンテナンスを終了し，TeX Liveの使用を推奨した．TeX Liveは1996年にスタートしたディストリビューションであり，巨大なアーカイブを有していた．そこから，debian GNU/LinuxやFedora Linuxのような大手LinuxディストリビューションがTeX Liveをdefaultとして採用するようになり，世間の標準もTex Liveに移行した．</p>

<table><thead>
<tr>
<th>年号</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>1974</td>
<td>Knuth が論文投稿を中断</td>
</tr>
<tr>
<td>1977</td>
<td>Knuth が組版の研究を開始</td>
</tr>
<tr>
<td>1980</td>
<td>TUG(TeX Users Group)発足</td>
</tr>
<tr>
<td>1984</td>
<td>TeXBook出版</td>
</tr>
<tr>
<td>1992</td>
<td>CTAN(Comprehensive Tex Archive Network)ができる</td>
</tr>
<tr>
<td>~2006</td>
<td>teTeXがメジャー</td>
</tr>
<tr>
<td>2006/5~</td>
<td>teTeX のメンテが終了し，TeXLiveが推奨</td>
</tr>
</tbody></table>

<h2>2.2 日本史</h2>

<table><thead>
<tr>
<th>年号</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>1980s</td>
<td>主流は以下&lt;\br&gt;- NTT jTeX/NTT jLaTeX (斉藤康己 in NTT) <br> - pTeX/pLaTeX (ASCII Media Works) <strong>*1</strong></td>
</tr>
<tr>
<td>2004</td>
<td>ptetex3(teTeX-3.0へのパッチ)が土屋展之による公開 <br> UNIX系環境に日本語TeX/LaTeXを導入しやすくなった</td>
</tr>
<tr>
<td>2006</td>
<td>teTeXが終了したが，主流はptetex3</td>
</tr>
<tr>
<td>2007</td>
<td>ptexlive(TeXLiveへの日本語パッチ)が公開されたが，主流はpetex3 <strong>*2</strong> <br> e-pTeX, upTeX/upLaTeX の登場</td>
</tr>
<tr>
<td>2010</td>
<td>TeXLive2010 にpTeX/pLaTeXが収録され，babelも収録 <br> texencにより複数日本語文字コードに対応 <strong>*3</strong></td>
</tr>
<tr>
<td>2011</td>
<td>日本語フォントとしてIPAフォントがマージ <br> babelのjapaneseパッケージがマージ</td>
</tr>
<tr>
<td>2011/11</td>
<td>OTFパッケージがマージ</td>
</tr>
<tr>
<td>2012/2</td>
<td>japanese-otf-uptexがマージ</td>
</tr>
<tr>
<td>2014</td>
<td>upTeX/upLaTeXが収録</td>
</tr>
</tbody></table>

<p><strong>*1</strong> : pTeX も jTeX もマルチバイト文字への対応を行っていた．pTeX は 16bit 以上の文字コードを扱えたが，オリジナルの TeX では用いられていなかったため，既存プログラムの多くは pTeX が出力する DVI を処理できなかった．jTeX は複数の 1byte 文字セットに分割することで対応しており，英語版からの変更が小さく，移植も比較的容易となっている．現在では以下の理由から pTeX の使用者が多い</p>

<ul>
<li>Unix系OS用の主な日本語対応TEX配布形態である ptexliveやptetex3がpTEXのみを採用している</li>
<li>pTeXに関する資料の方が，NTT jTeXよりも多い</li>
<li>pTeXは縦組に対応しているが，NTT jTeXはしていない</li>
</ul>

<p><strong>*2</strong> : babel という，他言語処理を実現する強力な環境がなかったためと言われている．</p>

<p><strong>*3</strong> : 以下の理由から普及しにくかったと考えられる．2011年頃から導入され始めた</p>

<ul>
<li>OTFパッケージがない

<ul>
<li>LaTeXでAdobe-Japan1-6のすべての文字を使用できる</li>
<li>門構えに月の「間」や，下の方が長い「吉」等を扱える</li>
<li>OTFパッケージをロードし，コードで指定すれば簡単に使うことができる．</li>
</ul></li>
<li>upTeX/upLaTeXない

<ul>
<li>pTeX/pLaTeXの内部処理をUnicode化したもの</li>
</ul></li>
</ul>

<p>これらは2011年頃から導入が開始される．現行のTeX Liveは，特にパッチを当てずとも日本語を問題なく扱うことができる．babelも扱えるし，レジスタや文字コードの問題，OTFパッケージの問題も解決されている．</p>

<p><a href="http://oku.edu.mie-u.ac.jp/%7Eokumura/texwiki/?CTAN">TeX Wiki CTAN</a><br>
<a href="http://tutimura.ath.cx/ptexlive/?TeX%A5%C7%A5%A3%A5%B9%A5%C8%A5%EA%A5%D3%A5%E5%A1%BC%A5%B7%A5%E7%A5%F3">TeX ディストリビューション †</a><br>
<a href="http://www.fugenji.org/%7Ethomas/texlive-guide/why.html">なぜ TeX Live なのか</a><br>
<a href="http://oku.edu.mie-u.ac.jp/%7Eokumura/texwiki/?TeX%E3%81%AE%E6%AD%B4%E5%8F%B2">TeX Wiki TeXの歴史</a></p>

<h1>3. 環境構築</h1>

<p>Mac OS X Yosemite(ver 10.10.1)で環境構築を行った場合，まとめ．必要なものは以下</p>

<ul>
<li>MacTeX</li>
<li>GhostScript</li>
</ul>

<h2>3.1 MacTeX</h2>

<p>MacTeX は OS X 用の TeXディストリビューション．TeXを使うための標準的なファイル一式をまとめたもので，TeXLive，TeXShop，GhostScript 等が含まれる．今回は主に TeXLive のインストールのために利用する．</p>

<p>まず，<a href="http://www.tug.org/mactex/">MacTeX</a>をダウンロード．容量が2GB以上あるので結構時間がかかる．<br>
インストール時に，カスタムで以下の二つは外しておく．GhostScript は homebrew 等他のパッケージ管理ツールで管理するのが楽らしいので後で個別にインストールする．</p>

<ul>
<li>GUI Application</li>
<li>GhostScript</li>
</ul>

<p>また，MacTeXには様々なソフトウェアが含まれるが，個々のソフトウェアは更新されているので，MacTeXを最新の状態に更新しなくてはならない．以下のコマンドを入力．結構時間がかかるので注意．これは定期的にやったほうがいいらしい．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo tlmgr update --self --all</span></code></pre></td></tr></table></div></figure>

<p>パスが通っていない場合は，<code>echo $PATH</code>で<code>/usr/texbin</code>が含まれているか確認する．</p>

<p><a href="http://oku.edu.mie-u.ac.jp/%7Eokumura/texwiki/?Mac#f5466652">TeX Wiki Mac</a><br>
<a href="http://uenohara.hatenablog.jp/entry/2014/02/02/224140">OS X MavericksにTeX環境を構築した記録 - h_uenoharaのブログ 上ノ原秀晃（政治学）の研究メモ</a><br>
<a href="http://what-alnk.hatenablog.com/entry/2014/11/02/182424">tlmgr update できなかった - 金魚亭日常</a><br>
<a href="http://tutimura.ath.cx/ptetex/?%C2%BF%BD%C5TEXMF%A5%C4%A5%EA%A1%BC">多重TEXMFツリー †</a></p>

<h2>3.2 GhostScript</h2>

<p>GhostScript は，PostScript/Portable Document Format(PDF) インタプリタ．PostScript/PDF ファイルを読み込み，画面，プリンタ，その他様々な形式のファイルに出力できる．</p>

<p>homebrewを使って管理したほうが楽らしい．homebrewが何かわからない場合 or 使いたくない場合はググって導入するか他の方法を考えること．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install ghostscript</span></code></pre></td></tr></table></div></figure>

<p><a href="https://oku.edu.mie-u.ac.jp/%7Eokumura/texwiki/?Ghostscript">TeX Wiki Ghostscript</a><br>
<a href="http://xanadu62.blogspot.jp/2014/11/ghostscript_22.html">GhostScriptあれこれ</a><br>
<a href="http://d.hatena.ne.jp/naruoga/20130110/1357827274">Ghostscript についてちょっとだけ</a></p>

<h2>3.3 おまけ：フォント埋め込みの設定</h2>

<p>デフォルトのフォントだと，明朝太字が太字にならない(自分の環境では代わりに？ゴシック体で表記された)．また，PDFには <em>フォント名だけが書き込まれた形式</em> と <em>フォントデータをPDF内に持っている形式</em> がある．前者の場合，他所に持って行って印刷した場合等に文字化け等の不具合が発生する可能性がある．後者のような形式を<strong>フォント埋め込み形式</strong>という．</p>

<h3>3.3.1 フォントの確認</h3>

<p>pdfにフォントが埋め込まれているかを確認する方法は<a href="http://ototorosama.hatenablog.com/entry/2013/02/14/055355">ここ</a>が参考になる．基本的に方法としては以下の三つ．</p>

<ul>
<li>Adobe Readerでプロパティを見る</li>
<li>webサービスを使う(<a href="http://www.ddc.co.jp/tokupre/data-guide/pdf-font-checker.html">これ</a>とか)</li>
<li>pdffontsコマンドを用いる</li>
</ul>

<p>今回は<code>pdffonts</code>コマンドを用いる方法を紹介．<code>pdffonts</code>はxpdfという，X Windows用のpdfビューワの一部．まずはxpdfをhomebrewでインストールする．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install homebrew/x11/xpdf</span></code></pre></td></tr></table></div></figure>

<p>使い方は以下．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pdffonts hoge.pdf</span></code></pre></td></tr></table></div></figure>

<p>使用例．emb欄でyesのものはフォントが埋め込まれている．和字のフォント(Ryumin-Light，GothicBBB)が埋め込まれていない．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  pdffonts  sample-noemb.pdf
</span><span class='line'>name                                 type         emb sub uni object ID
</span><span class='line'>------------------------------------ ------------ --- --- --- ---------
</span><span class='line'>GothicBBB-Medium-Identity-H          CID Type 0   no  no  no       8  0
</span><span class='line'>QEFPFE+CMBX12                        Type 1C      yes yes yes      9  0
</span><span class='line'>ORMRLI+CMR10                         Type 1C      yes yes yes     13  0
</span><span class='line'>ONEMZA+CMBX10                        Type 1C      yes yes yes     17  0
</span><span class='line'>CCLSCI+CMMI10                        Type 1C      yes yes yes     19  0
</span><span class='line'>Ryumin-Light-Identity-H              CID Type 0   no  no  no     261  0
</span><span class='line'>XSNNGN+CMSY10                        Type 1C      yes yes yes    285  0</span></code></pre></td></tr></table></div></figure>

<p>和字フォント(IPAフォント)を埋め込むと以下のように表記が変わる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  pdffonts  sample-emb.pdf
</span><span class='line'>name                                 type         emb sub uni object ID
</span><span class='line'>------------------------------------ ------------ --- --- --- ---------
</span><span class='line'>DZYRTV+IPAGothic                     CID TrueType yes yes no       8  0
</span><span class='line'>XMDHBY+CMBX12                        Type 1C      yes yes yes      9  0
</span><span class='line'>ULDJPJ+CMR10                         Type 1C      yes yes yes     13  0
</span><span class='line'>XPPTLU+CMBX10                        Type 1C      yes yes yes     17  0
</span><span class='line'>XOUXHN+CMMI10                        Type 1C      yes yes yes     19  0
</span><span class='line'>BCLQVY+IPAMincho                     CID TrueType yes yes no     261  0
</span><span class='line'>UKPGCN+CMSY10                        Type 1C      yes yes yes    285  0</span></code></pre></td></tr></table></div></figure>

<p>エラーが出る場合は以下のサイトを参考に直すこと．</p>

<p><a href="http://ototorosama.hatenablog.com/entry/2013/02/14/055355">pdfにフォントが埋め込まれてるか確認するコマンドpdffonts</a><br>
<a href="http://www.math.kobe-u.ac.jp/%7Ekodama/tips-latex-pdf-embedding.html">LaTeX(DVI)から作成する PDF のフォント埋め込み</a></p>

<h4>注意点 : TeX Live の変更について</h4>

<p>TeX Liveのインストールディレクトリは以下．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/texlive</span></code></pre></td></tr></table></div></figure>

<p>TeX Live 2014 をインストールした場合，<code>2014</code>というディレクトリと<code>texmf-local</code>というディレクトリがある．TeX Liveの改変を行う場合，<code>texmf-local</code>を変更した方が良い．<code>/usr/local/texlive/2014</code>内を改変すると，<code>tlmgr</code>によるオンラインアップデートによって改変部分が消えてしまう可能性がある．また，TeX Live 2015が出た時に今まで行った改変をやりなおすのはかしこくない．<br>
<code>/usr/local/texlive/texmf-local</code>に改変部分を記述しておけば，もしもの時には<code>/usr/local/texlive/2014</code>をばっさり削除し再インストール等で不具合に対処することも可能になる．便利．</p>

<h3>3.3.3 フォントのセットアップ</h3>

<p>いくつかのフォントはセットアップなしで使用できる．使用できるフォントは以下のコマンドで確認する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kanji-config-updmap status
</span><span class='line'>CURRENT family : noEmbed
</span><span class='line'>Standby family : hiragino
</span><span class='line'>Standby family : hiragino-pron
</span><span class='line'>Standby family : ipa
</span><span class='line'>Standby family : ipaex</span></code></pre></td></tr></table></div></figure>

<p><code>noEmbed</code>は何も選択していない場合に表示される．</p>

<h3>3.3.4 フォントファイルを用意する</h3>

<p>フォントをインストールする場合，インストール先は以下となる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/texlive/texmf-local/fonts/</span></code></pre></td></tr></table></div></figure>

<p>任意のフォルダを作成したりして，フォントの実態(.ttyとか.ttcとか)のシンボリックリンクをおけば良い．</p>

<p>例として，ヒラギノを使いたい場合は以下のようにする．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir -p /usr/local/texlive/texmf-local/fonts/opentype/public/hiragino/
</span><span class='line'>cd /usr/local/texlive/texmf-local/fonts/opentype/public/hiragino/
</span><span class='line'>
</span><span class='line'>sudo ln -s "/Library/Fonts/ヒラギノ明朝 Pro W3.otf" HiraMinPro-W3.otf
</span><span class='line'>sudo ln -s "/Library/Fonts/ヒラギノ明朝 Pro W6.otf" HiraMinPro-W6.otf
</span><span class='line'>sudo ln -s "/Library/Fonts/ヒラギノ角ゴ Pro W3.otf" HiraKakuPro-W3.otf
</span><span class='line'>sudo ln -s "/Library/Fonts/ヒラギノ角ゴ Pro W6.otf" HiraKakuPro-W6.otf
</span><span class='line'>sudo ln -s "/Library/Fonts/ヒラギノ角ゴ Std W8.otf" HiraKakuStd-W8.otf
</span><span class='line'>sudo ln -s "/Library/Fonts/ヒラギノ丸ゴ Pro W4.otf" HiraMaruPro-W4.otf
</span><span class='line'>sudo ln -s "/System/Library/Fonts/ヒラギノ明朝 ProN W3.otf" HiraMinProN-W3.otf
</span><span class='line'>sudo ln -s "/System/Library/Fonts/ヒラギノ明朝 ProN W6.otf" HiraMinProN-W6.otf
</span><span class='line'>sudo ln -s "/System/Library/Fonts/ヒラギノ角ゴ ProN W3.otf" HiraKakuProN-W3.otf
</span><span class='line'>sudo ln -s "/System/Library/Fonts/ヒラギノ角ゴ ProN W6.otf" HiraKakuProN-W6.otf
</span><span class='line'>sudo ln -s "/Library/Fonts/ヒラギノ角ゴ StdN W8.otf" HiraKakuStdN-W8.otf
</span><span class='line'>sudo ln -s "/Library/Fonts/ヒラギノ丸ゴ ProN W4.otf" HiraMaruProN-W4.otf</span></code></pre></td></tr></table></div></figure>

<h3>3.3.5 データベースの更新を行う</h3>

<p>TeX/LaTeXではおなじみ(らしい)．ls-Rデータベースの更新．以下のコマンドで行う．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mktexlsr</span></code></pre></td></tr></table></div></figure>

<h3>3.3.6 フォントマップを用意する</h3>

<p>フォントを用いることができるように設定を行う．しかし，LaTeX上でフォントを扱うソフトは複数存在する．DVIファイルの処理を行うだけでも&#8230;</p>

<ul>
<li>dvips</li>
<li>dvipdfmx</li>
<li>xdvi(&amp; pxdvi)</li>
<li>pdftex</li>
</ul>

<p>&#8230; 等があり，ひとつひとつにフォントの設定を行うのは困難である．<br>
そこで，いくつかのフォントを扱うソフトに対して統一的に設定を行える<code>updmap</code>というソフトがある．これはユーザ個人にのみ設定を反映させる．TeX Liveのシステム自体に設定を反映するには<code>updmap-sys</code>を用いる．<br>
現行のTeX Liveにはupdmap-sysのラッパーであるperlスクリプト<code>kanji-config-updmap(-sys)</code>が収録されている．これを使用することで，簡単にデフォルトフォントセットを設定することができる．<br>
システムに収録されているデフォルトフォントセットは以下にある．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/texlive/2014/texmf-dist/fonts/map/dvipdfmx/jfontmaps/</span></code></pre></td></tr></table></div></figure>

<p>ここにある<code>otf-*.map</code>を読み込み，システムのデフォルトセットとして登録することができる．フォントセットを設定するには，頭の<code>otf-</code>を取った残りの部分を指定する．例えば，ヒラギノをセットしたい場合は以下．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo updmap-sys --setoption kanjiEmbed hiragino
</span><span class='line'>$ kanji-config-updmap hiragino</span></code></pre></td></tr></table></div></figure>

<p>逆に，埋め込みをやめたい場合は以下．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kanji-config-updmap noEmbed</span></code></pre></td></tr></table></div></figure>

<p><code>kanji-config-updmap</code>はユーザ個人にしか反映されない．システム全体に設定を行う場合は<code>kanji-config-updmap-sys</code>を用いる．</p>

<p><a href="http://www.fugenji.org/%7Ethomas/texlive-guide/font_setup.html">日本語フォントのセットアップ</a><br>
<a href="http://ichiro-maruta.blogspot.jp/2013/08/windows-tex-live-2013.html">Windows の TeX Live 2013 でヒラギノフォントを埋め込む方法</a><br>
<a href="http://succzero.hatenablog.com/entry/2014/07/17/041211">MacTeX 2014 - 一歩前進</a><br>
<a href="http://osksn2.hep.sci.osaka-u.ac.jp/%7Etaku/osx/embed_hiragino.html">教授でもできる、TeXShop + MacTeX /UpTeX でのヒラギノ フォントの埋め込み</a><br>
<a href="https://sites.google.com/site/notitle221/tex/setup">導入&amp;初期設定</a></p>

<h2>おまけ : Sublimeで環境構築</h2>

<p>おまけ．SublimeText3で作業環境を整えた．CommandPalette(<code>⌘⇧P</code>)から<code>Install Package</code>を選択．<code>LaTexTools</code>をインストールする．<br>
LaTexToolsの設定を変更する．設定ファイルは以下に存在する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/Library/Application\ Support/Sublime\ Text\ 3/Packages/LaTeXTools/builders/traditionalBuilder.py</span></code></pre></td></tr></table></div></figure>

<p>20行目前後に以下があるのでコメントアウト．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEFAULT_COMMAND_LATEXMK = ["latexmk", "-cd",
</span><span class='line'>                    "-e", "$pdflatex = '%E -interaction=nonstopmode -synctex=1 %S %O’",
</span><span class='line'>                    "-f", "-pdf”]</span></code></pre></td></tr></table></div></figure>

<p>以下を記述．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEFAULT_COMMAND_LATEXMK = ["latexmk", "-cd",
</span><span class='line'>                    "-e", "$latex = 'uplatex %O -interaction=nonstopmode -synctex=1 %S'",
</span><span class='line'>                    "-e", "$biber = 'biber %O --bblencoding=utf8 -u -U --output_safechars %B'",
</span><span class='line'>                    "-e", "$bibtex = 'upbibtex %O %B'",
</span><span class='line'>                    "-e", "$makeindex = 'makeindex %O -o %D %S'",
</span><span class='line'>                    "-e", "$dvipdf = 'dvipdfmx %O -o %D %S'",
</span><span class='line'>                    "-f", "-norc", "-gg", "-pdfdvi"]</span></code></pre></td></tr></table></div></figure>

<p>エラーが出る場合がある．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LaTeXTools: you need to migrate your preferences. See the README file for instructions.</span></code></pre></td></tr></table></div></figure>

<p>その場合は<a href="http://yusuke0.hatenablog.com/entry/2014/04/06/111945">ここ</a>を参考に直す．</p>

<p>これで，コンパイルしたい場合は.texファイルを開き<code>⌘B</code>押下でOK．ちなみに，upTeXを利用しているっぽい．</p>

<p><a href="http://yusuke0.hatenablog.com/entry/2014/04/06/111945">【2014-3-12以降版】Mac Sublime Text2 or Sublime Text3 で Tex 導入の初歩から - みずぎわブログ</a></p>

<h1>4. TeXの文法</h1>

<h2>4.1 文書クラス</h2>

<p>文書クラスとは，文書の大体の形を決めるもの．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="na">[option]</span><span class="nb">{</span>documentclass<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">\documentclass</span><span class="na">[10pt,a4paper]</span><span class="nb">{</span>jarticle<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li>article，jarticle，ujarticle

<ul>
<li>章を含まないような小さめの文書</li>
</ul></li>
<li>report，jreport，ujreport

<ul>
<li>章を含むような小さめの文書</li>
</ul></li>
<li>book，jbook，ujbook

<ul>
<li>帳面印刷を前提としている本の印刷用</li>
</ul></li>
</ul>

<p>各々，[j]がつくとpTeXを用いることができる．<br>
[uj]がつくとupTeXを用いることができる．<br>
upTeXは，[j]をつけてオプションに[uplatex]を指定しても使用できる．<br>
pTeXは日本語を利用できるようにしており，upTeXはそれに加えてUnicodeを用いられるようにした上位互換．</p>

<ul>
<li>オプション

<ul>
<li>a4e，a4j，a4paper

<ul>
<li>A4サイズ</li>
</ul></li>
<li>a5e，a5j，b5paper

<ul>
<li>A5サイズ</li>
</ul></li>
<li>b4j

<ul>
<li>B4サイズ</li>
</ul></li>
<li>b5j

<ul>
<li>B5サイズ</li>
</ul></li>
<li>twocolumn

<ul>
<li>二段組み</li>
</ul></li>
<li>onecolumen

<ul>
<li>一段組み</li>
</ul></li>
<li>twoside

<ul>
<li>両面印刷</li>
</ul></li>
</ul></li>
</ul>

<p>a4paper，b5paperはLaTeX2eからできた新しいサイズ．語尾がeのものは欧米版，jのものはpTeX．<br>
paperは上下左右の余白が広いので，本文領域を広くしたいのであれば，a4jやb5jを用いると良い．</p>

<p><a href="http://qiita.com/SUZUKI_Masaya/items/e1ae2eb42626dc6d9155">pLaTeXからupLaTeXへの乗り換え方</a><br>
<a href="http://www.fugenji.org/%7Ethomas/texlive-guide/why.html">なぜ TeX Live なのか</a><br>
<a href="http://www.okomeda.net/?LaTeX%E6%96%87%E6%9B%B8%E3%82%AF%E3%83%A9%E3%82%B9">LaTeX文書クラス</a><br>
<a href="http://blogs.yahoo.co.jp/koh_hotta/48345.html">a4paper と a4j および b5paper と b5j</a><br>
<a href="http://www.wakayama-u.ac.jp/%7Etokoi/lecture/shori1/latex.html">LaTeX の概要</a></p>

<h2>4.2 見出し</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="na">[a4j,onecolumn]</span><span class="nb">{</span>jreport<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'>  <span class="k">\part</span><span class="nb">{</span>部見出し<span class="nb">}</span>
</span><span class='line'>      <span class="k">\chapter</span><span class="nb">{</span>章見出し<span class="nb">}</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>4.3 参考文献 \cite, \bibitem</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="c">% 本文</span>
</span><span class='line'>SysML<span class="k">\cite</span><span class="nb">{</span>sysml<span class="nb">}</span>のダイアグラムのひとつであるパラメトリック図では，~
</span><span class='line'>~ 制約を抽出しSMTソルバであるYices<span class="k">\cite</span><span class="nb">{</span>yices<span class="nb">}</span><span class="k">\cite</span><span class="nb">{</span>yices<span class="nb">_</span>tool<span class="nb">_</span>paper<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">% 参考文献</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>thebibliography<span class="nb">}{</span>10<span class="nb">}</span>
</span><span class='line'><span class="k">\bibitem</span><span class="nb">{</span>sysml<span class="nb">}</span>
</span><span class='line'>Object Management Group, OMG Systems Modeling Language (SysML),<span class="k">\\</span>
</span><span class='line'>http://www.omgsysml.org/
</span><span class='line'>
</span><span class='line'><span class="k">\bibitem</span><span class="nb">{</span>yices<span class="nb">}</span>
</span><span class='line'>Yices: An SMT Solver,<span class="k">\\</span>http://yices.csl.sri.com/
</span><span class='line'>
</span><span class='line'><span class="k">\bibitem</span><span class="nb">{</span>yices<span class="nb">_</span>tool<span class="nb">_</span>paper<span class="nb">}</span>
</span><span class='line'>B. Dutertre and L. de Moura : The YICES SMT Solver, 2009.
</span><span class='line'><span class="k">\\</span>http://yices.csl.sri.com/ から入手可能
</span></code></pre></td></tr></table></div></figure>

<h2>4.4 画像の貼り付け</h2>

<p>TeXに画像を貼り付ける場合，画像の<strong>BB(BoundingBox)情報</strong>を指定する必要がある．単位は bp(big point) もしくは Postscript point という．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">1bp</span> <span class="o">=</span> 1/72inchi <span class="o">=</span> 0.535278mm <span class="o">=</span> 1.00375pt
</span></code></pre></td></tr></table></div></figure>

<p>BB情報を自動生成し，ファイルに書き出すことができる．用いるコマンドは<code>extractbb</code>．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>extractbb hoge.jpg
</span></code></pre></td></tr></table></div></figure>

<p>これによりBB情報が記述されたファイル(.xbb)が生成される．</p>

<p>いちいちターミナルから生成するのが面倒な場合，TeX Live を用いているのなら，extractbb を自動的に起動し，.xbbファイルを自動生成させることができる．<code>/usr/local/texlive/texmf-local/web2c/texmf.cnf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">shell_escape_commands</span> <span class="o">=</span> <span class="se">\</span>
</span><span class='line'>bibtex,bibtex8,bibtexu,pbibtex,upbibtex,biber,<span class="se">\</span>
</span><span class='line'>kpsewhich,<span class="se">\</span>
</span><span class='line'>makeindex,mendex,texindy,<span class="se">\</span>
</span><span class='line'>mpost,pmpost,upmpost,<span class="se">\</span>
</span><span class='line'>repstopdf,epspdf,extractbb,<span class="se">\</span>
</span></code></pre></td></tr></table></div></figure>

<p>以下のコマンドでデータベースを更新し，設定を反映させる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo mktexlsr
</span></code></pre></td></tr></table></div></figure>

<p>以下のようなエラーが出た場合は，改行を加えることで回避する(これが正しい対処かどうかはわからない)．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>warning: kpathsea: Last line of file ends with <span class="se">\.</span>
</span></code></pre></td></tr></table></div></figure>

<p>これで画像フォルダもスッキリする．すばらC．</p>

<h2>4.5 ソースコードの記述</h2>

<p>参考サイトみよう．<br>
<a href="http://www.shaco-o.com/tex-program">Latexにプログラムっぽいフォントでソースコードを載せる簡単な方法</a></p>

<h3>小話：画像貼り付けに関して，変わったこと</h3>

<p>TeX Live 2013より，<code>dvipdfm</code>が使用できなくなった．以前は以下のように記述していたが&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="na">[a4j]</span><span class="nb">{</span>jarticle<span class="nb">}</span>
</span><span class='line'><span class="k">\usepackage</span><span class="na">[dvipdfm]</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これからは<code>dvipdfmx</code>を使う必要があるため，以下のようにする必要がある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="na">[a4j]</span><span class="nb">{</span>jarticle<span class="nb">}</span>
</span><span class='line'><span class="k">\usepackage</span><span class="na">[dvipdfmx]</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これに伴い，.bbファイルではなく，.xbbファイルをが必要となった．ちょっと調べて<code>ebb</code>コマンド(.bbファイルを生成する)を用いて画像を扱っていたらコンパイルがうまくいかなかったので，道理で..．</p>

<p><a href="http://oku.edu.mie-u.ac.jp/%7Eokumura/texwiki/?Mac#h357d047">texmf.cnf への extractbb などの追加 †</a><br>
<a href="http://www.ic.daito.ac.jp/%7Emizutani/tex/image.html">画像ファイルの取り扱い</a><br>
<a href="http://www.moxbit.com/2014/03/mac-tex-st2-latex-2014.html">【2014年版】『MacTex 2013』と『Sublime Text 2』でpLaTeX環境をつくる</a></p>

<h2>4.6 TeXのパッケージ</h2>

<p>パッケージの実態はテキストファイルで，コマンドの定義が記述されている．拡張子は基本的には&quot;.sty&quot;．<br>
パッケージファイルの場所は，LaTeXシステム一式をインストールした場合は&#8230;<br>
TeXLiveの場合<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
</pre></td><td class='code'><pre><code class='tex'><span class='line'>/usr/local/texlive/2014/texmf-dist/tex/latex/tools<br>
</span></code></pre></td></tr></table></div></figure></p>

<p>W32TeXの場合は知らない．Windowsでは以下らしい．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
</pre></td><td class='code'><pre><code class='tex'><span class='line'>c:/w32tex/share/texmf-dist/tex/latex/tools/multicol.sty<br>
</span></code></pre></td></tr></table></div></figure></p>

<h2>おまけ：古いコマンド</h2>

<p>古いコマンドを使わないほうがいいらしい．以下を用いて発見しよう．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\RequirePackage</span><span class="na">[l2tabu, orthodox]</span><span class="nb">{</span>nag<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="http://oku.edu.mie-u.ac.jp/%7Eokumura/texwiki/?TeX%E5%85%A5%E9%96%80%2F%E5%90%84%E7%A8%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E5%88%A9%E7%94%A8">TeX Wiki TeX入門/各種パッケージの利用</a><br>
<a href="http://www.latex-cmd.com">LaTeXコマンド集</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack Bot を作成した]]></title>
    <link href="http://tasuwo.github.io/blog/2016/05/09/slack-hubot/"/>
    <updated>2016-05-09T21:19:47+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/05/09/slack-hubot</id>
    <content type="html"><![CDATA[<p>Slack の bot を作った．<br>
何を参考にしたのか聞かれたのでメモしておく．</p>

<!-- more -->

<p>研究室のゴミ当番表がアナログだったので，去年から導入した Slack を通して自動的に担当を割り振り&amp;通知する bot を作った．<br>
成果物は↓</p>

<p><a href="https://github.com/tasuwo/GomiManBot">tasuwo/GomiManBot: GomiMan slack bot written in coffee script with hubot.</a></p>

<p>これから実際に使ってみてバグが見つかり次第修正していく予定．<br>
英語力がゴミなのでおかしいところ発見次第修正していく予定．</p>

<h2>メモ書き</h2>

<p>hubot + slack bot + heroku に関するサイト量は飽和状態であまり書く気しなかったのだけど，中には「エラーは持ち前のスルースキルで無視します！」みたいな記事もあってげんなりしたので，何を参考にしたのかだけも一応書いておく．<br>
導入については以下の記事を参考にした．</p>

<p><a href="http://qiita.com/misopeso/items/1f418dd02e89234499b3">Slack で Hubot を使えるようにする - Qiita</a><br>
<a href="http://qiita.com/tk3fftk/items/6ae172abc57f72eabeb2">Slackと連携させたHubotに毎朝今日の予定をお知らせしてもらう - Qiita</a></p>

<p>公式ドキュメントは以下．世に出回ってる hubot の記事は大抵古くて今では不要な手順が含まれていたりするからこちらを参考にするのが確実．</p>

<p><a href="https://hubot.github.com/docs/">HUBOT</a></p>

<p>また，無料版の heroku だと 1日6時間の間sleepさせる必要があるので，うまくやる．<br>
起き続けさせるためには hubot-heroku-keepalive，寝たのを起こすためには何らかのアドオンを使用する．</p>

<p><a href="https://iimuz.github.io/2015/11/11/hubotKeepalive.html">雑記帳@iimuz by iimuz</a><br>
<a href="http://qiita.com/misopeso/items/8cde2ecbb82e7bfc01b4">Heroku 上で動く Hubot をうまく休ませる - Qiita</a></p>

<p>アドオンは shceduler を使用した．</p>

<h2>Hubot とは</h2>

<p>Hubot は Github 社が製作した bot 作成用のフレームワーク．<br>
Node.js + CoffeeScript で書かれており，オープンソースである．<br>
アダプターによって異なるチャット(Slack とか Chatworks とか)に対応できる．</p>

<p><a href="https://hubot.github.com/">HUBOT</a></p>

<h2>Heroku とは</h2>

<p>AWS という IaaS 上に構築された PaaS．以下用語説明．</p>

<ul>
<li>IaaS : Infrastructure as a Service

<ul>
<li>情報システムの稼働に必要な仮想サーバとしたシュシュのインフラをインターネット上のサービスとして提供する</li>
<li>Google Compute Engine, Amazon Elastic Compute Cloud(EC2)</li>
</ul></li>
<li>PaaS : Platform as a Service

<ul>
<li>アプリケーションの稼働に必要なハードウェアやOS等のプラットフォーム一式をインターネット上のサービスとして提供する</li>
<li>例 : Google App Engine, Windows Azure</li>
</ul></li>
<li>SaaS : Software as a Service

<ul>
<li>パッケージ製品として提供されていたソフトウェアを，インターネット経由でサービスとして提供する</li>
<li>例 : Google Apps, Salesforce</li>
</ul></li>
</ul>

<p>Heroku は Web アプリを作成した時に，Git を使用して簡単に公開できる．<br>
最初は Ruby のみだったが今では対応言語も多い．<br>
ビルドパックを使用することで未対応の言語についてもデプロイが可能．</p>

<p><a href="https://dashboard.heroku.com/">Heroku</a></p>

<p>以上です．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonでHTMLのテーブル情報を取得する]]></title>
    <link href="http://tasuwo.github.io/blog/2016/04/17/python-crowling/"/>
    <updated>2016-04-17T10:37:30+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/04/17/python-crowling</id>
    <content type="html"><![CDATA[<p>研究室内で今までHTMLのテーブルでデータを管理していたものを，ちゃんとDBつくって管理したくなったので，Pythonを使ってcrawlingしてみようという試み．</p>

<p><strong><em>!!注意!! : 筆者はPython初心者です．コードの表現等は適切でない場合があります&#8230;おかしな部分がありましたらぜひコメントで指摘をお願いします&#8230;</em></strong></p>

<!-- more -->

<h2>やりたいことと問題点</h2>

<p>以下のようなテーブルが存在した時，その内容を抽出してDBに格納したい．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">width=</span><span class="s">&quot;95%&quot;</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span> <span class="na">cellspacing=</span><span class="s">&quot;0&quot;</span> <span class="na">cellpadding=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span> <span class="na">bgcolor=</span><span class="s">&quot;yellow&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">width=</span><span class="s">&quot;80&quot;</span><span class="nt">&gt;</span>日付<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">width=</span><span class="s">&quot;80&quot;</span><span class="nt">&gt;</span>記録<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">width=</span><span class="s">&quot;80&quot;</span><span class="nt">&gt;</span>担当<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>題目<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">rowspan=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>2XX5/12/24<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">rowspan=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>記録者名1<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">nowrap</span><span class="nt">&gt;</span>担当者名1<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>論文情報1<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>担当者名2<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>論文情報2<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">rowspan=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>2XX5/12/25<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">rowspan=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>記録者名2<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">nowrap</span><span class="nt">&gt;</span>担当者名3<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>論文情報3<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>担当者名4<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>論文情報4<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>上記のHTML記述は以下のように描画される．</p>

<table>
  <tr align="center" bgcolor="yellow">
    <td width="80">日付</td>
    <td width="80">記録</td>
    <td width="80">担当</td>
    <td>題目</td>
  </tr>
  <tr align="center">
    <td rowspan="2">2XX5/12/24</td>
    <td rowspan="2">記録者名</td>
    <td nowrap>担当者名1</td>
    <td align="left">論文情報1</td>
  </tr>
  <tr align="center">
    <td>担当者名2</td>
    <td align="left">論文情報2</td>
  </tr>
  <tr align="center">
    <td rowspan="2">2XX5/12/25</td>
    <td rowspan="2">記録者名2</td>
    <td nowrap>担当者名3</td>
    <td align="left">論文情報3</td>
  </tr>
  <tr align="center">
    <td>担当者名4</td>
    <td align="left">論文情報4</td>
  </tr>
</table>

<p>問題は，<strong><code>rowspan</code>オプションを使用しているため，日付&amp;記録とtrタグが1:1になっていない</strong>という部分．調べてみると，<a href="http://stackoverflow.com/questions/28763891/what-should-i-do-when-tr-has-rowspan">各trタグがもつtdタグと，rowspanオプションを持つtdタグをあらかじめ保存しておき，後者の情報から前者を更新する方法</a>があるらしい．しかし，<strong>今回はとりあえず論文情報だけ取得できればよかったので，<code>align</code>オプションを持つtdタグのみを抽出する．</strong></p>

<p>また，論文情報は以下の形式をとる．ここから各種情報を抽出してDBに格納したい．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>著者名(所属), ... : 原文題目[翻訳題目], 論文誌名, Vol.番号, No.番号, pp.開始頁-終了頁 (発行年/月)
</span></code></pre></td></tr></table></div></figure>

<p>ここでの問題は，<strong><code>,</code>や<code>:</code>が全角の場合と半角の場合が入り混じっている(!?)</strong>という部分(各論文情報間だけでなく，なんと一つの論文情報内に全角/半角が混ざっている場合もある&#8230;)．みんなが適当に更新したから仕方ないね&#8230;さらに，論文誌名やVol.，No.等はあったりなかったりするので，<strong>今回はとりあえず著者名と題目のみ取得する．</strong></p>

<h2>やるべきこと</h2>

<p>手順としては以下のようになる．対象ページはBasic認証が必要なので対応する．</p>

<ul>
<li>Basic認証して対象ページのHTMLを取得する</li>
<li>HTMLにおけるテーブルから特定のオプションが負荷されたtdタグを抽出する</li>
<li>得られた論文情報から著者名と題目の情報を抽出する</li>
</ul>

<h2>実装する</h2>

<h3>HTMLの取得</h3>

<p>ライブラリは簡単そうだったので<code>requests</code>を使用した．Basic認証を行うためには引数で<code>auth</code>を指定する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">URL</span> <span class="o">=</span> <span class="s">&#39;http://...&#39;</span>
</span><span class='line'>  <span class="n">USER_NAME</span> <span class="o">=</span> <span class="s">&quot;your_user_name&quot;</span>
</span><span class='line'>  <span class="n">PASS_WORD</span> <span class="o">=</span> <span class="s">&quot;your_pass_word&quot;</span>
</span><span class='line'>  <span class="n">PAGES_DATA</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="n">USER_NAME</span><span class="p">,</span> <span class="n">PASS_WORD</span><span class="p">))</span>
</span><span class='line'>  <span class="n">CORRECT_ENCODING</span> <span class="o">=</span> <span class="n">PAGES_DATA</span><span class="o">.</span><span class="n">apparent_encoding</span>
</span><span class='line'>  <span class="n">PAGES_DATA</span><span class="o">.</span><span class="n">encoding</span> <span class="o">=</span> <span class="n">CORRECT_ENCODING</span>
</span><span class='line'>  <span class="n">HTML</span> <span class="o">=</span> <span class="n">PAGES_DATA</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">CORRECT_ENCODING</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">HTML</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>apparent_encoding</code>を取得したデータのencodingに設定し直しているのは，<code>requests</code>が正しくエンコード情報を取得してくれない場合があるかららしい．さらに，データに含まれるテキストを正しくエンコードすると，日本語を文字化けさせずにデータを取得できた．</p>

<blockquote>
<p><a href="http://blog.aoshiman.org/entry/118/">[Python]requestsが正しくエンコード情報を返してくれない場合は apparent_encoding を使うとよいかもしれない | aoshiman.org</a></p>
</blockquote>

<h3>HTMLのパース</h3>

<p>ライブラリは<code>BeautifulSoup</code>を使用した．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span><span class='line'>
</span><span class='line'><span class="n">SOUP</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">HTML</span><span class="p">,</span> <span class="s">&quot;lxml&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">TABLES</span> <span class="o">=</span> <span class="n">SOUP</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;table&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">table</span> <span class="ow">in</span> <span class="n">TABLES</span><span class="p">:</span>
</span><span class='line'>  <span class="n">tmp</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;tr&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ALL_ROWS</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">tr_tag</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">ALL_ROWS</span><span class="p">):</span>
</span><span class='line'>      <span class="n">scholar_strings</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">tr_tag</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;td&#39;</span><span class="p">)):</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">has_attr</span><span class="p">(</span><span class="s">&quot;align&quot;</span><span class="p">):</span>
</span><span class='line'>              <span class="n">scholar_strings</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get_text</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>

<p>基本的には，<code>find_all</code>でタグを検索し，<code>has_attr</code>で指定オプションを持つかどうかを判定する，という流れ．これで論文情報の文字列群は取得できる．</p>

<h3>文字列の分割</h3>

<p>論文情報は<code>執筆者名:論文情報</code>の形式で区切られており，さらに論文情報は<code>論文題目,その他の情報,...</code>のような形式で区切られている．さらに，<code>:</code>及び<code>,</code>は半角と全角が混在している．また，論文題目に<code>:</code>が含まれる場合も存在するし，論文題目以外の論文情報には抜けや漏れが存在する可能性がある．<br>
そこで，以下のように分割処理を行う．</p>

<ol>
<li>一番左端の<code>:</code>(半角/全角)で分割し，執筆者情報と論文情報に分割する</li>
<li>執筆者情報を<code>,</code>(半角/全角)で分割し，各執筆者の除法を取得する</li>
<li>論文情報を<code>,</code>(半角/全角)で分割し，論文題目のみ取得する</li>
</ol>

<p>文字列を複数のデリミタで区切る，もしくは指定回数のみ分割するには，<code>re</code>モジュールを使用して以下のようにする．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;delimter1|delimiter2|...&quot;</span><span class="p">,</span> <span class="s">&quot;分割対象の文字列&quot;</span><span class="p">,</span> <span class="err">分割回数</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>デリミタ群をリストで渡したかったので，以下のような関数を作成した．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">split_by_delimiters</span><span class="p">(</span><span class="n">delimiter_list</span><span class="p">,</span> <span class="n">target_string</span><span class="p">,</span> <span class="n">split_num</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">u&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd"> Return a list of the words, using words in delimiter_list as</span>
</span><span class='line'><span class="sd"> the delimiter strings</span>
</span><span class='line'><span class="sd"> &quot;&quot;&quot;</span>
</span><span class='line'>  <span class="c"># Prepare delimiter string</span>
</span><span class='line'>  <span class="n">delimiter_str</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="n">delimiter_list</span><span class="p">:</span>
</span><span class='line'>      <span class="n">delimiter_str</span> <span class="o">=</span> <span class="n">delimiter_str</span> <span class="o">+</span> <span class="n">pattern</span> <span class="o">+</span> <span class="s">&#39;|&#39;</span>
</span><span class='line'>  <span class="n">delimiter_str</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;|&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Split target_string</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">split_num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="n">splited_str_list</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delimiter_str</span><span class="p">,</span> <span class="n">target_string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">splited_str_list</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delimiter_str</span><span class="p">,</span> <span class="n">target_string</span><span class="p">,</span> <span class="n">split_num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">splited_str_list</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">splited_str_list</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">target_string</span>
</span></code></pre></td></tr></table></div></figure>

<p>これを使用して，論文情報の文字列から著者情報と題目情報を抽出する関数を作った．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">COLON_DLIMITERS</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;</span><span class="se">\xef\xbc\x9a</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">COMMA_DELIMITERS</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;</span><span class="se">\xef\xbc\x8c</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;,&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_scholar_json_model</span><span class="p">(</span><span class="n">scholr_info_str</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">u&quot;&quot;&quot;Return json model for scholar information&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">scholr_info_str</span> <span class="o">=</span> <span class="n">scholr_info_str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">scholr_info_str</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="c"># Split the string into authors and other informations</span>
</span><span class='line'>  <span class="n">author_others_info</span> <span class="o">=</span> <span class="n">split_by_delimiters</span><span class="p">(</span><span class="n">COLON_DLIMITERS</span><span class="p">,</span> <span class="n">scholr_info_str</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">author_others_info</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="c"># Split the string into scholar&#39;s title and other informations</span>
</span><span class='line'>  <span class="n">title_others_info</span> <span class="o">=</span> <span class="n">split_by_delimiters</span><span class="p">(</span><span class="n">COMMA_DELIMITERS</span><span class="p">,</span> <span class="n">author_others_info</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="c"># Create JSON model</span>
</span><span class='line'>  <span class="n">authors</span> <span class="o">=</span> <span class="n">split_by_delimiters</span><span class="p">(</span><span class="n">COMMA_DELIMITERS</span><span class="p">,</span> <span class="n">author_others_info</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="n">authors_model</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">author</span> <span class="ow">in</span> <span class="n">authors</span><span class="p">:</span>
</span><span class='line'>      <span class="n">authors_model</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="n">author</span><span class="o">.</span><span class="n">strip</span><span class="p">()})</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="n">title_others_info</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">scholar_model</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;authors&quot;</span><span class="p">:</span> <span class="n">authors_model</span><span class="p">,</span> <span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="n">title</span><span class="o">.</span><span class="n">strip</span><span class="p">()}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">scholar_model</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>scholar_info_str</code>が15より小さいか比較している部分は，nbspとか[未登録]みたいな文字列を取得してしまった際に無視するため(よくない)．</p>

<p>最終的なコードは以下．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">AuthInfo</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s">&#39;AuthInfo&#39;</span><span class="p">,</span> <span class="s">&#39;user_name, pass_word&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_html_from</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">auth_info</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">u&quot;&quot;&quot;Get html in url&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">user_name</span> <span class="o">=</span> <span class="n">auth_info</span><span class="o">.</span><span class="n">user_name</span>
</span><span class='line'>  <span class="n">pass_word</span> <span class="o">=</span> <span class="n">auth_info</span><span class="o">.</span><span class="n">pass_word</span>
</span><span class='line'>  <span class="n">pages_data</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="n">user_name</span><span class="p">,</span> <span class="n">pass_word</span><span class="p">))</span>
</span><span class='line'>  <span class="n">pages_data</span><span class="o">.</span><span class="n">encoding</span> <span class="o">=</span> <span class="n">pages_data</span><span class="o">.</span><span class="n">apparent_encoding</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pages_data</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">COLON_DLIMITERS</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;</span><span class="se">\xef\xbc\x9a</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">COMMA_DELIMITERS</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;</span><span class="se">\xef\xbc\x8c</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;,&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_scholar_json_model</span><span class="p">(</span><span class="n">scholar_info_str</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">u&quot;&quot;&quot;Return json model for scholar information&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">scholar_info_str</span> <span class="o">=</span> <span class="n">scholar_info_str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">scholar_info_str</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="c"># Split the string into authors and other informations</span>
</span><span class='line'>  <span class="n">author_others_info</span> <span class="o">=</span> <span class="n">split_by_delimiters</span><span class="p">(</span><span class="n">COLON_DLIMITERS</span><span class="p">,</span> <span class="n">scholar_info_str</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">author_others_info</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="c"># Split the string into scholar&#39;s title and other informations</span>
</span><span class='line'>  <span class="n">title_others_info</span> <span class="o">=</span> <span class="n">split_by_delimiters</span><span class="p">(</span><span class="n">COMMA_DELIMITERS</span><span class="p">,</span> <span class="n">author_others_info</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="c"># Create JSON model</span>
</span><span class='line'>  <span class="n">authors</span> <span class="o">=</span> <span class="n">split_by_delimiters</span><span class="p">(</span><span class="n">COMMA_DELIMITERS</span><span class="p">,</span> <span class="n">author_others_info</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="n">authors_model</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">author</span> <span class="ow">in</span> <span class="n">authors</span><span class="p">:</span>
</span><span class='line'>      <span class="n">authors_model</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="n">author</span><span class="o">.</span><span class="n">strip</span><span class="p">()})</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="n">title_others_info</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">scholar_model</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;authors&quot;</span><span class="p">:</span> <span class="n">authors_model</span><span class="p">,</span> <span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="n">title</span><span class="o">.</span><span class="n">strip</span><span class="p">()}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">scholar_model</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">split_by_delimiters</span><span class="p">(</span><span class="n">delimiter_list</span><span class="p">,</span> <span class="n">target_string</span><span class="p">,</span> <span class="n">split_num</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">u&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd"> Return a list of the words, using words in delimiter_list as</span>
</span><span class='line'><span class="sd"> the delimiter strings</span>
</span><span class='line'><span class="sd"> &quot;&quot;&quot;</span>
</span><span class='line'>  <span class="c"># Prepare delimiter string</span>
</span><span class='line'>  <span class="n">delimiter_str</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="n">delimiter_list</span><span class="p">:</span>
</span><span class='line'>      <span class="n">delimiter_str</span> <span class="o">=</span> <span class="n">delimiter_str</span> <span class="o">+</span> <span class="n">pattern</span> <span class="o">+</span> <span class="s">&#39;|&#39;</span>
</span><span class='line'>  <span class="n">delimiter_str</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;|&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Split target_string</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">split_num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="n">splited_str_list</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delimiter_str</span><span class="p">,</span> <span class="n">target_string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">splited_str_list</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delimiter_str</span><span class="p">,</span> <span class="n">target_string</span><span class="p">,</span> <span class="n">split_num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">splited_str_list</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">splited_str_list</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">target_string</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_scholars_json_model</span><span class="p">(</span><span class="n">html</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">u&quot;&quot;&quot;Return JSON model for scholars information&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="s">&quot;lxml&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">table</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;table&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">tr_tag</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">table</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;tr&#39;</span><span class="p">)):</span>
</span><span class='line'>      <span class="n">scholar_strings</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">tr_tag</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;td&#39;</span><span class="p">)):</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">has_attr</span><span class="p">(</span><span class="s">&quot;align&quot;</span><span class="p">):</span>
</span><span class='line'>              <span class="n">scholar_strings</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get_text</span><span class="p">())</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">scholar_string</span> <span class="ow">in</span> <span class="n">scholar_strings</span><span class="p">:</span>
</span><span class='line'>          <span class="n">info</span> <span class="o">=</span> <span class="n">get_scholar_json_model</span><span class="p">(</span><span class="n">scholar_string</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">info</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>              <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">results</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">URL</span> <span class="o">=</span> <span class="s">&#39;http://...&#39;&#39;</span>
</span><span class='line'>  <span class="n">AUTH_INFO</span> <span class="o">=</span> <span class="n">AuthInfo</span><span class="p">(</span><span class="n">user_name</span><span class="o">=</span><span class="s">&#39;your user name&#39;</span><span class="p">,</span> <span class="n">pass_word</span><span class="o">=</span><span class="s">&#39;your password&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">HTML</span> <span class="o">=</span> <span class="n">get_html_from</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">AUTH_INFO</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">SCHOLARS</span> <span class="o">=</span> <span class="n">get_scholars_json_model</span><span class="p">(</span><span class="n">HTML</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">scholar</span> <span class="ow">in</span> <span class="n">SCHOLARS</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">scholar</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">author</span> <span class="ow">in</span> <span class="n">scholar</span><span class="p">[</span><span class="s">&quot;authors&quot;</span><span class="p">]:</span>
</span><span class='line'>          <span class="k">print</span> <span class="n">author</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>本当はDBに格納するところまでやりたかったけど，今回はここまで．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCPサーバ/クライアントを車輪の再発明する]]></title>
    <link href="http://tasuwo.github.io/blog/2016/04/02/tcp-server/"/>
    <updated>2016-04-02T12:51:38+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/04/02/tcp-server</id>
    <content type="html"><![CDATA[<p>TCP Server/Client を車輪の再発明することで，ネットワーク通信の下の方を勉強してみようという試み．ついでに用語の整理もしてみます．</p>

<!-- more -->

<h2>Stream</h2>

<p><em>stream</em> を使用しない場合のデータのよみ出しは，<code>read_block()</code> というシステムコールによって以下のように行える．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'><span class="n">read_block</span><span class="p">(</span><span class="s">&quot;hello.c&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">256</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>上記では，<code>hello.c</code> の先頭から32byte目から256bytes分読み込まれる．つまり，固定の範囲(ブロック)でデータにランダムにアクセスできる．</p>

<p>上記方法は，扱う対象がメモリやハードディスク上であれば同様の処理で十分だが，例えばキーボードからの入力等を読み込む場合には適さない．前者のようなデバイスを <strong><em>block device</em></strong> ．後者のようなデバイスを <strong><em>character device</em></strong> という．</p>

<ul>
<li><strong><em>block device</em></strong>

<ul>
<li>データにブロック単位でアクセス可能なデバイス．データのバッファリングやランダムアクセスが可能．</li>
<li>例: メモリ，ハードディスク</li>
</ul></li>
<li><strong><em>character device</em></strong>

<ul>
<li>データにbyte単位でアクセス可能なデバイス．データはバッファリングされず，ランダムアクセスもできない．</li>
<li>例: キーボード，マウス</li>
</ul></li>
</ul>

<p>2つのデバイスを同じシステムコールで扱うためには，使用するシステムコールを <em>character device</em> に合わせておけば良い．ここで使われている抽象化が <strong><em>stream</em></strong> である．</p>

<ul>
<li><strong><em>stream</em></strong>

<ul>
<li>データの供給元(ex: ハードディスク)と受け手(ex: プログラム)の間に入り，データの一時保存を行う抽象データ構造</li>
<li>1byte単位でデータを受け取り，FIFO方式で受け手に渡す</li>
</ul></li>
</ul>

<p><em>stream</em> の良いところは，<strong>供給元と受け手の転送量の違いを吸収できる</strong>部分．供給元は一度に100byteのデータを送信したいが受け手は一度に10byteしか受け取れない場合， <em>stream</em> は余った90byteを一時的に保存できる．</p>

<p><em>stream</em> を使用したデータのよみ出しは以下のように行える．open システムコールによって OS によみ出し開始を通知し，同時に <em>stream</em> の識別子である file descriptor を得る．それ以降は file descriptor を使用して read，write システムコールによって読み書きを行い，close によって終了する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">char</span> <span class="n">buffer0</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">buffer1</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.c&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">,</span> <span class="mh">0x666</span><span class="p">);</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer0</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer1</span><span class="p">,</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'><span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Socket</h2>

<p>TCP/IPによるネットワーク通信も，結局はデータのやりとりなので， <em>stream</em> の概念を流用できるとわかりやすい．しかしそのまま適用はできなかったので，特別な <em>stream</em> として <strong><em>socket</em></strong> を定義した．socket は通常の <em>stream</em> と異なり，作成時には open ではなく socket システムコールを使用する．また，作成時の処理が多少複雑になっている．</p>

<h2>TCP socket</h2>

<p>TCPによる通信では以下の約束事がある．</p>

<ul>
<li>メッセージが届いたかチェックし，届いてなければ再送する</li>
<li>到着順序は保障されている</li>
<li>それが失敗した場合はエラーになることが保障されている</li>
</ul>

<p>TCP通信用の socket の作成方法は以下の通り．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">socket_df</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>第一引数は<strong>アドレスファミリ</strong>を表している．アドレスファミリとは，socket が使用するアドレス体系のこと．よく使用されるのは以下．</p>

<table><thead>
<tr>
<th>アドレスファミリ</th>
<th>内容</th>
</tr>
</thead><tbody>
<tr>
<td>AF_INET</td>
<td>IPv4用</td>
</tr>
<tr>
<td>AF_INET6</td>
<td>IPv6用</td>
</tr>
<tr>
<td>AF_UNIX</td>
<td>ローカルなプロセス間通信用</td>
</tr>
<tr>
<td>AF_PACKET</td>
<td>デバイスレベルのパケットインタフェース</td>
</tr>
</tbody></table>

<p>第二引数は<strong>ソケットタイプ</strong>を表している．ソケットタイプはソケットの性質を表しており，Linuxで使用可能な代表的なものは以下．</p>

<table><thead>
<tr>
<th>ソケットタイプ</th>
<th>解説</th>
</tr>
</thead><tbody>
<tr>
<td>SOCK_STREAM</td>
<td>順序性，信頼性を備え双方向接続された byte stream を提供する</td>
</tr>
<tr>
<td>SOCK_DGRAM</td>
<td>データグラム(接続，信頼性なし，固定最大長メッセージ)をサポートする</td>
</tr>
</tbody></table>

<p>第三引数は使用するプロトコルを表す．0にしておくとデフォルトのものが使用される．基本的には上記二つの組み合わせによって通信方式が決定される．例えば，以下のように．</p>

<table><thead>
<tr>
<th>アドレスファミリ</th>
<th>ソケットタイプ</th>
<th>通信方式</th>
</tr>
</thead><tbody>
<tr>
<td>AF_INET</td>
<td>SOCK_STREAM</td>
<td>IPv4 + TCP</td>
</tr>
<tr>
<td>AF_INET6</td>
<td>SOCK_DGRAM</td>
<td>IPv6 + UDP</td>
</tr>
</tbody></table>

<h2>通信手順</h2>

<p>クライアントとサーバがそれぞれ以下の手順でシステムコールを呼び出し，通信する．クライアントサーバモデルは，同期方法が非対称的であり，サーバ側とクライアント側でプログラムが異なる．これは電話の呼び出し方式と似ている．</p>

<table><thead>
<tr>
<th>No</th>
<th>Client</th>
<th>Server</th>
</tr>
</thead><tbody>
<tr>
<td>1</td>
<td>socket(ソケット生成)</td>
<td>socket(ソケット生成)</td>
</tr>
<tr>
<td>2</td>
<td></td>
<td>bind(ポート指定)</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>listen(待ち受け)</td>
</tr>
<tr>
<td>4</td>
<td></td>
<td>accept(接続待ち)</td>
</tr>
<tr>
<td>5</td>
<td>connect(ソケット接続要求)</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>send(送信)</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td></td>
<td>recv(受信)</td>
</tr>
<tr>
<td>8</td>
<td></td>
<td>send(送信)</td>
</tr>
<tr>
<td>9</td>
<td>recv(受信)</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>shutdown(切断)</td>
<td>shutdown(切断)</td>
</tr>
<tr>
<td>11</td>
<td>close(ソケット切断)</td>
<td>close(ソケット切断)</td>
</tr>
</tbody></table>

<p>Client 側は socket 作成後，connect で同期を行う．この時，通信相手のサーバを引数(host名，port番号)で指定する．</p>

<p>Server 側は socket 作成後が多少複雑．socket は作成時点ではアドレスが割り当てられていないので，bindによってアドレスを割りあてる．この操作は伝統的に「ソケットに名前をつける」と呼ばれる．</p>

<p>ここでいうアドレスは，接続に必要なネットワーク層レベルの情報を保持する構造体として定義されている．保持する情報と定義は以下の通り．</p>

<ul>
<li>通信プロトコル</li>
<li>アドレス</li>
<li>ポート番号</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">sa_family_t</span>    <span class="n">sin_family</span><span class="p">;</span> <span class="cm">/* address family: AF_INET */</span>
</span><span class='line'>   <span class="kt">u_int16_t</span>      <span class="n">sin_port</span><span class="p">;</span>   <span class="cm">/* port in network byte order */</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">in_addr</span>  <span class="n">sin_addr</span><span class="p">;</span>  <span class="cm">/* internet address */</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Internet address. */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">in_addr</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">u_int32_t</span>      <span class="n">s_addr</span><span class="p">;</span>     <span class="cm">/* address in network byte order */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>bind 後，socket を passive socket(接続待ちソケット)，すなわちサーバ側の socket であることをOSに通知する．ここでいう passive socket とは，accept による接続要求を受け付けるのに使用するソケットのこと．accept では passive socket から接続要求を取り出し，それを元に接続済みソケットを作成し，その socket を参照する新しい file descriptor を返す．</p>

<p>なぜわざわざ passive socket を用意しているのかというと，通常サーバに対してクライアントは複数存在し，その要求をさばくためには接続要求をためておく stream が必要であるため．</p>

<p>通信終了時には close 処理を行うが，多少注意が必要．sockt は送信データが正しく受信したことを確認しないと破棄されないので，close しても即座に破棄はされない．一般には，サーバよりも先にクライアントを close すればよい．サーバ側から強制的に close したい時には，close の直前に以下を呼べば良い．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>もしくは bind の前に以下を設定する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">setsockopt</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>setsockopt</code> は，与えられた socket のオプションを設定するもので，以下のように定義されている．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">setsockopt</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span><span class="p">,</span> <span class="kt">int</span> <span class="n">optname</span><span class="p">,</span>
</span><span class='line'>               <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">optval</span><span class="p">,</span> <span class="kt">socklen_t</span> <span class="n">optlen</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>よく使われるオプションは <code>SO_REUSEADDR</code> であり，これを設定することで再度同じポート番号で bind できる．</p>

<h2>実装</h2>

<p>ネット上のいろいろを参考に TCP サーバを C++ で書いた．C++は全然書いたことない初心者なのでひどいコードになっているかもしれない&#8230;飽くまで学習用なので，あしからず．</p>

<script src="https://gist.github.com/tasuwo/18fa141e82da1f87901419eb78353f2a.js"></script>

<p>Server，Client の順で起動し，サーバ側から文字列を送信できる．実行結果は以下のような感じ</p>

<p><img src="http://tasuwo.github.io/images/tcp_connect.png" alt="tcp"></p>

<h2>参考</h2>

<p><a href="http://www.csg.ci.i.u-tokyo.ac.jp/%7Echiba/lecture/web/web01.html">Lecture Notes</a><br>
<a href="http://bg1.hatenablog.com/entry/2015/08/19/210000">setsockopt - 車輪のx発明 ~B.G&#39;s Blog~</a><br>
<a href="http://www.amazon.co.jp/Linux%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E3%81%82%E3%81%8D%E3%81%BF%E3%81%A1/dp/4797354526">Linuxネットワークプログラミング : あきみち : 本 : Amazon.co.jp</a><br>
<a href="http://kotaroito.hatenablog.com/entry/2014/01/31/224138">socket(2), bind(2), listen(2), accept(2) - kotaroito&#39;s notes</a><br>
<a href="http://myenigma.hatenablog.com/entry/20140308/1394252286">LinuxにおけるTCPソケット通信を利用したプロセス間通信(C++) - MyEnigma</a></p>

<!-- [TCP接続する時に使ういろいろな構造体の整理 - Qiita](http://qiita.com/0xfffffff7/items/6ffb317df8345070d0b5) -->

<!-- [Structure](http://www-cms.phys.s.u-tokyo.ac.jp/~naoki/CIPINTRO/NETWORK/struct.html) -->

<!-- [7.1 デバイス・ファイルについて](https://docs.oracle.com/cd/E39368_01/e48214/ol_about_devices.html) -->

<!-- [システムコールを理解する | UNIX world](http://curtaincall.weblike.jp/portfolio-unix/api.html) -->

<!-- [知ってトクするシステムコール（2）：システムコールと標準ライブラリ関数の違いを知る (1/2) - ＠IT](http://www.atmarkit.co.jp/ait/articles/1112/13/news117.html) -->

<!-- [ソケット通信メモ(Hishidama's TCP/UDP Socket Memo)](http://www.ne.jp/asahi/hishidama/home/tech/socket/) -->

<!-- [ソケット](http://research.nii.ac.jp/~ichiro/syspro98/socket.html) -->

<!-- [3 システムコール](http://akita-nct.jp/yamamoto/lecture/2007/2E/17th/html/node3.html) -->

<!-- [Linuxシステムコールの勉強(その１６) - Webプログラミングをしてみよう!!](http://d.hatena.ne.jp/web_develop/20071205/1196875088) -->

<!-- [socket - システムコールの説明 - Linux コマンド集 一覧表](http://kazmax.zpp.jp/cmd/s/socket.2.html) -->

<!-- [socket関数とプロトコル](http://www.fireproject.jp/feature/c-language/socket/basic.html) -->

<!-- [C言語:ソケット(Socket)でネットワークプログラム入門](http://www.geocities.jp/sugachan1973/doc/funto45.html) -->

<!-- [Lecture Notes](http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/lecture/web/web03.html) -->

<!-- [絵で見てわかるファイルディスクリプタ・パイプ・リダイレクト - あしのあしあと](http://d.hatena.ne.jp/higher_tomorrow/20110426/1303830417) -->

<!-- [C++と Pthreads でミニマルなHTTPサーバを書く - bkブログ](http://0xcc.net/blog/archives/000178.html) -->

<!-- http://yuuki.hatenablog.com/entry/2015-webserver-architecture -->

<!-- http://mattn.kaoriya.net/software/lang/c/20090729235933.htm -->

<!-- http://myenigma.hatenablog.com/entry/20140308/1394252286 -->

<!-- [socket() で使用するアドレス・ファミリー・プロトコル](https://publib.boulder.ibm.com/html/as400/v4r5/ic2962/info/RZAB6ADDFAM.HTM) -->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EmacsにおけるC,C++の環境を整える]]></title>
    <link href="http://tasuwo.github.io/blog/2016/03/04/c-c-plus-plus/"/>
    <updated>2016-03-04T21:47:12+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/03/04/c-c-plus-plus</id>
    <content type="html"><![CDATA[<p>大昔に取り組んでいた自作OS、せっかくなので再挑戦してみようと考えた．CLionとかそこらへんのIDEを使用しても良かったけれど，せっかくだからEmacs で C, C++ の環境を整えるたいので，メモしとく．<br>
基本的に<a href="https://tuhdo.github.io/c-ide.html">C/C++ Development Environment for Emacs</a>に全部書いてあったのでつまんでみる．</p>

<!-- more -->

<p>helm+helm-gtags もしくは ggtags を使う．<br>
自分は helm-gtags を使うことになるだろう．</p>

<h1>1.GTAGS</h1>

<p>プロジェクトのルートディレクトリで gtags コマンドを実行すると，以下のファイル群が生成されるはず．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/project/root
</span><span class='line'><span class="nv">$ </span>gtags
</span><span class='line'><span class="nv">$ </span>ls G*
</span><span class='line'>GPATH   GRTAGS  GTAGS
</span></code></pre></td></tr></table></div></figure>

<p>それぞれ以下の情報を保持している．</p>

<ul>
<li><strong>GTAGS</strong>  : 定義</li>
<li><strong>GRTAGS</strong> : 参照</li>
<li><strong>GPATH</strong>  : パス名</li>
</ul>

<h1>2.基本操作</h1>

<p>作業を快適にするために把握しておくべきEmacsにおける基本操作は以下</p>

<table><thead>
<tr>
<th>コマンド</th>
<th>コマンド名</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>C-M-f</td>
<td>forward-sexp</td>
<td>閉じカッコの前に行く</td>
</tr>
<tr>
<td>C-M-b</td>
<td>backward-sexp</td>
<td>閉じカッコの後ろに行く</td>
</tr>
<tr>
<td>C-M-k</td>
<td>kill-sexp</td>
<td>閉じカッコ内を削除する</td>
</tr>
<tr>
<td>C-M-<SPC>,C-M-@</td>
<td>mark-sexp</td>
<td>閉じカッコ内を選択する</td>
</tr>
<tr>
<td>C-M-a</td>
<td>beginning-of-defun</td>
<td>関数の前に行く</td>
</tr>
<tr>
<td>C-M-e</td>
<td>end-of-defun</td>
<td>関数の後ろに行く</td>
</tr>
<tr>
<td>C-M-h</td>
<td>mark-defun</td>
<td>関数を選択する</td>
</tr>
</tbody></table>

<h1>3.定義参照</h1>

<h2>3.1.バッファ内参照</h2>

<h3>ggtags-mode</h3>

<p>Imenuを使用する<br>
<code>(setq-local imenu-create-index-function #&#39;ggtags-build-imenu-index)</code></p>

<h3>helm</h3>

<p>moo-jump-localを使用する</p>

<h2>3.2.プロジェクト内参照</h2>

<h3>ggtags-mode</h3>

<table><thead>
<tr>
<th>コマンド</th>
<th>コマンド名</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>M-.</td>
<td>ggtags-finde-tag-dwim</td>
<td>・定義にポイントしていれば参照先を表示する<br>・参照にポイントしてれば定義を表示する<br>・include ヘッダーをポイントしていればそのヘッダーを表示する<br>・その他の場所であれば定義，参照一覧が表示され，絞り込みができる</td>
</tr>
<tr>
<td>M-,</td>
<td>pop-tag-mark</td>
<td>ジャンプ元へ戻る</td>
</tr>
<tr>
<td>M-n, M-p</td>
<td></td>
<td>候補内移動</td>
</tr>
<tr>
<td>M-g s</td>
<td></td>
<td>候補内検索</td>
</tr>
</tbody></table>

<h3>helm-mode</h3>

<table><thead>
<tr>
<th>コマンド</th>
<th>コマンド名</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>M-.</td>
<td>helm-gtags-dwim</td>
<td>ggtags-find-tag-dwim と一緒</td>
</tr>
<tr>
<td>M-,</td>
<td>tags-loop-continue</td>
<td>pop-tag-mark と一緒</td>
</tr>
<tr>
<td>C-j</td>
<td>helm-gtags-select</td>
<td>空白部分で M-. するのと一緒．定義や山椒を一覧から絞り込み&amp;ジャンプできる</td>
</tr>
</tbody></table>

<h1>4.参照元ジャンプ</h1>

<h3>gtags-mode</h3>

<p>ggtags-find-reference, ggtags-find-tag-dwimを使う</p>

<h3>helm-gtags</h3>

<table><thead>
<tr>
<th>コマンド</th>
<th>コマンド名</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>C-c g r</td>
<td>helm-gtags-find-rtag</td>
<td>・関数内で呼び出したら，その関数についての参照先を検索する<br>・関数名上で呼び出したら，参照先のリストを表示する<br>・変数名にポイントしていたら，なにもしない</td>
</tr>
<tr>
<td>C-c g s</td>
<td>htlm-gtags-find-symbol</td>
<td>変数名ポイント時に参照元を検索する</td>
</tr>
<tr>
<td>C-c g a</td>
<td>htlm-gtags-tagas-in-this-function</td>
<td>現在の関数が参照する関数一覧</td>
</tr>
</tbody></table>

<h1>5.ファイル検索</h1>

<h3>ggtags-mode</h3>

<p>ggtags-find-file</p>

<h3>helm-gtags</h3>

<p>helm-gtags-find-files</p>

<p>正直Projectile使ったほうが良いとのこと．</p>

<h1>6.過去に訪れたタグへジャンプ</h1>

<h3>ggatgs-mode</h3>

<p>ggtags-view-tag-history(C-c g h)</p>

<h3>helm-gtags</h3>

<p>helm-gtags-show-stack</p>

<h1>7.Speedbar</h1>

<p>ソースツリーを見れるパッケージ．ただのソースツリーではなくて，戻り値や関数なども一覧できるのが便利っぽい．</p>

<table><thead>
<tr>
<th>コマンド</th>
<th>操作</th>
</tr>
</thead><tbody>
<tr>
<td>SPC</td>
<td>子ノードを開く</td>
</tr>
<tr>
<td>RET</td>
<td>ノードを別ウインドウで開く</td>
</tr>
<tr>
<td>U</td>
<td>親ノードへ移動</td>
</tr>
<tr>
<td>n,p</td>
<td>ノードを上下移動</td>
</tr>
<tr>
<td>M-n,M-p</td>
<td>現在の階層内でノードを上下移動</td>
</tr>
<tr>
<td>b</td>
<td>Speedbarのバッファリストに戻る</td>
</tr>
<tr>
<td>f</td>
<td>ファイルリストに戻る</td>
</tr>
</tbody></table>

<h2>7.1.sr-speedbar</h2>

<p>Speedbarを便利にするパッケージ．</p>

<ul>
<li>起動/終了

<ul>
<li>sr-speedbar-open, sr-speedbar-toggle : 開く</li>
<li>sr-speedbar-cloe, sr-speedbar-toggle : 閉じる</li>
</ul></li>
<li>改善点

<ul>
<li>フレームの代わりにEmacs windowを使用する</li>
<li><code>C-x 1</code>でSpeedbarを除くすべてのウインドウを削除する</li>
<li><code>C-x o</code>でSpeedbarに移動するのを防ぐ(sr-speedbar-skip-other-window-pをtにする)</li>
</ul></li>
</ul>

<h1>8.Company-mode (補完)</h1>

<p>company-mode を使う．company-mode はEmacsのための補完フレームワーク．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>require <span class="s1">&#39;company)</span><br>
</span><span class='line'><span class="s1">(add-hook &#39;</span>after-init-hook <span class="err">&#39;</span>global-company-mode<span class="o">)</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<h2>8.2.使い方</h2>

<table><thead>
<tr>
<th>コマンド</th>
<th>操作</th>
</tr>
</thead><tbody>
<tr>
<td>M-n,M-p</td>
<td>候補移動</td>
</tr>
<tr>
<td>RET,TAB</td>
<td>候補決定</td>
</tr>
<tr>
<td>C-s,C-r,C-o</td>
<td>候補検索</td>
</tr>
<tr>
<td>M-(数値)</td>
<td>候補簡易選択</td>
</tr>
<tr>
<td><f1></td>
<td>選択中候補のドキュメントを表示</td>
</tr>
<tr>
<td>C-w</td>
<td>選択中候補のソースコード表示</td>
</tr>
</tbody></table>

<p><code>company-backends</code>で候補に使用するリソースを指定する．</p>

<h2>8.3.C言語の補完</h2>

<p>C言語でcompanyの補完を利用するためには，以下を記述する．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>delete <span class="s1">&#39;company-semantic company-backends)</span><br>
</span><span class='line'><span class="s1">(define-key c-mode-map  [(tab)] &#39;</span>company-complete<span class="o">)</span><br>
</span><span class='line'><span class="o">(</span>define-key c++-mode-map  <span class="o">[(</span>tab<span class="o">)]</span> <span class="err">&#39;</span>company-complete<span class="o">)</span><br>
</span></code></pre></td></tr></table></div></figure><br>
上記の設定では，<code>company-semantic</code>を削除している．理由は後述．<code>company-semantic</code>についてはCEDITの項で詳しく説明する．</p>

<p>companyの補完として，以下の二つが働く．</p>

<h3>8.3.1.company-clang</h3>

<p>補完候補の取得のために<code>clang</code>を使用する．プロジェクトではなく，ヘッダファイルによって補完を行う．デフォルトでは<code>company-clang</code>は<code>company-semantic</code>のサブセットであるため，上記設定を行っていれば他に特別な設定はいらない．<br>
上記せて血で<code>company-semantic</code>を削除したのは，そうしないと<code>company-complete</code>が<code>company-clang</code>ではなく<code>company-semantic</code>を使用してしまうため．これは，<code>company-backends</code>内の優先度がそうなっているため生じる．<br>
補完候補をプロジェクト内から取得するためには，<code>.dir-locals.el</code>をプロジェクトルートに配置する必要がある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">((</span><span class="no">nil</span> <span class="o">.</span> <span class="p">((</span><span class="nv">company-clang-arguments</span> <span class="o">.</span> <span class="p">(</span><span class="s">&quot;-I/home/&lt;user&gt;/project_root/include1/&quot;</span>
</span><span class='line'>                                     <span class="s">&quot;-I/home/&lt;user&gt;/project_root/include2/&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>

<p>helmを使っているなら，<code>C-x C-f</code>によるファイル検索中に，対象ファイル選択状態から<code>C-c i</code>によって絶対パスを挿入できる．<br>
<code>nil</code>を指定すると設定をすべてのサブディレクトリ，ファイルに適用し，<code>non-nil</code>であれば設定を適用するメジャーモードを指定できる．<code>company-clang-arguments</code>はインクルードパスを指定するリストである．</p>

<h3>8.3.2comapny-gtags</h3>

<p><code>GNU Global</code>の<code>GTAGS</code>から補完候補を取得する．プロジェクトによる補完を行うことができる．</p>

<h2>8.4.ヘッダーの補完</h2>

<p>プロジェクト内のヘッダーを補完したいなら，<code>company-c-headers</code>を使用する．以下のように<code>company-backends</code>に追加すれば良い．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;company-backends</span> <span class="ss">&#39;company-c-headers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>C++でヘッダーの補完を行いたいならば，パスを追加する必要がある．<code>company-c-header</code>はシステムのインクルードパスとして<code>/usr/include/</code>と<code>/usr/local/include/</code>しか含んでいない．例としては以下のように追加する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;company-c-headers-path-system</span> <span class="s">&quot;/usr/include/c++/4.8/&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h1>9.CEDET</h1>

<p>CEDETはCollection of Emacs Development Environment Toolsの略称．CEDETのデメリットは，Emacs Lispで書かれているため，Emacsのパフォーマンスに影響すること．23.2以降のEmacsにはマージされているので，インストールの必要はない．<br>
最新版は以下のようにダウンロードすれば良い．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
<span class='line-number'>4</span><br>
<span class='line-number'>5</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone <a href="http://git.code.sf.net/p/cedet/git">http://git.code.sf.net/p/cedet/git</a> cedet<br>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>cedet<br>
</span><span class='line'><span class="nv">$ </span>make <span class="c"># wait for it to complete</span><br>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>contrib<br>
</span><span class='line'><span class="nv">$ </span>make<br>
</span></code></pre></td></tr></table></div></figure><br>
Emacs からロードする．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nv">load-file</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">user-emacs-directory</span> <span class="s">&quot;/cedet/cedet-devel-load.el&quot;</span><span class="p">))</span><br>
</span><span class='line'><span class="p">(</span><span class="nv">load-file</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">user-emacs-directory</span> <span class="s">&quot;cedet/contrib/cedet-contrib-load.el&quot;</span><span class="p">))</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<h2>9.1.Semanticマイナーモード</h2>

<p><code>Semantic</code>は，ソースコードパーサを利用して構文を考慮した補完を行ってくれるパッケージ．</p>

<h3>9.1.1セットアップ</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;cc-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;semantic</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">global-semanticdb-minor-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-semantic-idle-scheduler-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">semantic-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>9.1.2.<code>semantic-mode</code></h3>

<p>Semantic-modeでは，Emacsは現在のバッファをパースする．シンボルにカーソルを合わせるとsemanticはすべてのincludeファイルを読みに行くので，たまに時間がかかる．しかし一回パースすれば終わりなので，問題はない．</p>

<h3>9.1.3.パスの追加</h3>

<p>Semantic のデフォルトのインクルードパスは<code>semantic-dependency-system-include-path</code>に格納されており，追加したい場合は以下のようにする．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nv">semantic-add-system-include</span> <span class="s">&quot;/usr/include/boost&quot;</span> <span class="ss">&#39;c++-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">semantic-add-system-include</span> <span class="s">&quot;~/linux/kernel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">semantic-add-system-include</span> <span class="s">&quot;~/linux/include&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>9.1.4.<code>company-mode</code>におけるSemantic-mode</h3>

<p><code>company-mode</code>には<code>company-semantic</code>コマンドがあり，これがSemanticDBを補完候補の取得に利用する．<code>company-semantic</code>の良いところは，<code>semantic-ia-complete-symbol</code>が改善されているところ．元は1文字以上タイプしていなければ補完を検索してくれなかったが，<code>company-semantic</code>ではプレフィクスなしで補完してくれる．</p>

<ul>
<li><code>global-sematicdb-minor-mode</code>

<ul>
<li>パース結果をキャッシュする．キャッシュ結果は<code>semanticdb-default-save-directory</code>変数内のパスに保存されるが，デフォルトでは<code>~/.emacs.d/semanticdb</code>いかに保持される</li>
</ul></li>
<li><code>global-semantic-idle-scheduler-mode</code>

<ul>
<li>このモードが有効になっていると，バッファーが期限切れになっていた時，ユーザがタイプしていない間にパーサをし直す．これがオフだと，バッファはコマンドによって手動でパースし直さなければならない</li>
</ul></li>
</ul>

<h2>9.2.CEDETのその他の機能</h2>

<p>Semanticがソースコードをパースし作成したデータベースは，コードの補完の他にも様々な使い道がある．コードナビゲーションや定義元・参照元ジャンプなど．</p>

<h3>9.2.1.Senator</h3>

<p>CEDETの一部で，SEmainticNAvigaTORの略称．</p>

<h3>9.2.2.デバッグ</h3>

<p>GDBとかGUDとかがあるらしい．</p>

<p>あとは気が向いたら．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X でターミナルをきれいにする]]></title>
    <link href="http://tasuwo.github.io/blog/2016/02/16/zsh-setting/"/>
    <updated>2016-02-16T11:20:22+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/02/16/zsh-setting</id>
    <content type="html"><![CDATA[<p>ターミナルをきれいにする手順をメモってなかったなぁと思ったのでメモっておく．<br>
本当に，単純に見た目を変えるだけ．</p>

<!-- more -->

<p>ターミナルをきれいにします．やることは，</p>

<ul>
<li>コマンドラインの表示形式をきれいにする</li>
<li>色をきれいにする</li>
</ul>

<p>テーマを手軽に導入するために Antigen を導入したいので，それに伴って zsh を導入します．</p>

<h2>zsh</h2>

<p>Homebrew で導入する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install zsh
</span></code></pre></td></tr></table></div></figure>

<p>bash で設定していたパスを zsh でも有効になるようにお引越し．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp ~/.bash_profile ~/.zprofile
</span></code></pre></td></tr></table></div></figure>

<p>ターミナルの環境設定から、<code>一般</code> &gt; <code>開くシェル</code> &gt; <code>コマンド</code> に <code>/usr/local/bin/zsh</code> を設定すればおk．</p>

<h2>Antigen</h2>

<p>プラグイン管理ツールの <a href="https://github.com/zsh-users/antigen">Antigen</a> を導入する．<code>antigen theme テーマ名</code> で，oh-my-zsh で提供されているテーマなら手軽に導入できるので便利．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span>
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/zsh-users/antigen.git
</span></code></pre></td></tr></table></div></figure>

<p><code>.zshrc</code> に以下を記述</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/antigen/antigen.zsh
</span><span class='line'>
</span><span class='line'><span class="c"># Load the oh-my-zsh&#39;s library.</span>
</span><span class='line'>antigen use oh-my-zsh
</span><span class='line'>
</span><span class='line'><span class="c"># Syntax highlighting bundle.</span>
</span><span class='line'>antigen bundle zsh-users/zsh-syntax-highlighting
</span><span class='line'>
</span><span class='line'><span class="c"># Load the theme.</span>
</span><span class='line'>antigen theme https://github.com/denysdovhan/spaceship-zsh-theme spaceship
</span><span class='line'>
</span><span class='line'><span class="c"># Tell antigen that you&#39;re done.</span>
</span><span class='line'>antigen apply
</span></code></pre></td></tr></table></div></figure>

<p>テーマは <a href="https://github.com/denysdovhan/spaceship-zsh-theme">denysdovhan/spaceship-zsh-theme</a> にした．</p>

<h2>Color theme</h2>

<p>tommorow theme に幾つかカラーテーマがまとめられている．</p>

<p><a href="https://github.com/chriskempson/tomorrow-theme">chriskempson/tomorrow-theme: Tomorrow Theme the precursor to Base16 Theme</a></p>

<p>適当なフォルダに clone する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/chriskempson/tomorrow-theme.git
</span></code></pre></td></tr></table></div></figure>

<p>ターミナルの設定 &gt; 一般 を選択．カラーテーマ群が表示されているリストの下部に歯車マークがあるので、そこから「読み込む&#8230;」を選択する．その後，clone した tomorrow-theme/OS X Terminal/ 以下から好きなテーマを読み込む．すると，リストにテーマが追加されるので，テーマを選択した状態でリスト下部の「デフォルト」を選択すれば良い．</p>

<p>おしまい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenCV を Homebrew から導入し直して Xcode に設定し直した]]></title>
    <link href="http://tasuwo.github.io/blog/2016/02/16/brew-open-cv/"/>
    <updated>2016-02-16T10:19:02+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/02/16/brew-open-cv</id>
    <content type="html"><![CDATA[<p>既に OpenCV を導入し Xcode から利用していたが、Homebrew で設定しなおす機会があったので、やったことをメモしておく。こうしたらできた！というメモなので、コマンド実行等は自己責任でお願いします。</p>

<!-- more -->

<p>環境は以下です．</p>

<ul>
<li>Max OS X 10.10.1 Yosemite</li>
<li>Xcode 6.1.1</li>
<li>OpenCV 2.4.12</li>
</ul>

<h2>導入</h2>

<p>事前に <code>brew doctor</code> を解決しておくと良いかも。問題がなければ、opencv を導入する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap homebrew/science
</span><span class='line'><span class="nv">$ </span>brew install opencv
</span></code></pre></td></tr></table></div></figure>

<p>既に OpenCV を導入している場合、過去のファイル群は邪魔なので撤去しなくてはならない。<code>brew doctor</code> 時点で影響を及ぼしそうなファイルはリストアップされるので、それらを削除するなりバックアップをとるなりしてから、シンボリックリンクを貼ると良いかも。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew link opencv
</span></code></pre></td></tr></table></div></figure>

<p><code>--force</code> オプションをつけてね〜的な warning が出るかもしれない。その場合は付加すれば実行できる。ただし、既存の OpenCV のシンボリックリンクを上書きすることになるので、注意。</p>

<h2>Xcode で使う</h2>

<p>Homebrew で導入した OpenCV の場所は <code>/usr/local/Cellar/opencv</code> となる。Xcode から利用する場合は、適切な場所を参照するように設定を行う必要がある。以下、パス内のバージョンに関しては適宜置き換えること(今回の場合は2.4.12_2)。</p>

<h3>ヘッダー及びライブラリの Search Paths</h3>

<ul>
<li><code>Build Settings</code> &gt; <code>Header Search Paths</code>

<ul>
<li><code>/usr/local/Cellar/opencv/2.4.12_2/include</code></li>
<li><code>/usr/local/Cellar/opencv</code> にして、recursive に設定すると説明しているサイトがあったが、こちらの方が綺麗に見える</li>
</ul></li>
<li><code>Build Settings</code> &gt; <code>Library Search Paths</code>

<ul>
<li><code>/usr/local/Cellar/opencv/2.4.12_2/lib</code></li>
</ul></li>
</ul>

<p>OpenCV 導入済み &amp; Xcode 設定済みだった場合は、既存の設定を削除するか、上記で設定したパスの優先度をあげる(リスト内で上方に移動する)と良いかもしれない。</p>

<h3>ライブラリとのリンク</h3>

<p>OpenCV をすでに導入し、Xcode で設定済みであった場合は、<code>Build Settings</code> &gt; <code>Linking</code> &gt; <code>Other Linker Flags</code> にいろいろ設定されているかもしれないが、全部消す(と、自分の環境ではエラーがなおった)。</p>

<p>Homebrew で導入後にライブラリとのリンクを張るためには <code>Build Phases</code> &gt; <code>Link Binary With Libraries</code> に、<code>/usr/local/Cellar/opencv/2.4.12_2/lib</code> から必要なライブラリを追加する。<code>Shitf + Command + G</code> から <code>/usr/local/Cellar/opencv/2.4.12\_2/lib</code> と入力すれば楽。</p>

<h2>トラブルシューティング</h2>

<h3>Undefined symbols</h3>

<p><code>Undefined symbols for architecture x86_64:</code> みたいなエラーがドバッと出ることがある。</p>

<p><a href="http://stackoverflow.com/questions/24985713/opencv-undefined-symbols-for-architecture-x86-64-error">c++ - OpenCV Undefined symbols for architecture x86_64: error - Stack Overflow</a></p>

<p>OpenCV に必要なライブラリがリンクされていないことによるエラーのため、Link Binary With Libraries で必要なライブラリがリンクされているか確認する。</p>

<h3>dyld: Library not loaded</h3>

<p>Xcode における Build &amp; Run 後に、以下のようなエラーが吐かれた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dyld: Library not loaded: /usr/local/opt/libpng16.16.dylib
</span><span class='line'>  Referenced from: /usr/local/opt/opencv/lib/libopencv_highgui.2.4.dylib
</span><span class='line'>  Reason: Incompatible library version: libopencv_highgui.2.4.dylib requires version 33.0.0 or later, but libpng16.16.dylib provides version 32.0.0
</span><span class='line'>Trace/BPT <span class="nb">trap</span>: 5
</span></code></pre></td></tr></table></div></figure>

<p><code>/usr/local/opt</code> の libpng を読みに行ってるのが悪いのかな？そもそも <code>/usr/local/opt</code> の OpenCV 見に行ってるけどなんでかな？と思っていたが、どうやら試した環境では、 <code>/usr/local/opt</code> 内の libpng、 opencv は Cellar 以下の各ソフトウェアへのシンボリックリンクになってるらしかった。Homebrew がやってくれてるんだっけ？わからん&#8230;</p>

<p>バージョンが低いと言われているので、<code>brew update &amp; brew upgrade</code> したら、とりあえず治ったけど、実際何が原因だったのかはわからなかった&#8230;</p>

<p><a href="http://stackoverflow.com/questions/28124359/error-with-homebrew-opencv-libpng">c++ - Error with homebrew + opencv + libpng - Stack Overflow</a></p>

<h2>その他参考</h2>

<p><a href="http://nantekottai.com/2014/04/16/opencv-xcode5-homebrew/">HomebrewとXcode5でつくるOpenCVの環境 – なんてこったいブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El Capitan でブログを更新しようとしたらエラーを吐かれた]]></title>
    <link href="http://tasuwo.github.io/blog/2016/02/14/fix-octopress/"/>
    <updated>2016-02-14T13:06:20+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/02/14/fix-octopress</id>
    <content type="html"><![CDATA[<p>Mac OS X El Capitan にしてからブログを更新しようとしたらエラーを吐かれたので，解決方法をメモしておく．</p>

<!-- more -->

<p>octpress でブログを書こうとしたらエラーを吐かれた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake preview
</span><span class='line'>Starting to watch <span class="nb">source </span>with Jekyll and Compass. Starting Rack on port 4000
</span><span class='line'>rake aborted!
</span><span class='line'>Errno::ENOENT: No such file or directory - jekyll
</span><span class='line'>/Users/Tasuku_Tozawa/Documents/STUDY/blog/octopress/Rakefile:84:in <span class="sb">`</span>spawn<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/Users/Tasuku_Tozawa/Documents/STUDY/blog/octopress/Rakefile:84:in `block in &lt;top (requir                                                                                          </span>
</span><span class='line'><span class="s1">ed)&gt;&#39;</span>
</span><span class='line'>Tasks: <span class="nv">TOP</span> <span class="o">=</span>&gt; preview
</span><span class='line'><span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>El Capitan におけるバグらしい．</p>

<p><a href="https://github.com/imathis/octopress/issues/1749">When I upgraded the Mac system, I can&#39;t Preview · Issue #1749 · imathis/octopress</a></p>

<p>ruby のバージョンをあげたいんだけどエラーになる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install 2.2.3
</span><span class='line'>The following versions contain <span class="sb">`</span>2.2.3<span class="s1">&#39; in the name:</span>
</span><span class='line'><span class="s1">  rbx-2.2.3</span>
</span><span class='line'>
</span><span class='line'><span class="s1">See all available versions with `rbenv install --list&#39;</span>.
</span><span class='line'>
</span><span class='line'>If the version you need is missing, try upgrading ruby-build:
</span><span class='line'>
</span><span class='line'>  brew update <span class="o">&amp;&amp;</span> brew upgrade ruby-build
</span></code></pre></td></tr></table></div></figure>

<p><a href="http://qiita.com/ngtk/items/cc85c0d916ac4bcc2188">rbenvでインストールできるバージョンリストを最新にする - Qiita</a></p>

<p><code>brew update &amp;&amp; brew upgrade ruby-build</code> したら，インストールできた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install 2.2.3
</span><span class='line'>Downloading ruby-2.2.3.tar.bz2...
</span><span class='line'>-&gt; https://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.3.tar.bz2
</span><span class='line'>Installing ruby-2.2.3...
</span><span class='line'>Installed ruby-2.2.3 to /Users/Tasuku_Tozawa/.rbenv/versions/2.2.3
</span></code></pre></td></tr></table></div></figure>

<p>その後，octopress の root ディレクトリで以下を実行．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv <span class="nb">local </span>2.2.3
</span><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>rbenv rehash
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>

<p>無事実行できた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake preview                                                                              56<span class="p">|</span>
</span><span class='line'>Starting to watch <span class="nb">source </span>with Jekyll and Compass. Starting Rack on port <span class="m">4000</span>                57<span class="p">|</span> <span class="sb">```</span> bash
</span><span class='line'><span class="o">[</span>2016-02-14 12:50:40<span class="o">]</span> INFO  WEBrick 1.3.1                                                   58<span class="p">|</span>
</span><span class='line'><span class="o">[</span>2016-02-14 12:50:40<span class="o">]</span> INFO  ruby 2.2.3 <span class="o">(</span>2015-08-18<span class="o">)</span> <span class="o">[</span>x86_64-darwin15<span class="o">]</span>                       59<span class="p">|</span> <span class="sb">```</span>
</span><span class='line'><span class="o">[</span>2016-02-14 12:50:40<span class="o">]</span> INFO  WEBrick::HTTPServer#start: <span class="nv">pid</span><span class="o">=</span><span class="m">80458</span> <span class="nv">port</span><span class="o">=</span>4000
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クラスにおける Failable Initializerについて]]></title>
    <link href="http://tasuwo.github.io/blog/2016/02/02/failable-initializer/"/>
    <updated>2016-02-02T13:58:13+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/02/02/failable-initializer</id>
    <content type="html"><![CDATA[<p>Swift で，構造体やenum，クラスにおいて，初期化が失敗しうるコンストラクタを利用したい時には，<em>Failable Initializer</em> を利用すれば良いらしいのだが，これをクラスで利用しようとしたらハマったのでメモ．</p>

<!-- more -->

<h2>Failable Initializer とは</h2>

<p>初期化に失敗したことを，<code>nil</code> を返すことで伝えることのできるイニシャライザ．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">species</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// failable initializer</span>
</span><span class='line'>    <span class="c1">// init の末尾に ? を付加する</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">species</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">species</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 初期化失敗の場合には nil を返す</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">species</span> <span class="o">=</span> <span class="n">species</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これで，初期化がうまくいかなかった場合には，<code>nil</code> が返される．</p>

<h2>ハマったこと</h2>

<p>やろうとしたことは，コンストラクタ内で例外を扱うことで，具体的には以下のような感じ．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">var</span> <span class="nl">foo1</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">var</span> <span class="nl">foo2</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">foo1</span> <span class="o">=</span> <span class="n">try</span> <span class="cm">/* 例外を投げうる処理 */</span>
</span><span class='line'>            <span class="n">foo2</span> <span class="o">=</span> <span class="mi">0</span>   <span class="cm">/* 単純な代入 */</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>ところが，このように記述すると，<code>return nil</code> の位置で以下のようなエラーが発生する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">All</span> <span class="n">stored</span> <span class="n">properties</span> <span class="n">of</span> <span class="n">a</span> <span class="k">class</span> <span class="n">instance</span> <span class="n">must</span> <span class="n">be</span> <span class="n">initialized</span> <span class="n">before</span> <span class="n">returning</span> <span class="nb">nil</span> <span class="n">from</span> <span class="n">an</span> <span class="n">initializer</span>
</span></code></pre></td></tr></table></div></figure>

<p>同じことでハマった人がいるらしい．</p>

<blockquote>
<p><a href="http://stackoverflow.com/questions/26495586/best-practice-to-implement-a-failable-initializer-in-swift">All stored properties of a class instance must be initialized before returning nil from an initializer</a></p>
</blockquote>

<p>結論から言うと，値型である構造体や列挙型ではいかなるタイミングでも初期化を失敗(<code>return nil</code>)できるが，クラスについては，すべての stored property が明示的に初期化された後でなければ初期化を失敗させることができないらしい．</p>

<blockquote>
<p>A failable initializer for a value type (that is, a structure or enumeration) can trigger an initialization failure at any point within its initializer implementation. In the Animal structure example above, the initializer triggers an initialization failure at the very start of its implementation, before the species property has been set.<br>
For classes, however, a failable initializer can trigger an initialization failure only after all stored properties introduced by that class have been set to an initial value and any initializer delegation has taken place.<br>
<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID224">The Swift Programming Language (Swift 2.1): Initialization</a></p>
</blockquote>

<h2>動作を確認してみる</h2>

<p>Playground でサンプルコードを動かして動作を確かめてみる．<br>
まずは，構造体の場合．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 構造体</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">species</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">species</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">species</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">species</span> <span class="o">=</span> <span class="n">species</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">hoge</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="cm">/* ここに任意の値 */</span>
</span><span class='line'><span class="k">let</span> <span class="n">anonymousCreature</span> <span class="o">=</span> <span class="n">Animal</span><span class="p">(</span><span class="nl">species</span><span class="p">:</span> <span class="n">hoge</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">anonymousCreature</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;NG&quot;</span><span class="p">)</span> <span class="cm">/* hoge=&quot;&quot; の時 */</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">)</span> <span class="cm">/* hoge=&quot;任意の文字列&quot; の時 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>次に，クラスの場合．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Product</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">name</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">hoge</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="cm">/* ここに任意の値 */</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">bowTie</span> <span class="o">=</span> <span class="n">Product</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">hoge</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;The product&#39;s name is \(bowTie.name)&quot;</span><span class="p">)</span> <span class="cm">/* hoge=&quot;任意の文字列&quot; の時．The product&#39;s name is &lt;任意の文字列&gt; */</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;NG&quot;</span><span class="p">)</span> <span class="cm">/* hoge=&quot;&quot; の時 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>公式ドキュメント曰く，stored property である name は <code>String!</code> として宣言する．すると，デフォルト値として <code>nil</code> が格納されるが，初期化成功時には，stored property が nil かどうかを気にせずにアクセスしたい．(stored property に対する nil チェックが必要ないようにしたい)ので，クラスでは全ての stored property を初期化してから return nil する必要があるそうだ．<br>
でも，コンストラクタの返り値が nil であったならどちらにしろプロパティにアクセスはしないわけで，なぜ全プロパティを初期化してから nil を返す必要があるのか，いまいちわからなかった．</p>

<h2>参考</h2>

<p><a href="https://developer.apple.com/swift/blog/?id=17">Failable Initializers - Swift Blog - Apple Developer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発時の個人的に好みなディレクトリ構成とか Xib ファイルの使い方とか]]></title>
    <link href="http://tasuwo.github.io/blog/2016/01/10/ios-dev-setting/"/>
    <updated>2016-01-10T20:47:24+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/01/10/ios-dev-setting</id>
    <content type="html"><![CDATA[<p>自分が iOS アプリケーションを作るとき使いまわそうと思った，テンプレ的な設定とかをまとめておく．</p>

<!-- more -->

<h2>やりたいこと</h2>

<p>やることは以下．</p>

<ol>
<li>ディレクトリ構成をきれいにする

<ul>
<li>MVCアーキテクチャに対応させる</li>
</ul></li>
<li>Storyboard を削除する

<ul>
<li>segue とかで画面遷移させたり，一つの storyboard に複数の view controller が対応しているのは管理しづらくなりそうかな，と思ったので</li>
</ul></li>
<li>UI 整形に xib ファイルを使う

<ul>
<li>UIView を各画面ごとに作成し，対応した xib ファイルを UI 整形用に使う</li>
</ul></li>
</ol>

<h2>0. 環境</h2>

<ul>
<li>Xcode7.2</li>
<li>Swift2.0</li>
<li>OS X Yosemite</li>
</ul>

<h2>1. ディレクトリ構成をきれいにする</h2>

<p>iOS アプリケーションは MVC アーキテクチャに則っているので，対応したディレクトリ構成にする．<code>File &gt; New &gt; Project</code> から <code>Single View Application</code> を作成すると，デフォルトのディレクトリ構成は以下のようなかんじ．</p>

<p><img src="http://tasuwo.github.io/images/20160110_default.png" alt="default.png"></p>

<p>これを，以下のようなディレクトリ構成に変更する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>┬ /resources
</span><span class='line'>│  ├ info.plist
</span><span class='line'>│  └ Assets.xcassets
</span><span class='line'>└ /src
</span><span class='line'>   ├ AppDelegate.swift
</span><span class='line'>   ├ /model
</span><span class='line'>   ├ /view
</span><span class='line'>   └ /controller
</span><span class='line'>       └ ViewController.swift</span></code></pre></td></tr></table></div></figure>

<p>実際のディレクトリ構成と Xcode のカラム上でのディレクトリ構成は異なるので，その同期を撮りたいときには <a href="https://github.com/venmo/synx">venmo/synx</a> を使うと良い．</p>

<h2>2. Storyboard を削除する</h2>

<p>デフォルトで存在する，<code>Main.storyboard</code>, <code>LaunchScreen.storyboard</code> は削除する．削除するだけだとエラーとなってしまうので，以下のようにプロジェクトの設定を変更する．</p>

<ul>
<li><code>Deployment Info &gt; Main Interface</code> のテキストフィールドを空にする</li>
<li><code>App Icons and Launch Images &gt; Launch Screen File</code> のテキストフィールドを空にする</li>
</ul>

<p>これでプロジェクトから storyboard を除くことはできたが，この時点で Run しても画面に何も表示されない．rootViewConstroller を設定できていないためである．</p>

<p><img src="http://tasuwo.github.io/images/20160110_black.png" alt="black.png"></p>

<p>そこで，<code>AppDelegate.swift</code> に以下を追記することで，ViewController を rootViewController に設定する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSObject</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">window</span> <span class="o">=</span> <span class="bp">UIWindow</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">().</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">window</span> <span class="o">=</span> <span class="n">window</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">whiteColor</span><span class="p">()</span>
</span><span class='line'>            <span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">ViewController</span><span class="p">()</span>
</span><span class='line'>            <span class="n">window</span><span class="p">.</span><span class="n">makeKeyAndVisible</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これでOK．</p>

<p><img src="http://tasuwo.github.io/images/20160110_white.png" alt="white.png"></p>

<h2>3. UI 整形に xib ファイルを使う</h2>

<p>まず，以下のような <code>MainView.swift</code> を <code>src/view</code> 以下に作成する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">MainView</span> <span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>次に，<code>New file</code> から <code>iOS &gt; User Interface</code> 内の <code>view</code> を選択し， xib ファイル作成する．その <code>File&#39;s Owner</code> の Custom Class を <code>Main View</code> に設定</p>

<p><img src="http://tasuwo.github.io/images/20160110_mainview.png" alt="mainview.png"></p>

<p>この UI が適用されたことがわかるように，適当にラベルを設置しておく．</p>

<p><img src="http://tasuwo.github.io/images/20160110_main.png" alt="main.png"></p>

<p>xib ファイル側の view を <code>MainView.swift</code> に対応させる．</p>

<p><img src="http://tasuwo.github.io/images/20160110_outlet.png" alt="outlet.png"></p>

<p>MainView.swift を以下のように編集する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">MainView</span> <span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">var</span> <span class="nl">MainView</span><span class="p">:</span> <span class="bp">UIView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">loadNibNamed</span><span class="p">(</span><span class="s">&quot;MainView&quot;</span><span class="p">,</span> <span class="nl">owner</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">MainView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">addSubview</span><span class="p">(</span><span class="n">MainView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>さらに，<code>ViewController.swift</code> に以下を追記</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">MainView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これで Run すればよい．</p>

<p><img src="http://tasuwo.github.io/images/20160110_mianvi.png" alt="mianvi.png"></p>

<h2>捕捉 : Auto layout</h2>

<p>中央揃えしたいとかそういうのは auto layout を活用すれば良い．以下のサイトが参考になる．</p>

<p><a href="http://qiita.com/teradonburi/items/94b89379aa5a0bfdc71d">iOS - xcode6でAutoLayoutでレスポンシブデザイン - Qiita</a><br>
<a href="http://swift-salaryman.com/autolayout.php">AutoLayout - Swiftサラリーマン</a></p>

<p>ラベルから Ctrl 押しながら 親view へドラッグ</p>

<p><img src="http://tasuwo.github.io/images/20160110_auto.png" alt=" auto.png"></p>

<p>制約を適当に付加する．</p>

<p><img src="http://tasuwo.github.io/images/20160110_constraint.png" alt="constraint.png"></p>

<p>今回はこんな感じ．</p>

<p><img src="http://tasuwo.github.io/images/20160110_cons.png" alt="cons.png"></p>

<p>これで Run すると中央揃えになる．</p>

<p><img src="http://tasuwo.github.io/images/20160110_mmm.png" alt="mmm.png"></p>

<h2>おわりに</h2>

<p>最終的なディレクトリ構成は以下．</p>

<p><img src="http://tasuwo.github.io/images/20160110_V.png" alt="V.png"></p>

<h2>参考</h2>

<p><a href="http://tanihiro.hatenablog.com/entry/2015/10/13/092710">【iOS】【swift】カスタムViewとxibを紐付ける - tanihiro.log</a><br>
<a href="http://qiita.com/iKichiemon/items/3cfa6c2bf2a0acb299a0">[Swift]xibファイルを呼び出す最も簡単な方法 - Qiita</a><br>
<a href="http://qiita.com/noppefoxwolf/items/11401622950768c93fd2">Swift+xibで簡単レイアウトでカスタムビュー - Qiita</a><br>
<a href="http://qiita.com/MTattin/items/61beb3b4afcc779f707f">XCode7 - Storyboardにxib利用 - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cakePHPの導入からIDCFの仮想サーバでの立ち上げまでメモ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/09/28/cakephp/"/>
    <updated>2015-09-28T14:16:16+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/09/28/cakephp</id>
    <content type="html"><![CDATA[<p>某合宿で web サービスを作成する際に cakePHP を利用したので，そのまとめ．ローカルでの立ち上げから，サーバに up して外部から見れるようにするまでやる．導入とサーバ立ち上げの両方ではまった．</p>

<!-- more -->

<h2>自分の環境</h2>

<p>Mac OS X Yosemite です.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sw_vers
</span><span class='line'>ProductName:  Mac OS X
</span><span class='line'>ProductVersion:   10.10.3
</span><span class='line'>BuildVersion: 14D136
</span></code></pre></td></tr></table></div></figure>

<h2>インストール</h2>

<p>まず composer をいれる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -s https://getcomposer.org/installer <span class="p">|</span> php
</span></code></pre></td></tr></table></div></figure>

<p>適当なプロジェクトを作成してみる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>composer create-project --prefer-dist cakephp/app <span class="o">[</span>プロジェクト名<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>エラーが出た．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Your requirements could not be resolved to an installable <span class="nb">set </span>of packages.
</span><span class='line'>
</span><span class='line'>Problem 1
</span><span class='line'> - cakephp/cakephp 3.0.x-dev reqyures ext-intl * -&gt; the requested PHP extention intl is missing from your system.
</span><span class='line'> ...
</span></code></pre></td></tr></table></div></figure>

<p>intl がないと言われる．Mac の人は pecl を利用して<code>intl</code>を導入する(pecl導入していない場合は導入して&#8230;)．<br>
Win の人は <code>php.ini</code> の <code>;extention=php_intl.dll</code> のコメントアウトを外すと良い．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pecl install intl
</span></code></pre></td></tr></table></div></figure>

<p>すると，またエラーが出る．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>checking <span class="k">for</span> location of ICU headers and libraries... not found
</span><span class='line'>configure: error: Unable to detect ICU prefix or ./bin/icu-config failed. Please verify ICU install prefix and make sure icu-config works.
</span></code></pre></td></tr></table></div></figure>

<p>ICUがないと言われるので導入する．homebrew でインストールした．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install icu4c
</span><span class='line'><span class="nv">$ </span>brew link icu4c
</span></code></pre></td></tr></table></div></figure>

<p>もう一度インストールしてみる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pecl install intl
</span><span class='line'>downloading intl-3.0.0.tgz ...
</span><span class='line'>
</span><span class='line'><span class="o">[</span>略<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Build process completed successfully
</span><span class='line'>Installing <span class="s1">&#39;/usr/local/Cellar/php56/5.6.11_2/lib/php/extensions/no-debug-non-zts-20131226/intl.so&#39;</span>
</span><span class='line'>install ok: channel://pecl.php.net/intl-3.0.0
</span><span class='line'>Extension intl enabled in php.ini
</span></code></pre></td></tr></table></div></figure>

<p>やっとインストールできた！</p>

<p><code>sudo apachectl start</code> でapacheを起動し，phpでintlがロードできているか確認する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>php -m <span class="p">|</span> grep intl
</span><span class='line'>intl
</span></code></pre></td></tr></table></div></figure>

<p>できているらしい．今度こそプロジェクトをちゃんと作ってみる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>composer create-project --prefer-dist cakephp/app cake_test
</span><span class='line'>Installing cakephp/app <span class="o">(</span>3.0.4<span class="o">)</span>
</span><span class='line'>  - Installing cakephp/app <span class="o">(</span>3.0.4<span class="o">)</span>
</span><span class='line'>    Loading from cache
</span></code></pre></td></tr></table></div></figure>

<p><code>bin/cake server</code> を起動し，<code>localhost:8765</code>にアクセスできて確認できればOK．</p>

<blockquote>
<p><a href="http://stackoverflow.com/questions/27886117/php-intl-installation-on-xampp">$ sudo ./pecl install intl</a><br>
<a href="http://qiita.com/ms2sato/items/fd76d67fd5d63c3cb4a5">環境構築 - icuのインストール - Qiita</a><br>
<a href="http://tetsuwo.tumblr.com/post/35060809036/intl-%E3%81%A8-apc-%E3%82%92-php-5315-macbook-air">intl と APC を PHP 5.3.15 (MacBook Air)&#8230; « をぶろぐ</a><br>
<a href="http://darraghenright.tumblr.com/post/22027208929/installing-intl-package-on-osx-lion">Installing Intl package on OSX Lion - Darragh Enright</a><br>
<a href="http://qiita.com/s-kiriki/items/636ec1109f48fb977347">CakePHP3の使い方まとめ - Qiita</a></p>
</blockquote>

<h2>サーバにアップロード</h2>

<p>IDCFクラウドのサービスを利用した．</p>

<blockquote>
<p><a href="http://www.idcf.jp/cloud/">クラウドサービスならIDCFクラウド -使いやすく、パワフル</a></p>
</blockquote>

<h3>設定</h3>

<p>仮想マシンを作成して，めちゃらくガイドを参考に設定すればいい．OS は班員の一人が利用したことがあるということで Debian にした．</p>

<h3>ログイン</h3>

<p>秘密鍵をダウンロードできたはず(うろ覚え&#8230;)なので，以下でアクセスできるはず．</p>

<p><code>ssh -i [/path/to/秘密鍵] -p 22 [user_name]@[IPアドレス]</code></p>

<h3>アプリの立ち上げ</h3>

<p>cakePHP で作成したアプリケーションは，Github あたりで共有しておいて，サーバにログイン &amp; clone すればよい．設定で 80 番ポートを開けていたので，そこでアプリケーションを起動すればよいはず．ポートの指定方法は公式にある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bin/cake server -p 80
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p><a href="http://book.cakephp.org/3.0/ja/installation.html#id6">インストール — CakePHP Cookbook 3.x ドキュメント</a></p>
</blockquote>

<p>これで<code>http://[IPアドレス]</code>にアクセスすればよいはずなんだけど，できなくてはまった．ちょっと調べてみると&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>netstat -an <span class="p">|</span> grep LISTEN
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span>  ::1.80                 *.*                    LISTEN
</span></code></pre></td></tr></table></div></figure>

<p>IPv4 ではなく，IPv6 で LISTEN してしまっているので，以下のようにホストを指定して起動する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bin/cake server -p <span class="m">80</span> -H 0.0.0.0
</span><span class='line'><span class="nv">$ </span>netstat -an <span class="p">|</span> grep LISTEN
</span><span class='line'>tcp4       <span class="m">0</span>      <span class="m">0</span>  *.80                   *.*                    LISTEN
</span></code></pre></td></tr></table></div></figure>

<p>これで外部から見れるようになった！サーバの設定が悪いのかと思ってだいぶ時間がかかってしまった&#8230;</p>

<blockquote>
<p><a href="http://qiita.com/IKEA_dless/items/f536b3c009af295bb4a5">春だし CakePHP 3.0をComposer経由でCentOS6.5にインストール してみた - Qiita</a><br>
<a href="http://esoz.blog.fc2.com/blog-entry-49.html">コンピュータとかバイクとか。 Apache HTTP Server の設定いろいろ。</a><br>
<a href="http://qiita.com/cubicdaiya/items/003e36e17519ef32ac8a">Linux - 特定のポート番号をLISTENしているプロセスが知りたい - Qiita</a></p>
</blockquote>

<h2>ユーザの追加</h2>

<p>班員各が公開鍵認証でサーバにアクセスできるようにしたかったので，ユーザ追加の方法もメモっておく.<br>
クライアント側で以下の操作を行う．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/.ssh/
</span><span class='line'><span class="nv">$ </span>ssh-keygen
</span><span class='line'>名前は適当に
</span><span class='line'>id_hoge でつくって id_hoge<span class="o">(</span>秘密鍵<span class="o">)</span> と id_hoge.pub<span class="o">(</span>公開鍵<span class="o">)</span> ができた場合について説明する
</span></code></pre></td></tr></table></div></figure>

<p>サーバ側で以下の操作を行う．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>adduser hoge
</span><span class='line'>パスワードとか設定する
</span><span class='line'><span class="nv">$ </span>mv /home/hoge
</span><span class='line'><span class="nv">$ </span>mkdir .ssh
</span><span class='line'><span class="nv">$ </span>chown hoge .ssh
</span><span class='line'><span class="nv">$ </span>chmod <span class="m">700</span> .ssh
</span><span class='line'><span class="nv">$ </span>emacs .ssh/authorized_keys
</span><span class='line'>公開鍵<span class="o">(</span>id_hoe.pub<span class="o">)</span>の内容を貼り付け
</span><span class='line'><span class="nv">$ </span>chown hoge authorized_keys
</span><span class='line'><span class="nv">$ </span>chmod <span class="m">600</span> authorized_keys
</span><span class='line'><span class="nv">$ </span>/etc/ssh/sshd_config
</span><span class='line'>AllowUsers に hoge を追加
</span><span class='line'><span class="nv">$ </span>/etc/init.d/sshd restart
</span></code></pre></td></tr></table></div></figure>

<p>これで，クライアント側から <code>ssh -i [/path/to/id_hoge] -p 22 [user_name]@210.140.68.52</code> でサーバにログインできるはず．</p>

<blockquote>
<p><a href="http://www.serverlog.jp/ssh-key-auth/">公開鍵認証による SSH 接続の方法</a><br>
<a href="http://www015.upp.so-net.ne.jp/unixlife/linux/de-user.html">Debianでのユーザ管理</a></p>
</blockquote>

<p>ちなみに，ユーザに管理者権限を付与したい場合は，以下のサイトを参考にすればよい．グループに対して設定を行うときには，<code>%wheel ALL=(ALL) ALL</code> のように先頭に <code>%</code> を付加するんだけど，なぜか除いてしまっていてつまづいた．</p>

<blockquote>
<p><a href="http://www.websec-room.com/2014/01/18/1590">CentOS で root 権限を持ち、sudo を実行できるユーザーを作成する | Webセキュリティの小部屋</a><br>
<a href="http://qiita.com/n0bisuke/items/4e4419290d789699cafa">Debianでユーザー追加を追加して権限を付与などをするメモ - Qiita</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode のプラグイン導入についてメモ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/08/16/xcode-plugin/"/>
    <updated>2015-08-16T16:08:37+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/08/16/xcode-plugin</id>
    <content type="html"><![CDATA[<p>メモしておこう．</p>

<!-- more -->

<h2>Alcatraz</h2>

<p>パッケージ管理ツールをいれる．<br>
パッケージのインストールや管理がラクになる．</p>

<blockquote>
<p><a href="https://github.com/supermarin/Alcatraz">supermarin/Alcatraz · GitHub</a></p>
</blockquote>

<p>以下を実行．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh <span class="p">|</span> sh
</span></code></pre></td></tr></table></div></figure>

<p>Xcode を起動すると以下のような画面が表示されるので，<code>Load Bundle</code>する．</p>

<p><img src="http://tasuwo.github.io/images/xcode_alcatraz.png" alt="xcode_alcatraz"></p>

<p><code>Window &gt; Package Manager</code> からパッケージをインストールできるようになる．</p>

<h2>いれたもの</h2>

<p>とりあえず一通り見てみていれてみたもの．</p>

<h3>プラグイン</h3>

<ul>
<li>BlockJump</li>
<li>FuzzyAutocomplete</li>
<li>VVDocumenter-Xcode</li>
<li>XAlign</li>
</ul>

<h3>テーマ</h3>

<ul>
<li>Tomorrow Night</li>
</ul>

<p>まだ全然使っていないので，使用感だとかどんなものだとかは気が向いたら書く．</p>

<h2>その他</h2>

<p>他にも Xcode 使う上で知っておくといいことがいろいろあるらしいけど，気が向いたら読む．</p>

<blockquote>
<p><a href="http://himaratsu.hatenablog.com/entry/xcode">Xcodeを便利に使って爆速開発という発表をしました - Think Big Act Local</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs の色表示がおかしかったのでなおした]]></title>
    <link href="http://tasuwo.github.io/blog/2015/08/16/title/"/>
    <updated>2015-08-16T15:25:56+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/08/16/title</id>
    <content type="html"><![CDATA[<p>結論から言うと，悪いのは emacs ではなく， screen が 256 色表示に対応していなかったせいだった．</p>

<!-- more -->

<p>256色表示できているか確かめる(参考サイト参照)</p>

<ul>
<li>ターミナル上</li>
</ul>

<p><img src="http://tasuwo.github.io/images/terminal_color.png" alt="terminal_color"></p>

<ul>
<li>screen上</li>
</ul>

<p><img src="http://tasuwo.github.io/images/screen_color.png" alt="screen_color"></p>

<p>screen のバージョン確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -v
</span><span class='line'>Screen version 4.00.03 <span class="o">(</span>FAU<span class="o">)</span> 23-Oct-06
</span></code></pre></td></tr></table></div></figure>

<p>homebrew で最新版を導入する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap homebrew/dupes
</span><span class='line'><span class="nv">$ </span>brew install screen
</span><span class='line'>...
</span><span class='line'><span class="nv">$ </span>screen -v
</span><span class='line'>Screen version 4.03.00 <span class="o">(</span>GNU<span class="o">)</span> 27-May-15
</span></code></pre></td></tr></table></div></figure>

<p>これでおk．</p>

<h2>参考</h2>

<blockquote>
<p><a href="http://qiita.com/trapple/items/8ad1b0a7c4fa5b8341b0">OSXに256color対応Screenをインストールする - Qiita</a><br>
<a href="http://kiyotakagoto.hatenablog.com/entry/2013/02/17/210834">Mac OS X + iTerm2 + tmux + emacs で256色表示 - 人生ずっと勉強</a><br>
<a href="http://qiita.com/sesame/items/e752b53ebf478d0d081f">emacsclientを使用するとテーマのmode-lineが効かない - Qiita</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim をさわってみた感想]]></title>
    <link href="http://tasuwo.github.io/blog/2015/06/26/title/"/>
    <updated>2015-06-26T22:39:00+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/06/26/title</id>
    <content type="html"><![CDATA[<p>雑記です．</p>

<!-- more -->

<p>案外予定がつまっていて忙しい．充実しているともいう．</p>

<p>さて，近頃ずっと Emacs の設定をしては悦にいるという暇のつぶし方をしていた．<br>
anything とか yasnippet とか&#8230;(設定ファイルは <a href="https://github.com/tasuwo/.emacs.d">tasuwo/.emacs.d</a> にあげてある)</p>

<p>Emacs を使い始めて数ヶ月がたった．<br>
  前の記事で説明したように，ブラウザも FireFox + keysnail で Emacs ライクなキーバインドにして楽しんでいたけれど，正直なところ，メタキーが押下しづらいし，小指を Ctrl に置いておくのが地味にキツい時がある．ちなみに，keysnail を利用している所感としては，トラックパッドを使わなくていい(Macbookのトラックパッドは十分に素晴らしいものだけど)のが楽だ．手首に優しい．</p>

<p>ネットではよく，Emacs vs Vim みたいな話を聞く．<br>
  自分が Emacs を使い始めたのは，大学で先輩に影響されたかのが大きく，Vim については触ったことすらなかった．軽量で，操作も(慣れれば)かなり快適だと聞く．Emacs から Vim に乗り換えてよかったという人もよく目にする．小指が疲れてきたこの機会に，少し触ってみることにした．</p>

<p>Vim にはデフォルトでチュートリアルが用意されていて，下記のように呼び出すことができる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vimtutor js
</span></code></pre></td></tr></table></div></figure>

<p>これをちょこちょこ触ってみた．</p>

<p>感想．<br>
文書編集能力は Vim が圧倒的に勝っているように感じた(ただ，日本語編集等なるとどうなんだろう&#8230;)．Emacs における単語移動の M-f や M-b は押下しづらすぎた．モード変換は慣れるまでが大変そうでなんともいえない．Emacs から Vim に乗り換えるかといわれると，おそらく Emacs と Vim では根底にある思想が異なる気がする(Emacs は良き OS ，Vim は良き Editor，みたいな)し，どうだろう．いろいろ言っているけど，別に Emacs が嫌いになったわけではないので，本格的に乗り換えるのは(今の所は)ないかな．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac使ってた人がWin使ってみたときのメモ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/06/18/win/"/>
    <updated>2015-06-18T19:21:44+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/06/18/win</id>
    <content type="html"><![CDATA[<p>普段使いは OS X だったんだけど，Winを利用しなきゃならない場面があったので，使いやすくするためにやったことをメモしておく．<br>
ちなみに Windows 7, 8 の話．</p>

<!-- more -->

<h1>つまりどうするのか</h1>

<ul>
<li>zsh つかいたい</li>
<li>Emacs つかいたい</li>
<li>ブラウザでも Emacs ライクなキーバインドつかいたい</li>
</ul>

<p>あまり大したことはしない．</p>

<h2>キーバインド</h2>

<p>Caps lock を Ctrl にするために，Ctrl2capを利用した．<br>
Ctrl は Capslock にはならないので注意．</p>

<ul>
<li>つかいかた

<ul>
<li>インストール

<ul>
<li><code>ctrl2cap /install</code></li>
</ul></li>
<li>アンインストール

<ul>
<li><code>ctrl2cap /uninstall</code></li>
</ul></li>
</ul></li>
</ul>

<p>インストールしたらインストール．</p>

<blockquote>
<p><a href="https://technet.microsoft.com/ja-jp/sysinternals/bb897578.aspx">Ctrl2cap - TechNet - Microsoft</a></p>
</blockquote>

<h2>Webブラウザ</h2>

<h3>Chrome？</h3>

<p>とりあえず，拡張機能をいくつかいれてみる．</p>

<ul>
<li>keyconfig</li>
<li>gleeBox</li>
</ul>

<p>Ctrl と command が同じ意味合いになっていて使いづらいので，<br>
keyconfigをいれてみた．なかなかいいぞこれは&#8230;</p>

<ul>
<li>ちなみにgleeBox のいろは

<ul>
<li>g : gleeBoxの起動</li>
<li>Alt-g : フォーカスがテキストにある場合の gleeBox の起動</li>
<li>. : タブマネージャの起動(chrome限定)</li>
<li>?img : イメージ要素選択</li>
<li>?? : 入力フィールド選択</li>
</ul></li>
</ul>

<p>しかし，行頭にもってくる<code>Ctrl+a</code>や前方削除の<code>Ctrl+h</code>のキーバインドが，全選択や履歴へのキーバインドになってしまう．Mac では Ctrl と Command でそこらへんの使い分けができていたけど，Win だとどちらも Ctrl だからだね．</p>

<h3>Firefox + keySnail</h3>

<p>emacs 使いには Firefox + keySnail が良いとの噂を聞きつけ，導入してみることにした．<br>
gleeBox が利用できないのが残念だ．</p>

<ul>
<li>keySnail

<ul>
<li>FireFox のアドオン</li>
<li>F1 + b でショートカット一覧が見れる</li>
</ul></li>
<li>プラグイン

<ul>
<li>bmany</li>
<li>Tanything</li>
<li>HoK</li>
</ul></li>
</ul>

<p>少し使ってみた感じ，HoK はなかなか気に入った．</p>

<blockquote>
<p><a href="http://nenono.hatenablog.com/entry/2015/04/02/160721">FireFox + KeySnail でEmacsキーバインドなWebブラウジング環境を作った話</a></p>
</blockquote>

<h2>ランチャー</h2>

<p>Executer というのをいれる．<br>
<code>Alt + Space</code>で起動できるようにすればおｋかな．ショートカットも追加できるのがgood．</p>

<blockquote>
<p><a href="http://executor.dk/">Welcome to Executor</a></p>
</blockquote>

<h2>アプリケーション切り替え</h2>

<p><code>Alt + Tab</code> で Mac の <code>Command + Tab</code> ができます．</p>

<h2>画面分割</h2>

<p>Mac では Spectable を利用していたけど，Win はデフォルトのキーバインドでできる．いいね．</p>

<ul>
<li><code>Win + →</code> : 右半分</li>
<li><code>Win + ←</code> : 左半分</li>
<li><code>Win + ↑</code> : 最大化</li>
<li><code>Win + ↓</code> : 最小化</li>
</ul>

<h2>シェル環境を整える</h2>

<p>ここが貧弱というのがよく聞く話なので，色々調べてみる．</p>

<p>Babun というものが良いという噂をすこし耳にする．</p>

<blockquote>
<p><a href="https://github.com/babun/babun">babun/babun</a><br>
<a href="http://qiita.com/syui/items/2c51a33a3ca82999bea2">Windowsのターミナル環境を整える vol.1</a><br>
<a href="http://blog.drikin.com/2015/01/windows-2.html">Windowsはターミナルがダメだから使えないってのは過去の話?</a></p>
</blockquote>

<p>以下の公式からダウンロードし，<code>install.bat</code> を実行すると，ホームディレクトリの <code>.babun</code> 以下にインストールされる．アンインストールの際にはこれを削除すればよいらしい．</p>

<blockquote>
<p><a href="http://babun.github.io/">Babun - a windows shell you will love!</a></p>
</blockquote>

<h3>emacs</h3>

<p>Babun では，<code>pact</code>と呼ばれるパッケージマネージャが利用されているらしい．<code>apt-get</code>や<code>yum</code>と同じような役割だ．とりあえず，Emacs がほしいのでインストールしておく．<br>
babun を立ち上げて，以下を実行．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pact install emacs</span></code></pre></td></tr></table></div></figure>

<h3>Chocolatey</h3>

<p>Mac で利用していた Homebrew のようなもの．<br>
ただし，アンインストールはインストールした各アプリケーションに従って主導で行う必要がある．</p>

<p><a href="http://yuukiar.co/blog/2015/04/04/windows-chocolatey/">ここ</a>を参考に，コマンドプロンプトを管理者権限で実行し，以下を実行すると，インストールされると共にパスが通る．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@powershell -NoProfile -ExecutionPolicy unrestricted -Command "(iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))) &gt;$null 2&gt;&1" && SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin</span></code></pre></td></tr></table></div></figure>

<p>バージョンの確認ができればOK．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;clist -lo
</span><span class='line'>Chocolatey v0.9.9.6
</span><span class='line'>0 packages installed.</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p><a href="http://yuukiar.co/blog/2015/04/04/windows-chocolatey/">Windows 7でパッケージ管理システム「Chocolatey」を導入する</a></p>
</blockquote>

<h3>Cask</h3>

<p>自分はGithubに<code>.emacs.d</code>をあげているので，こちらもダウンロードする．Cask を利用しているので，まずは動作のために Python2 をいれる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>choco install python2</span></code></pre></td></tr></table></div></figure>

<p><code>chocolateyInstall.ps1</code> スクリプトを実行するか？聞かれるので <code>yes</code> を選択．</p>

<p>また，Caskインストールのために<code>curl</code>をインストール．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>choco install curl</span></code></pre></td></tr></table></div></figure>

<p>そして，<strong>管理者権限として実行した</strong> babun上から Cask をインストール．<a href="http://cask.readthedocs.org/en/latest/guide/installation.html#manual-installation">公式サイト</a>より．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python</span></code></pre></td></tr></table></div></figure>

<p>ホームディレクトリ下にダウンロードされる．<br>
zsh を利用するので，<code>.zprofile</code>に以下を追加．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=$PATH:/home/ユーザ名/.cask/bin</span></code></pre></td></tr></table></div></figure>

<p>あとは，<code>cask install</code> でOK．</p>

<blockquote>
<p><a href="http://knjname.hateblo.jp/entry/2014/12/08/035828">WindowsでEmacsのClojure開発環境を立ち上げる</a></p>
</blockquote>

<h3>シンボリックリンク</h3>

<p>Win のコマンドプロンプトを管理者権限で実行し，<code>mklink</code>を利用することでシンボリックリンクを張れる．babunのホームディレクトリは<code>C:\Users\ユーザ名\.babun\cygwin\home\ユーザ名\</code>になっているはず(なんだそれは&#8230;)．Cドライブ以下にアクセスするためには，<code>/cygdrive/c</code>以下にアクセスする必要があるそうだ．よくわからないので，勉強したほうがいいかも&#8230;<br>
とりあえずは快適な利用のために，利用したいディレクトリのシンボリックリンクをCygwinのホーム直下に張っておきたい．使い方は以下．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mklink リンク ターゲット</span></code></pre></td></tr></table></div></figure>

<p>ディレクトリのシンボリックリンクを作成したい場合は<code>\D</code>オプションをつける．また，フルパスで指定しないとうまくいかない．<br>
自分は，マイドキュメントとDropboxのシンボリックリンクを張っておいた．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mklink /D C:/Users/ユーザ名/.babun/cygwin/home/ユーザ名/Dropbox C:/Users/ユーザ名/dropbox</span></code></pre></td></tr></table></div></figure>

<p>好きなものを張っておく．</p>

<blockquote>
<p><a href="http://qiita.com/opengl-8080/items/c2b6a93dfca5b61f9e6a">Windowsでハードリンクやシンボリックリンクを作成する</a><br>
<a href="https://sites.google.com/site/hymd3a/cygwin#TOC-2011-11-24-">cygwin - ひゃまだのブログ</a></p>
</blockquote>

<h3>.zshrc</h3>

<p>babun はデフォルトで oh-my-zsh がインストール済だけど，自分は個人用設定を共有したかったので，これは使わない．<br>
<code>.zshrc</code>をMac/Win間で共有するために，ホーム直下に<code>.dotfiles</code>というディレクトリを置き，Gitの管理下に置いたうえで，中身の<code>.zshrc</code>からシンボリックリンクを張っておいた．</p>

<p>ここで，<code>.zshrc</code>を置き換えると，以下のようなエラーが発生．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ignore insecure directories and continue [ny]?</span></code></pre></td></tr></table></div></figure>

<p>どうやら，パーミッション関係の問題らしい．<a href="http://www.wezm.net/technical/2008/09/zsh-cygwin-and-insecure-directories/">こちら</a>を参考にパーミッションの設定をし直す．babun を管理者権限で立ち上げ，以下を実行した．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod g-w /usr/share/zsh/site-functions /usr/share/zsh/5.0.6/functions /usr/share/zsh /usr/share/zsh/5.0.6
</span><span class='line'>$ compaudit</span></code></pre></td></tr></table></div></figure>

<h3>フォント</h3>

<p>Rictyフォントがお気に入りなんだけど，合成だのなんだのは面倒なので，<code>Ricty Diminished</code>を利用する．<a href="https://github.com/yascentur/RictyDiminished">yascentur/RictyDiminished</a>からZIPをダウンロードし，フォントをインストールする．</p>

<p>その後，Babunに設定する．Babun は Mintty というコンソールを利用しています．なので，Mintty の設定をいじろう．設定ファイルの場所は<code>~/home/ユーザ名/.minttyrc</code>にある．ここでフォントの種類やサイズを設定する．ウインドウの透過度も決められます．</p>

<p>設定のための<a href="http://mintty.googlecode.com/svn-history/r1065/trunk/docs/mintty.1.html">マニュアル</a>を参考にするとよい．</p>

<blockquote>
<p><a href="http://qiita.com/d9magai@github/items/b988f4c881cfa1261512">Cygwinのターミナルエミュレータminttyの導入</a><br>
<a href="https://121ware.com/qasearch/1007/app/servlet/relatedqa?QID=012622">Windows 7でインストール済みのフォント一覧を表示する方法</a><br>
<a href="http://nelog.jp/how-to-use-ricty-diminished-font">見やすいプログラミング用フォント「Ricty Diminished」をWindowsにインストールしてSublime Textで利用する方法</a></p>
</blockquote>

<h2>その他</h2>

<p><code>sudo</code> したいんだけど，なんとかならないかなぁ，とか．</p>

<blockquote>
<p><a href="http://unavoidablereset.blog.fc2.com/blog-entry-15.html">cygwinでsudo解決編 - バグ#予想不可能回避不可能</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリケーションの実行時の振る舞いについて]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/30/ios-02/"/>
    <updated>2015-05-30T11:18:52+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/30/ios-02</id>
    <content type="html"><![CDATA[<p>iOSアプリケーションの構造がよくわからなかったので，とりあえず実行時の振る舞いから理解していくためのまとめ．</p>

<!-- more -->

<p>以下の初心者用ガイドを一通りやった．</p>

<blockquote>
<p><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/">Start Developing iOS Apps Today: Setup - Apple Developer</a></p>
</blockquote>

<p>ちなみに，上記サイトの使用言語は Swift ではなく Objective-C．</p>

<h2>1. アプリケーション実行時の振る舞い</h2>

<p>アプリケーション起動時にはどのようなことが起きるのだろうか？Swift でも Objective-C でも，記述方法が違うだけでやってることは同じはずなので，結局何をしているのか？を公式ドキュメントから抽出してみる．</p>

<h3>やっていること</h3>

<p><code>UIApplicationMain</code>関数が呼び出され，以下の2つのインスタンスが生成される．</p>

<ul>
<li><code>UIApplication</code>クラスのインスタンス生成(<strong>application object</strong>)

<ul>
<li>イベントループを開始する</li>
<li>アプリケーションの基盤となる</li>
</ul></li>
<li><code>AppDelegate</code>クラスのインスタンス生成(<strong>app delegate</strong>)

<ul>
<li>コンテンツ描画のためのウインドウを管理する</li>
<li>状態遷移を管理する</li>
</ul></li>
</ul>

<p><em>application object</em> が <em>app delegate</em> 上に定義されたメソッドを呼び出し，記述されたコードを実行する．コードを見てみると，<code>UIApplicationMain</code>関数に<code>AppDelegate</code>クラスが渡され，紐づけられているようだ．</p>

<h2>2. App Delegate について</h2>

<p>アプリケーションを開発する上で関わりが深いのは<code>AppDelegate</code>だろう．初心者用ガイドに書かれていたことをメモしておく．</p>

<h3>window 属性</h3>

<p>コンテンツが描画されるウインドウが格納される</p>

<h3>重要メソッドのスケルトン</h3>

<p>アプリケーションが特殊な状態に陥った場合&#8230;アプリケーションの実行時，メモリ不足時，アプリケーション終了時など&#8230;には，<em>application object</em> が <em>app delegate</em> 内の対応したメソッドが呼び出す．デフォルトでは，対応した各メソッドのスケルトンが定義されている．これらの中身が空，もしくは削除されている場合には，デフォルトの振る舞いが呼び出される．必要に応じて記述すれば良い．</p>

<h2>3. Objective-C と Swift での違いについて</h2>

<p>開発言語は Swift を使用する予定だけど，気になったのでメモしておく．実行時の振る舞いに関係する各ソースコードを示したのちに，その違いについて考えてみる．各ソースコードは，Xcode で Single View Application を作成した時のテンプレ．中略の部分は，スケルトンコードが書かれていた部分．</p>

<h3>Objective-C</h3>

<p><code>AppDelegate</code>が定義されたファイルの他に，<code>main.m</code>がある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Objective-C'><span class='line'><span class="c1">//////////</span>
</span><span class='line'><span class="c1">// main.m</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;AppDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// UIApplicationMain関数に，AppDelegateクラスを渡している．</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////////////////</span>
</span><span class='line'><span class="c1">// AppDelegate.h</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AppDelegate</span> : <span class="bp">UIResponder</span> <span class="o">&lt;</span><span class="bp">UIApplicationDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////////////////</span>
</span><span class='line'><span class="c1">// AppDelegate.m</span>
</span><span class='line'><span class="cp">#import &quot;AppDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AppDelegate</span> <span class="p">()</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">AppDelegate</span>
</span><span class='line'><span class="c1">// 中略</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Swift</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">/////////////////////</span>
</span><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Main関数の自動実装？</span>
</span><span class='line'><span class="p">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="k">class</span> <span class="nl">AppDelegate</span><span class="p">:</span> <span class="bp">UIResponder</span><span class="p">,</span> <span class="bp">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">window</span><span class="p">:</span> <span class="bp">UIWindow</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSObject</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 中略</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Objective-C では，単純に<code>UIApplicationMain</code>関数に<code>AppDelegate</code>クラスを渡しているが，Swift の<code>@UIApplicationMain</code>とはなんなのか？<br>
探してみると，同じ疑問を抱いている人がいた．</p>

<blockquote>
<p><a href="http://stackoverflow.com/questions/24516250/what-does-uiapplicationmain-mean">swift - What does &quot;@UIApplicationMain&quot; mean? - Stackoverflow</a></p>
</blockquote>

<p>そもそも，iOSアプリケーションにおける<code>main</code>関数の主な役割は以下の2つである．</p>

<ul>
<li>C プログラムの入り口になる</li>
<li><code>UIApplicationMain</code>関数の呼び出し</li>
</ul>

<p>要は，<code>UIApplicationMain</code>関数と<code>AppDelegate</code>クラスをひもづけられれば良いようだ．これを実現するために，Swift では <strong>Attributes</strong> が用いられている．</p>

<p>Attributes とは定義や型に関して情報を補足するもので，先頭に<code>@</code>を付加して記述する．</p>

<blockquote>
<p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html">Attributes - iOS Developer Library</a></p>
</blockquote>

<p>公式ドキュメントでは，<code>UIApplicationMain</code> attirbute について以下のように記述されている．</p>

<blockquote>
<p>UIApplicationMain<br>
Apply this attribute to a class to indicate that it is the application delegate. Using this attribute is equivalent to calling the UIApplicationMain function and passing this class’s name as the name of the delegate class.</p>
</blockquote>

<p>まとめると&#8230;</p>

<ul>
<li><code>UIApplicationMain</code> attributes は<code>AppDelegate</code>クラスに付加する</li>
<li><code>UIApplicationMain</code> 関数を呼び出せる</li>
<li>付加されたクラスのクラス名を，<code>delegate class</code> のクラス名として登録する</li>
</ul>

<p>つまり，Objective-C における Main 関数と同等に振る舞うということらしい．ちなみに，この attributes を利用する代わりに<code>main.swift</code>を作成することもできるそうだ．</p>

<p>同じことをやっていることはわかっていたけど，やっぱり公式ドキュメントに記述を発見できたり，明確な理由付けができると，落ち着く．</p>

<h2>参考</h2>

<blockquote>
<p><a href="http://qiita.com/shu223/items/437d9a9a3502800a891b">Objective-C で書いたアプリを Swift で書き換える5ステップ - Qiita</a><br>
<a href="http://tomoyaonishi.hatenablog.jp/entry/2015/03/22/144246">SwiftのAttributesをまとめた。 - tomoyaonishiのブログ</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift] 関数とクロージャについて]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/29/swift-func/"/>
    <updated>2015-05-29T15:46:10+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/29/swift-func</id>
    <content type="html"><![CDATA[<p>クロージャって何？？？と思ったので．</p>

<!-- more -->

<h2>関数</h2>

<p>クロージャについてまとめる前に，まず関数について理解する．</p>

<h3>定義</h3>

<p><code>func</code>で宣言し，返り値は<code>-&gt;</code>を用いる．<br>
返り値は複数指定可能．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">testFunc</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nl">first</span><span class="p">:</span><span class="n">Int</span><span class="p">,</span> <span class="nl">second</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span><br>
</span><span class='line'><span class="p">}</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<h3>特徴</h3>

<p>Swiftの関数には以下の特徴がある．</p>

<ol>
<li>可変数の引数を指定可能</li>
<li>ネストして宣言可能</li>
<li>引数に指定可能</li>
<li>返り値に指定可能</li>
</ol>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">// 1. 可変数の引数を指定可能</span>
</span><span class='line'><span class="c1">//    引数を配列で指定できる．</span>
</span><span class='line'><span class="k">func</span> <span class="nf">sumOf</span><span class="p">(</span><span class="nl">numbers</span><span class="p">:</span> <span class="n">Int</span><span class="p">...)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>        <span class="c1">// 21</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">597</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>   <span class="c1">// 651</span>
</span><span class='line'>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">// 2. ネストして宣言可能</span>
</span><span class='line'><span class="c1">//    ネストした関数は，外の関数の変数にアクセス可能</span>
</span><span class='line'><span class="k">func</span> <span class="n">returnFifteen</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">add</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">+=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">add</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">returnFifteen</span><span class="p">()</span>     <span class="c1">// 15</span>
</span><span class='line'>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">// 3. 引数に指定可能</span>
</span><span class='line'><span class="c1">// 数値のリストと条件となる関数を与えると，</span>
</span><span class='line'><span class="c1">// 条件にマッチした数値がリスト内に存在するか調べる関数．</span>
</span><span class='line'><span class="k">func</span> <span class="n">hasAnyMatches</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">],</span> <span class="nl">condition</span><span class="p">:</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">conition</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 10より小さい値ならば true</span>
</span><span class='line'><span class="k">func</span> <span class="n">lessThanTen</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span>
</span><span class='line'><span class="n">hasAnyMathces</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">lessThanTen</span><span class="p">)</span>    <span class="c1">// true</span>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span>
</span><span class='line'><span class="n">hasAnyMathces</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">lessThanTen</span><span class="p">)</span>    <span class="c1">// false</span>
</span><span class='line'>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">// 4. 返り値に指定可能</span>
</span><span class='line'><span class="k">func</span> <span class="n">makeIncrementer</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ネストした関数</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">addOne</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// ネストして宣言された関数をそのまま返す</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">addOne</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>クロージャとは？</h2>

<p>実行可能なコードブロックのこと&#8230;?<br>
一言で言い表そうとすると難しい．公式では，<code>関数は再利用が可能な特別なクロージャである．</code>と言われている．</p>

<h3>宣言</h3>

<p>とりあえず，書き方を見てみる．<br>
名前が省略可能で，<code>{}</code>で囲んで記述する．引数と返り値の後に<code>in</code>を記述してから本体を記述する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// クロージャ</span>
</span><span class='line'><span class="k">var</span> <span class="nl">greetClosure</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span>
</span><span class='line'><span class="n">paramClosure</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 関数でも同様の振る舞いを定義をしてみる</span>
</span><span class='line'><span class="k">func</span> <span class="n">greetFunc</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 実行結果はどちらも変わらない．</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">greetClosure</span><span class="p">(</span><span class="s">&quot;tasuwo&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">greetFunc</span><span class="p">(</span><span class="s">&quot;tasuwo&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>これだけだと，クロージャの意味がイマイチわからない．つまり，なぜ関数じゃダメなのか？<br>
自分なりの解釈だが，クロージャの良い点は<strong>複数の処理の記述をコンパクトにまとめられること</strong>なのではと思う．<br>
例えば，<code>map</code>を例にとって考える．<br>
<code>map</code>はクロージャを引数にとり(つまり，関数を与えても問題はない)，配列の各値にその関数を適用・変換する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">numArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="c1">// 配列の各値を三倍にする</span>
</span><span class='line'><span class="n">numArray</span><span class="p">.</span><span class="n">map</span><span class="p">({</span>
</span><span class='line'>    <span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<p>クロージャは，引数や返り値の型が自明である時，その指定を省略可能である．また，返り値が1つに減退されている場合には，<code>return</code>も記述しなくて良い．<br>
よって，以下のように記述を省略できる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">numArray</span><span class="p">.</span><span class="n">map</span><span class="p">({</span>
</span><span class='line'>    <span class="n">number</span> <span class="k">in</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<p>記述がかなりコンパクトになったし，何をしているのかも一目見れば大体わかる．<br>
また，第二引数を以下のように外に出す書き方もできるそうだ．自分はこれを知らなくて，以下のような記述を見るたびに(なんだこれは&#8230;?)と頭をひねっていた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">numArray</span><span class="p">.</span><span class="n">map</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">number</span> <span class="k">in</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>もう一つの例を見てみる．<br>
<code>sorted</code>は，与えられた配列を並び替える．クロージャを引数にとると，その内容に従って並び替える．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">numArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">sortedNum</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">numArray</span><span class="p">){</span>
</span><span class='line'>    <span class="p">(</span><span class="nl">str1</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">str2</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">str1</span> <span class="o">&gt;</span> <span class="n">str2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>引数，返り値の型と，<code>return</code>を省略する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">sortedNum</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">numArray</span><span class="p">){</span>
</span><span class='line'>    <span class="n">str1</span><span class="p">,</span> <span class="n">str2</span> <span class="k">in</span> <span class="n">str1</span> <span class="o">&gt;</span> <span class="n">str2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>さらに，自分自身が引数となっている時，自身の引数を<code>$0,$1...</code>で記述可能．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">sortedNum</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">numArray</span><span class="p">){</span><span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これでかなり省略できる．</p>

<h1>参考文献</h1>

<blockquote>
<p><a href="http://qiita.com/yuinchirn/items/2ebb6fed6de0c9c1c3c9">Swift さくっと確認したい基礎文法 クロージャ(closure)<br>
</a><br>
<a href="http://qiita.com/mst/items/b18e9531ac0cbdf2f3c3">swift Sort関数とClosure</a><br>
<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html">A Swift Tour</a><br>
<a href="http://chicketen.blog.jp/archives/14886216.html">iOS Swiftのクロージャを使う</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift] Optional型まとめ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/29/swift/"/>
    <updated>2015-05-29T14:22:24+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/29/swift</id>
    <content type="html"><![CDATA[<p>Optional型がよくわからなかったのでまとめておく．<br>
定義のメモだけなので，使い方とかもそのうち追記していきたい．</p>

<!-- more -->

<h2>Optional型とは？</h2>

<p><strong>nil を許す型</strong>のこと．</p>

<h2>宣言</h2>

<p>型に<code>?</code>を付加すると，Optional型を宣言できる．<br>
ちなみに<code>T?</code>は<code>Optional&lt;T&gt;</code>のシンタックスシュガー．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">optionalSuger</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>           <span class="c1">// Optional型の宣言．初期値はnil．</span>
</span><span class='line'><span class="k">var</span> <span class="nl">optional</span><span class="p">:</span>      <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>  <span class="c1">// Int? と同じ意味</span>
</span><span class='line'><span class="k">var</span> <span class="nl">notOptional</span><span class="p">:</span>   <span class="n">Int</span>            <span class="c1">// 非Optional型．初期値は空(nilですらない)</span>
</span></code></pre></td></tr></table></div></figure>

<h2>wrap と unwrap</h2>

<p><code>T</code>と<code>T?</code>は違う型．<br>
同様に扱うためには<strong>unwrap</strong>する必要がある．</p>

<ul>
<li><strong>unwrap</strong>とは？

<ul>
<li>Optional<T>型から<code>T</code>型の変数を取り出すこと．</li>
</ul></li>
</ul>

<p><strong>unwrap</strong>の方法には以下の4種類がある．</p>

<ol>
<li>Forced unwrapping</li>
<li>Optional Chaining</li>
<li>Optional Binding</li>
<li>比較演算子</li>
</ol>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// Optional型の宣言</span>
</span><span class='line'><span class="k">class</span> <span class="n">Dog</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">bark</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;BowWow!&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="nl">wrappedDog</span><span class="p">:</span> <span class="n">Dog</span><span class="o">?</span> <span class="o">=</span> <span class="n">Dog</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// 1. Forced Unwrapping</span>
</span><span class='line'><span class="c1">//    「!」を付加する．</span>
</span><span class='line'><span class="c1">//    値が nil だった場合はランタイムエラー．</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">wrappedDog</span><span class="o">!</span><span class="p">.</span><span class="n">bark</span><span class="p">)</span>           <span class="c1">// &quot;BowWow!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// 2. Optional Chaining</span>
</span><span class='line'><span class="c1">//    「?」を付加する</span>
</span><span class='line'><span class="c1">//    値が nil だった場合は nil を返す．</span>
</span><span class='line'><span class="c1">//    最終的な戻り値は Optional型 となる．</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">wrappedDog</span><span class="o">?</span><span class="p">.</span><span class="n">bark</span><span class="p">())</span>         <span class="c1">// Optional(&quot;BowWow!&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// 3. Optional Binding</span>
</span><span class='line'><span class="c1">//    if，while 等の条件式内で宣言，代入されると unwrap される．</span>
</span><span class='line'><span class="c1">//    値が nil の場合は条件式が false となる．</span>
</span><span class='line'><span class="k">if</span> <span class="k">var</span> <span class="n">unwrappedDog</span> <span class="o">=</span> <span class="n">wrappedDog</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">unwrappedDog</span><span class="p">.</span><span class="n">bark</span><span class="p">())</span>    <span class="c1">// &quot;BowWow!&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// 4. 比較演算子</span>
</span><span class='line'><span class="c1">//    比較演算子を使うと unwrap される．</span>
</span><span class='line'><span class="k">var</span> <span class="nl">wrappedInt</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">wrappedInt</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>            <span class="c1">// &quot;true&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Implicitly Unwrapped Optional型とは？</h2>

<p>型に<code>!</code>を付加すると，Implicitly Unwrapped Optional型を宣言できる．<br>
ちなみに<code>T!</code>は<code>ImplicitlyUnwrappedOptional&lt;T&gt;</code>のシンタックスシュガー．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">iuOptionalSuger</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>                              <span class="c1">// Implicitly Unwrapped Optional型の宣言．初期値はnil．</span>
</span><span class='line'><span class="k">var</span> <span class="nl">iuOptional</span><span class="p">:</span>      <span class="n">ImplicitlyUnwrappedOptional</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>  <span class="c1">// Int! と同じ意味</span>
</span><span class='line'><span class="k">var</span> <span class="nl">Optional</span><span class="p">:</span>        <span class="n">Int</span><span class="o">?</span>                              <span class="c1">// Optional型</span>
</span><span class='line'>
</span><span class='line'><span class="n">iuOptional</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Optional</span>   <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 自動的に unwrap される．</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">iuOptional</span><span class="p">)</span>    <span class="c1">// &quot;1&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">Optional</span><span class="p">)</span>      <span class="c1">// &quot;Optional(1)&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>比較演算子：??</h2>

<p>nil かどうか判定する比較演算子．<br>
<code>a ?? b</code>は<code>a != nil ? a! : b</code>のシンタックスシュガー．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">wrappedInt</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'><span class="n">ptinrln</span><span class="p">(</span><span class="n">wrappedInt</span> <span class="o">??</span> <span class="mi">2</span><span class="p">)</span>    <span class="c1">// &quot;2&quot;</span>
</span><span class='line'><span class="n">wrappedInt</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">wrappedInt</span> <span class="o">??</span> <span class="mi">2</span><span class="p">)</span>    <span class="c1">// &quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h1>参考サイト</h1>

<blockquote>
<p><a href="http://qiita.com/cotrpepe/items/518c4476ca957a42f5f1">Swift Optional 型についてのまとめ Ver2</a><br>
<a href="http://qiita.com/koher/items/c6f446bad54442a28bf4">SwiftのOptional型を極める</a></p>
</blockquote>
]]></content>
  </entry>
  
</feed>
