<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tasuwo blog]]></title>
  <link href="http://tasuwo.github.io/atom.xml" rel="self"/>
  <link href="http://tasuwo.github.io/"/>
  <updated>2016-04-03T21:17:07+09:00</updated>
  <id>http://tasuwo.github.io/</id>
  <author>
    <name><![CDATA[tasuwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TCPサーバ/クライアントを車輪の再発明する]]></title>
    <link href="http://tasuwo.github.io/blog/2016/04/02/tcp-server/"/>
    <updated>2016-04-02T12:51:38+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/04/02/tcp-server</id>
    <content type="html"><![CDATA[<p>TCP Server/Client を車輪の再発明することで，ネットワーク通信の下の方を勉強してみようという試み．ついでに用語の整理もしてみます．</p>

<!-- more -->

<h2>Stream</h2>

<p><em>stream</em> を使用しない場合のデータのよみ出しは，<code>read_block()</code> というシステムコールによって以下のように行える．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'><span class="n">read_block</span><span class="p">(</span><span class="s">&quot;hello.c&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">256</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>上記では，<code>hello.c</code> の先頭から32byte目から256bytes分読み込まれる．つまり，固定の範囲(ブロック)でデータにランダムにアクセスできる．</p>

<p>上記方法は，扱う対象がメモリやハードディスク上であれば同様の処理で十分だが，例えばキーボードからの入力等を読み込む場合には適さない．前者のようなデバイスを <strong><em>block device</em></strong> ．後者のようなデバイスを <strong><em>character device</em></strong> という．</p>

<ul>
<li><strong><em>block device</em></strong>

<ul>
<li>データにブロック単位でアクセス可能なデバイス．データのバッファリングやランダムアクセスが可能．</li>
<li>例: メモリ，ハードディスク</li>
</ul></li>
<li><strong><em>character device</em></strong>

<ul>
<li>データにbyte単位でアクセス可能なデバイス．データはバッファリングされず，ランダムアクセスもできない．</li>
<li>例: キーボード，マウス</li>
</ul></li>
</ul>

<p>2つのデバイスを同じシステムコールで扱うためには，使用するシステムコールを <em>character device</em> に合わせておけば良い．ここで使われている抽象化が <strong><em>stream</em></strong> である．</p>

<ul>
<li><strong><em>stream</em></strong>

<ul>
<li>データの供給元(ex: ハードディスク)と受け手(ex: プログラム)の間に入り，データの一時保存を行う抽象データ構造</li>
<li>1byte単位でデータを受け取り，FIFO方式で受け手に渡す</li>
</ul></li>
</ul>

<p><em>stream</em> の良いところは，<strong>供給元と受け手の転送量の違いを吸収できる</strong>部分．供給元は一度に100byteのデータを送信したいが受け手は一度に10byteしか受け取れない場合， <em>stream</em> は余った90byteを一時的に保存できる．</p>

<p><em>stream</em> を使用したデータのよみ出しは以下のように行える．open システムコールによって OS によみ出し開始を通知し，同時に <em>stream</em> の識別子である file descriptor を得る．それ以降は file descriptor を使用して read，write システムコールによって読み書きを行い，close によって終了する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">char</span> <span class="n">buffer0</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">buffer1</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;hello.c&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">,</span> <span class="mh">0x666</span><span class="p">);</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer0</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer1</span><span class="p">,</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'><span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Socket</h2>

<p>TCP/IPによるネットワーク通信も，結局はデータのやりとりなので， <em>stream</em> の概念を流用できるとわかりやすい．しかしそのまま適用はできなかったので，特別な <em>stream</em> として <strong><em>socket</em></strong> を定義した．socket は通常の <em>stream</em> と異なり，作成時には open ではなく socket システムコールを使用する．また，作成時の処理が多少複雑になっている．</p>

<h2>TCP socket</h2>

<p>TCPによる通信では以下の約束事がある．</p>

<ul>
<li>メッセージが届いたかチェックし，届いてなければ再送する</li>
<li>到着順序は保障されている</li>
<li>それが失敗した場合はエラーになることが保障されている</li>
</ul>

<p>TCP通信用の socket の作成方法は以下の通り．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">socket_df</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>第一引数は<strong>アドレスファミリ</strong>を表している．アドレスファミリとは，socket が使用するアドレス体系のこと．よく使用されるのは以下．</p>

<table><thead>
<tr>
<th>アドレスファミリ</th>
<th>内容</th>
</tr>
</thead><tbody>
<tr>
<td>AF_INET</td>
<td>IPv4用</td>
</tr>
<tr>
<td>AF_INET6</td>
<td>IPv6用</td>
</tr>
<tr>
<td>AF_UNIX</td>
<td>ローカルなプロセス間通信用</td>
</tr>
<tr>
<td>AF_PACKET</td>
<td>デバイスレベルのパケットインタフェース</td>
</tr>
</tbody></table>

<p>第二引数は<strong>ソケットタイプ</strong>を表している．ソケットタイプはソケットの性質を表しており，Linuxで使用可能な代表的なものは以下．</p>

<table><thead>
<tr>
<th>ソケットタイプ</th>
<th>解説</th>
</tr>
</thead><tbody>
<tr>
<td>SOCK_STREAM</td>
<td>順序性，信頼性を備え双方向接続された byte stream を提供する</td>
</tr>
<tr>
<td>SOCK_DGRAM</td>
<td>データグラム(接続，信頼性なし，固定最大長メッセージ)をサポートする</td>
</tr>
</tbody></table>

<p>第三引数は使用するプロトコルを表す．0にしておくとデフォルトのものが使用される．基本的には上記二つの組み合わせによって通信方式が決定される．例えば，以下のように．</p>

<table><thead>
<tr>
<th>アドレスファミリ</th>
<th>ソケットタイプ</th>
<th>通信方式</th>
</tr>
</thead><tbody>
<tr>
<td>AF_INET</td>
<td>SOCK_STREAM</td>
<td>IPv4 + TCP</td>
</tr>
<tr>
<td>AF_INET6</td>
<td>SOCK_DGRAM</td>
<td>IPv6 + UDP</td>
</tr>
</tbody></table>

<h2>通信手順</h2>

<p>クライアントとサーバがそれぞれ以下の手順でシステムコールを呼び出し，通信する．クライアントサーバモデルは，同期方法が非対称的であり，サーバ側とクライアント側でプログラムが異なる．これは電話の呼び出し方式と似ている．</p>

<table><thead>
<tr>
<th>No</th>
<th>Client</th>
<th>Server</th>
</tr>
</thead><tbody>
<tr>
<td>1</td>
<td>socket(ソケット生成)</td>
<td>socket(ソケット生成)</td>
</tr>
<tr>
<td>2</td>
<td></td>
<td>bind(ポート指定)</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>listen(待ち受け)</td>
</tr>
<tr>
<td>4</td>
<td></td>
<td>accept(接続待ち)</td>
</tr>
<tr>
<td>5</td>
<td>connect(ソケット接続要求)</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>send(送信)</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td></td>
<td>recv(受信)</td>
</tr>
<tr>
<td>8</td>
<td></td>
<td>send(送信)</td>
</tr>
<tr>
<td>9</td>
<td>recv(受信)</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>shutdown(切断)</td>
<td>shutdown(切断)</td>
</tr>
<tr>
<td>11</td>
<td>close(ソケット切断)</td>
<td>close(ソケット切断)</td>
</tr>
</tbody></table>

<p>Client 側は socket 作成後，connect で同期を行う．この時，通信相手のサーバを引数(host名，port番号)で指定する．</p>

<p>Server 側は socket 作成後が多少複雑．socket は作成時点ではアドレスが割り当てられていないので，bindによってアドレスを割りあてる．この操作は伝統的に「ソケットに名前をつける」と呼ばれる．</p>

<p>ここでいうアドレスは，接続に必要なネットワーク層レベルの情報を保持する構造体として定義されている．保持する情報と定義は以下の通り．</p>

<ul>
<li>通信プロトコル</li>
<li>アドレス</li>
<li>ポート番号</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">sa_family_t</span>    <span class="n">sin_family</span><span class="p">;</span> <span class="cm">/* address family: AF_INET */</span>
</span><span class='line'>   <span class="kt">u_int16_t</span>      <span class="n">sin_port</span><span class="p">;</span>   <span class="cm">/* port in network byte order */</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">in_addr</span>  <span class="n">sin_addr</span><span class="p">;</span>  <span class="cm">/* internet address */</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Internet address. */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">in_addr</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">u_int32_t</span>      <span class="n">s_addr</span><span class="p">;</span>     <span class="cm">/* address in network byte order */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>bind 後，socket を passive socket(接続待ちソケット)，すなわちサーバ側の socket であることをOSに通知する．ここでいう passive socket とは，accept による接続要求を受け付けるのに使用するソケットのこと．accept では passive socket から接続要求を取り出し，それを元に接続済みソケットを作成し，その socket を参照する新しい file descriptor を返す．</p>

<p>なぜわざわざ passive socket を用意しているのかというと，通常サーバに対してクライアントは複数存在し，その要求をさばくためには接続要求をためておく stream が必要であるため．</p>

<p>通信終了時には close 処理を行うが，多少注意が必要．sockt は送信データが正しく受信したことを確認しないと破棄されないので，close しても即座に破棄はされない．一般には，サーバよりも先にクライアントを close すればよい．サーバ側から強制的に close したい時には，close の直前に以下を呼べば良い．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>もしくは bind の前に以下を設定する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">setsockopt</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>setsockopt</code> は，与えられた socket のオプションを設定するもので，以下のように定義されている．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">setsockopt</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span><span class="p">,</span> <span class="kt">int</span> <span class="n">optname</span><span class="p">,</span>
</span><span class='line'>               <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">optval</span><span class="p">,</span> <span class="kt">socklen_t</span> <span class="n">optlen</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>よく使われるオプションは <code>SO_REUSEADDR</code> であり，これを設定することで再度同じポート番号で bind できる．</p>

<h2>実装</h2>

<p>ネット上のいろいろを参考に TCP サーバを C++ で書いた．C++は全然書いたことない初心者なのでひどいコードになっているかもしれない&#8230;飽くまで学習用なので，あしからず．</p>

<script src="https://gist.github.com/tasuwo/18fa141e82da1f87901419eb78353f2a.js"></script>

<p>Server，Client の順で起動し，サーバ側から文字列を送信できる．実行結果は以下のような感じ</p>

<p><img src="http://tasuwo.github.io/images/tcp_connect.png" alt="tcp"></p>

<h2>参考</h2>

<p><a href="http://www.csg.ci.i.u-tokyo.ac.jp/%7Echiba/lecture/web/web01.html">Lecture Notes</a><br>
<a href="http://bg1.hatenablog.com/entry/2015/08/19/210000">setsockopt - 車輪のx発明 ~B.G&#39;s Blog~</a><br>
<a href="http://www.amazon.co.jp/Linux%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E3%81%82%E3%81%8D%E3%81%BF%E3%81%A1/dp/4797354526">Linuxネットワークプログラミング : あきみち : 本 : Amazon.co.jp</a><br>
<a href="http://kotaroito.hatenablog.com/entry/2014/01/31/224138">socket(2), bind(2), listen(2), accept(2) - kotaroito&#39;s notes</a><br>
<a href="http://myenigma.hatenablog.com/entry/20140308/1394252286">LinuxにおけるTCPソケット通信を利用したプロセス間通信(C++) - MyEnigma</a></p>

<!-- [TCP接続する時に使ういろいろな構造体の整理 - Qiita](http://qiita.com/0xfffffff7/items/6ffb317df8345070d0b5) -->

<!-- [Structure](http://www-cms.phys.s.u-tokyo.ac.jp/~naoki/CIPINTRO/NETWORK/struct.html) -->

<!-- [7.1 デバイス・ファイルについて](https://docs.oracle.com/cd/E39368_01/e48214/ol_about_devices.html) -->

<!-- [システムコールを理解する | UNIX world](http://curtaincall.weblike.jp/portfolio-unix/api.html) -->

<!-- [知ってトクするシステムコール（2）：システムコールと標準ライブラリ関数の違いを知る (1/2) - ＠IT](http://www.atmarkit.co.jp/ait/articles/1112/13/news117.html) -->

<!-- [ソケット通信メモ(Hishidama's TCP/UDP Socket Memo)](http://www.ne.jp/asahi/hishidama/home/tech/socket/) -->

<!-- [ソケット](http://research.nii.ac.jp/~ichiro/syspro98/socket.html) -->

<!-- [3 システムコール](http://akita-nct.jp/yamamoto/lecture/2007/2E/17th/html/node3.html) -->

<!-- [Linuxシステムコールの勉強(その１６) - Webプログラミングをしてみよう!!](http://d.hatena.ne.jp/web_develop/20071205/1196875088) -->

<!-- [socket - システムコールの説明 - Linux コマンド集 一覧表](http://kazmax.zpp.jp/cmd/s/socket.2.html) -->

<!-- [socket関数とプロトコル](http://www.fireproject.jp/feature/c-language/socket/basic.html) -->

<!-- [C言語:ソケット(Socket)でネットワークプログラム入門](http://www.geocities.jp/sugachan1973/doc/funto45.html) -->

<!-- [Lecture Notes](http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/lecture/web/web03.html) -->

<!-- [絵で見てわかるファイルディスクリプタ・パイプ・リダイレクト - あしのあしあと](http://d.hatena.ne.jp/higher_tomorrow/20110426/1303830417) -->

<!-- [C++と Pthreads でミニマルなHTTPサーバを書く - bkブログ](http://0xcc.net/blog/archives/000178.html) -->

<!-- http://yuuki.hatenablog.com/entry/2015-webserver-architecture -->

<!-- http://mattn.kaoriya.net/software/lang/c/20090729235933.htm -->

<!-- http://myenigma.hatenablog.com/entry/20140308/1394252286 -->

<!-- [socket() で使用するアドレス・ファミリー・プロトコル](https://publib.boulder.ibm.com/html/as400/v4r5/ic2962/info/RZAB6ADDFAM.HTM) -->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EmacsにおけるC,C++の環境を整える]]></title>
    <link href="http://tasuwo.github.io/blog/2016/03/04/c-c-plus-plus/"/>
    <updated>2016-03-04T21:47:12+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/03/04/c-c-plus-plus</id>
    <content type="html"><![CDATA[<p>大昔に取り組んでいた自作OS、せっかくなので再挑戦してみようと考えた．CLionとかそこらへんのIDEを使用しても良かったけれど，せっかくだからEmacs で C, C++ の環境を整えるたいので，メモしとく．<br>
基本的に<a href="https://tuhdo.github.io/c-ide.html">C/C++ Development Environment for Emacs</a>に全部書いてあったのでつまんでみる．</p>

<!-- more -->

<p>helm+helm-gtags もしくは ggtags を使う．<br>
自分は helm-gtags を使うことになるだろう．</p>

<h1>1.GTAGS</h1>

<p>プロジェクトのルートディレクトリで gtags コマンドを実行すると，以下のファイル群が生成されるはず．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/project/root
</span><span class='line'><span class="nv">$ </span>gtags
</span><span class='line'><span class="nv">$ </span>ls G*
</span><span class='line'>GPATH   GRTAGS  GTAGS
</span></code></pre></td></tr></table></div></figure>

<p>それぞれ以下の情報を保持している．</p>

<ul>
<li><strong>GTAGS</strong>  : 定義</li>
<li><strong>GRTAGS</strong> : 参照</li>
<li><strong>GPATH</strong>  : パス名</li>
</ul>

<h1>2.基本操作</h1>

<p>作業を快適にするために把握しておくべきEmacsにおける基本操作は以下</p>

<table><thead>
<tr>
<th>コマンド</th>
<th>コマンド名</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>C-M-f</td>
<td>forward-sexp</td>
<td>閉じカッコの前に行く</td>
</tr>
<tr>
<td>C-M-b</td>
<td>backward-sexp</td>
<td>閉じカッコの後ろに行く</td>
</tr>
<tr>
<td>C-M-k</td>
<td>kill-sexp</td>
<td>閉じカッコ内を削除する</td>
</tr>
<tr>
<td>C-M-<SPC>,C-M-@</td>
<td>mark-sexp</td>
<td>閉じカッコ内を選択する</td>
</tr>
<tr>
<td>C-M-a</td>
<td>beginning-of-defun</td>
<td>関数の前に行く</td>
</tr>
<tr>
<td>C-M-e</td>
<td>end-of-defun</td>
<td>関数の後ろに行く</td>
</tr>
<tr>
<td>C-M-h</td>
<td>mark-defun</td>
<td>関数を選択する</td>
</tr>
</tbody></table>

<h1>3.定義参照</h1>

<h2>3.1.バッファ内参照</h2>

<h3>ggtags-mode</h3>

<p>Imenuを使用する<br>
<code>(setq-local imenu-create-index-function #&#39;ggtags-build-imenu-index)</code></p>

<h3>helm</h3>

<p>moo-jump-localを使用する</p>

<h2>3.2.プロジェクト内参照</h2>

<h3>ggtags-mode</h3>

<table><thead>
<tr>
<th>コマンド</th>
<th>コマンド名</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>M-.</td>
<td>ggtags-finde-tag-dwim</td>
<td>・定義にポイントしていれば参照先を表示する<br>・参照にポイントしてれば定義を表示する<br>・include ヘッダーをポイントしていればそのヘッダーを表示する<br>・その他の場所であれば定義，参照一覧が表示され，絞り込みができる</td>
</tr>
<tr>
<td>M-,</td>
<td>pop-tag-mark</td>
<td>ジャンプ元へ戻る</td>
</tr>
<tr>
<td>M-n, M-p</td>
<td></td>
<td>候補内移動</td>
</tr>
<tr>
<td>M-g s</td>
<td></td>
<td>候補内検索</td>
</tr>
</tbody></table>

<h3>helm-mode</h3>

<table><thead>
<tr>
<th>コマンド</th>
<th>コマンド名</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>M-.</td>
<td>helm-gtags-dwim</td>
<td>ggtags-find-tag-dwim と一緒</td>
</tr>
<tr>
<td>M-,</td>
<td>tags-loop-continue</td>
<td>pop-tag-mark と一緒</td>
</tr>
<tr>
<td>C-j</td>
<td>helm-gtags-select</td>
<td>空白部分で M-. するのと一緒．定義や山椒を一覧から絞り込み&amp;ジャンプできる</td>
</tr>
</tbody></table>

<h1>4.参照元ジャンプ</h1>

<h3>gtags-mode</h3>

<p>ggtags-find-reference, ggtags-find-tag-dwimを使う</p>

<h3>helm-gtags</h3>

<table><thead>
<tr>
<th>コマンド</th>
<th>コマンド名</th>
<th>概要</th>
</tr>
</thead><tbody>
<tr>
<td>C-c g r</td>
<td>helm-gtags-find-rtag</td>
<td>・関数内で呼び出したら，その関数についての参照先を検索する<br>・関数名上で呼び出したら，参照先のリストを表示する<br>・変数名にポイントしていたら，なにもしない</td>
</tr>
<tr>
<td>C-c g s</td>
<td>htlm-gtags-find-symbol</td>
<td>変数名ポイント時に参照元を検索する</td>
</tr>
<tr>
<td>C-c g a</td>
<td>htlm-gtags-tagas-in-this-function</td>
<td>現在の関数が参照する関数一覧</td>
</tr>
</tbody></table>

<h1>5.ファイル検索</h1>

<h3>ggtags-mode</h3>

<p>ggtags-find-file</p>

<h3>helm-gtags</h3>

<p>helm-gtags-find-files</p>

<p>正直Projectile使ったほうが良いとのこと．</p>

<h1>6.過去に訪れたタグへジャンプ</h1>

<h3>ggatgs-mode</h3>

<p>ggtags-view-tag-history(C-c g h)</p>

<h3>helm-gtags</h3>

<p>helm-gtags-show-stack</p>

<h1>7.Speedbar</h1>

<p>ソースツリーを見れるパッケージ．ただのソースツリーではなくて，戻り値や関数なども一覧できるのが便利っぽい．</p>

<table><thead>
<tr>
<th>コマンド</th>
<th>操作</th>
</tr>
</thead><tbody>
<tr>
<td>SPC</td>
<td>子ノードを開く</td>
</tr>
<tr>
<td>RET</td>
<td>ノードを別ウインドウで開く</td>
</tr>
<tr>
<td>U</td>
<td>親ノードへ移動</td>
</tr>
<tr>
<td>n,p</td>
<td>ノードを上下移動</td>
</tr>
<tr>
<td>M-n,M-p</td>
<td>現在の階層内でノードを上下移動</td>
</tr>
<tr>
<td>b</td>
<td>Speedbarのバッファリストに戻る</td>
</tr>
<tr>
<td>f</td>
<td>ファイルリストに戻る</td>
</tr>
</tbody></table>

<h2>7.1.sr-speedbar</h2>

<p>Speedbarを便利にするパッケージ．</p>

<ul>
<li>起動/終了

<ul>
<li>sr-speedbar-open, sr-speedbar-toggle : 開く</li>
<li>sr-speedbar-cloe, sr-speedbar-toggle : 閉じる</li>
</ul></li>
<li>改善点

<ul>
<li>フレームの代わりにEmacs windowを使用する</li>
<li><code>C-x 1</code>でSpeedbarを除くすべてのウインドウを削除する</li>
<li><code>C-x o</code>でSpeedbarに移動するのを防ぐ(sr-speedbar-skip-other-window-pをtにする)</li>
</ul></li>
</ul>

<h1>8.Company-mode (補完)</h1>

<p>company-mode を使う．company-mode はEmacsのための補完フレームワーク．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>require <span class="s1">&#39;company)</span><br>
</span><span class='line'><span class="s1">(add-hook &#39;</span>after-init-hook <span class="err">&#39;</span>global-company-mode<span class="o">)</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<h2>8.2.使い方</h2>

<table><thead>
<tr>
<th>コマンド</th>
<th>操作</th>
</tr>
</thead><tbody>
<tr>
<td>M-n,M-p</td>
<td>候補移動</td>
</tr>
<tr>
<td>RET,TAB</td>
<td>候補決定</td>
</tr>
<tr>
<td>C-s,C-r,C-o</td>
<td>候補検索</td>
</tr>
<tr>
<td>M-(数値)</td>
<td>候補簡易選択</td>
</tr>
<tr>
<td><f1></td>
<td>選択中候補のドキュメントを表示</td>
</tr>
<tr>
<td>C-w</td>
<td>選択中候補のソースコード表示</td>
</tr>
</tbody></table>

<p><code>company-backends</code>で候補に使用するリソースを指定する．</p>

<h2>8.3.C言語の補完</h2>

<p>C言語でcompanyの補完を利用するためには，以下を記述する．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>delete <span class="s1">&#39;company-semantic company-backends)</span><br>
</span><span class='line'><span class="s1">(define-key c-mode-map  [(tab)] &#39;</span>company-complete<span class="o">)</span><br>
</span><span class='line'><span class="o">(</span>define-key c++-mode-map  <span class="o">[(</span>tab<span class="o">)]</span> <span class="err">&#39;</span>company-complete<span class="o">)</span><br>
</span></code></pre></td></tr></table></div></figure><br>
上記の設定では，<code>company-semantic</code>を削除している．理由は後述．<code>company-semantic</code>についてはCEDITの項で詳しく説明する．</p>

<p>companyの補完として，以下の二つが働く．</p>

<h3>8.3.1.company-clang</h3>

<p>補完候補の取得のために<code>clang</code>を使用する．プロジェクトではなく，ヘッダファイルによって補完を行う．デフォルトでは<code>company-clang</code>は<code>company-semantic</code>のサブセットであるため，上記設定を行っていれば他に特別な設定はいらない．<br>
上記せて血で<code>company-semantic</code>を削除したのは，そうしないと<code>company-complete</code>が<code>company-clang</code>ではなく<code>company-semantic</code>を使用してしまうため．これは，<code>company-backends</code>内の優先度がそうなっているため生じる．<br>
補完候補をプロジェクト内から取得するためには，<code>.dir-locals.el</code>をプロジェクトルートに配置する必要がある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">((</span><span class="no">nil</span> <span class="o">.</span> <span class="p">((</span><span class="nv">company-clang-arguments</span> <span class="o">.</span> <span class="p">(</span><span class="s">&quot;-I/home/&lt;user&gt;/project_root/include1/&quot;</span>
</span><span class='line'>                                     <span class="s">&quot;-I/home/&lt;user&gt;/project_root/include2/&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>

<p>helmを使っているなら，<code>C-x C-f</code>によるファイル検索中に，対象ファイル選択状態から<code>C-c i</code>によって絶対パスを挿入できる．<br>
<code>nil</code>を指定すると設定をすべてのサブディレクトリ，ファイルに適用し，<code>non-nil</code>であれば設定を適用するメジャーモードを指定できる．<code>company-clang-arguments</code>はインクルードパスを指定するリストである．</p>

<h3>8.3.2comapny-gtags</h3>

<p><code>GNU Global</code>の<code>GTAGS</code>から補完候補を取得する．プロジェクトによる補完を行うことができる．</p>

<h2>8.4.ヘッダーの補完</h2>

<p>プロジェクト内のヘッダーを補完したいなら，<code>company-c-headers</code>を使用する．以下のように<code>company-backends</code>に追加すれば良い．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;company-backends</span> <span class="ss">&#39;company-c-headers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>C++でヘッダーの補完を行いたいならば，パスを追加する必要がある．<code>company-c-header</code>はシステムのインクルードパスとして<code>/usr/include/</code>と<code>/usr/local/include/</code>しか含んでいない．例としては以下のように追加する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;company-c-headers-path-system</span> <span class="s">&quot;/usr/include/c++/4.8/&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h1>9.CEDET</h1>

<p>CEDETはCollection of Emacs Development Environment Toolsの略称．CEDETのデメリットは，Emacs Lispで書かれているため，Emacsのパフォーマンスに影響すること．23.2以降のEmacsにはマージされているので，インストールの必要はない．<br>
最新版は以下のようにダウンロードすれば良い．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
<span class='line-number'>4</span><br>
<span class='line-number'>5</span><br>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone <a href="http://git.code.sf.net/p/cedet/git">http://git.code.sf.net/p/cedet/git</a> cedet<br>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>cedet<br>
</span><span class='line'><span class="nv">$ </span>make <span class="c"># wait for it to complete</span><br>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>contrib<br>
</span><span class='line'><span class="nv">$ </span>make<br>
</span></code></pre></td></tr></table></div></figure><br>
Emacs からロードする．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nv">load-file</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">user-emacs-directory</span> <span class="s">&quot;/cedet/cedet-devel-load.el&quot;</span><span class="p">))</span><br>
</span><span class='line'><span class="p">(</span><span class="nv">load-file</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">user-emacs-directory</span> <span class="s">&quot;cedet/contrib/cedet-contrib-load.el&quot;</span><span class="p">))</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<h2>9.1.Semanticマイナーモード</h2>

<p><code>Semantic</code>は，ソースコードパーサを利用して構文を考慮した補完を行ってくれるパッケージ．</p>

<h3>9.1.1セットアップ</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;cc-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;semantic</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">global-semanticdb-minor-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-semantic-idle-scheduler-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">semantic-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>9.1.2.<code>semantic-mode</code></h3>

<p>Semantic-modeでは，Emacsは現在のバッファをパースする．シンボルにカーソルを合わせるとsemanticはすべてのincludeファイルを読みに行くので，たまに時間がかかる．しかし一回パースすれば終わりなので，問題はない．</p>

<h3>9.1.3.パスの追加</h3>

<p>Semantic のデフォルトのインクルードパスは<code>semantic-dependency-system-include-path</code>に格納されており，追加したい場合は以下のようにする．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nv">semantic-add-system-include</span> <span class="s">&quot;/usr/include/boost&quot;</span> <span class="ss">&#39;c++-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">semantic-add-system-include</span> <span class="s">&quot;~/linux/kernel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">semantic-add-system-include</span> <span class="s">&quot;~/linux/include&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>9.1.4.<code>company-mode</code>におけるSemantic-mode</h3>

<p><code>company-mode</code>には<code>company-semantic</code>コマンドがあり，これがSemanticDBを補完候補の取得に利用する．<code>company-semantic</code>の良いところは，<code>semantic-ia-complete-symbol</code>が改善されているところ．元は1文字以上タイプしていなければ補完を検索してくれなかったが，<code>company-semantic</code>ではプレフィクスなしで補完してくれる．</p>

<ul>
<li><code>global-sematicdb-minor-mode</code>

<ul>
<li>パース結果をキャッシュする．キャッシュ結果は<code>semanticdb-default-save-directory</code>変数内のパスに保存されるが，デフォルトでは<code>~/.emacs.d/semanticdb</code>いかに保持される</li>
</ul></li>
<li><code>global-semantic-idle-scheduler-mode</code>

<ul>
<li>このモードが有効になっていると，バッファーが期限切れになっていた時，ユーザがタイプしていない間にパーサをし直す．これがオフだと，バッファはコマンドによって手動でパースし直さなければならない</li>
</ul></li>
</ul>

<h2>9.2.CEDETのその他の機能</h2>

<p>Semanticがソースコードをパースし作成したデータベースは，コードの補完の他にも様々な使い道がある．コードナビゲーションや定義元・参照元ジャンプなど．</p>

<h3>9.2.1.Senator</h3>

<p>CEDETの一部で，SEmainticNAvigaTORの略称．</p>

<h3>9.2.2.デバッグ</h3>

<p>GDBとかGUDとかがあるらしい．</p>

<p>あとは気が向いたら．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X でターミナルをきれいにする]]></title>
    <link href="http://tasuwo.github.io/blog/2016/02/16/zsh-setting/"/>
    <updated>2016-02-16T11:20:22+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/02/16/zsh-setting</id>
    <content type="html"><![CDATA[<p>ターミナルをきれいにする手順をメモってなかったなぁと思ったのでメモっておく．<br>
本当に，単純に見た目を変えるだけ．</p>

<!-- more -->

<p>ターミナルをきれいにします．やることは，</p>

<ul>
<li>コマンドラインの表示形式をきれいにする</li>
<li>色をきれいにする</li>
</ul>

<p>テーマを手軽に導入するために Antigen を導入したいので，それに伴って zsh を導入します．</p>

<h2>zsh</h2>

<p>Homebrew で導入する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install zsh
</span></code></pre></td></tr></table></div></figure>

<p>bash で設定していたパスを zsh でも有効になるようにお引越し．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp ~/.bash_profile ~/.zprofile
</span></code></pre></td></tr></table></div></figure>

<p>ターミナルの環境設定から、<code>一般</code> &gt; <code>開くシェル</code> &gt; <code>コマンド</code> に <code>/usr/local/bin/zsh</code> を設定すればおk．</p>

<h2>Antigen</h2>

<p>プラグイン管理ツールの <a href="https://github.com/zsh-users/antigen">Antigen</a> を導入する．<code>antigen theme テーマ名</code> で，oh-my-zsh で提供されているテーマなら手軽に導入できるので便利．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span>
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/zsh-users/antigen.git
</span></code></pre></td></tr></table></div></figure>

<p><code>.zshrc</code> に以下を記述</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/antigen/antigen.zsh
</span><span class='line'>
</span><span class='line'><span class="c"># Load the oh-my-zsh&#39;s library.</span>
</span><span class='line'>antigen use oh-my-zsh
</span><span class='line'>
</span><span class='line'><span class="c"># Syntax highlighting bundle.</span>
</span><span class='line'>antigen bundle zsh-users/zsh-syntax-highlighting
</span><span class='line'>
</span><span class='line'><span class="c"># Load the theme.</span>
</span><span class='line'>antigen theme https://github.com/denysdovhan/spaceship-zsh-theme spaceship
</span><span class='line'>
</span><span class='line'><span class="c"># Tell antigen that you&#39;re done.</span>
</span><span class='line'>antigen apply
</span></code></pre></td></tr></table></div></figure>

<p>テーマは <a href="https://github.com/denysdovhan/spaceship-zsh-theme">denysdovhan/spaceship-zsh-theme</a> にした．</p>

<h2>Color theme</h2>

<p>tommorow theme に幾つかカラーテーマがまとめられている．</p>

<p><a href="https://github.com/chriskempson/tomorrow-theme">chriskempson/tomorrow-theme: Tomorrow Theme the precursor to Base16 Theme</a></p>

<p>適当なフォルダに clone する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/chriskempson/tomorrow-theme.git
</span></code></pre></td></tr></table></div></figure>

<p>ターミナルの設定 &gt; 一般 を選択．カラーテーマ群が表示されているリストの下部に歯車マークがあるので、そこから「読み込む&#8230;」を選択する．その後，clone した tomorrow-theme/OS X Terminal/ 以下から好きなテーマを読み込む．すると，リストにテーマが追加されるので，テーマを選択した状態でリスト下部の「デフォルト」を選択すれば良い．</p>

<p>おしまい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenCV を Homebrew から導入し直して Xcode に設定し直した]]></title>
    <link href="http://tasuwo.github.io/blog/2016/02/16/brew-open-cv/"/>
    <updated>2016-02-16T10:19:02+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/02/16/brew-open-cv</id>
    <content type="html"><![CDATA[<p>既に OpenCV を導入し Xcode から利用していたが、Homebrew で設定しなおす機会があったので、やったことをメモしておく。こうしたらできた！というメモなので、コマンド実行等は自己責任でお願いします。</p>

<!-- more -->

<p>環境は以下です．</p>

<ul>
<li>Max OS X 10.10.1 Yosemite</li>
<li>Xcode 6.1.1</li>
<li>OpenCV 2.4.12</li>
</ul>

<h2>導入</h2>

<p>事前に <code>brew doctor</code> を解決しておくと良いかも。問題がなければ、opencv を導入する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap homebrew/science
</span><span class='line'><span class="nv">$ </span>brew install opencv
</span></code></pre></td></tr></table></div></figure>

<p>既に OpenCV を導入している場合、過去のファイル群は邪魔なので撤去しなくてはならない。<code>brew doctor</code> 時点で影響を及ぼしそうなファイルはリストアップされるので、それらを削除するなりバックアップをとるなりしてから、シンボリックリンクを貼ると良いかも。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew link opencv
</span></code></pre></td></tr></table></div></figure>

<p><code>--force</code> オプションをつけてね〜的な warning が出るかもしれない。その場合は付加すれば実行できる。ただし、既存の OpenCV のシンボリックリンクを上書きすることになるので、注意。</p>

<h2>Xcode で使う</h2>

<p>Homebrew で導入した OpenCV の場所は <code>/usr/local/Cellar/opencv</code> となる。Xcode から利用する場合は、適切な場所を参照するように設定を行う必要がある。以下、パス内のバージョンに関しては適宜置き換えること(今回の場合は2.4.12_2)。</p>

<h3>ヘッダー及びライブラリの Search Paths</h3>

<ul>
<li><code>Build Settings</code> &gt; <code>Header Search Paths</code>

<ul>
<li><code>/usr/local/Cellar/opencv/2.4.12_2/include</code></li>
<li><code>/usr/local/Cellar/opencv</code> にして、recursive に設定すると説明しているサイトがあったが、こちらの方が綺麗に見える</li>
</ul></li>
<li><code>Build Settings</code> &gt; <code>Library Search Paths</code>

<ul>
<li><code>/usr/local/Cellar/opencv/2.4.12_2/lib</code></li>
</ul></li>
</ul>

<p>OpenCV 導入済み &amp; Xcode 設定済みだった場合は、既存の設定を削除するか、上記で設定したパスの優先度をあげる(リスト内で上方に移動する)と良いかもしれない。</p>

<h3>ライブラリとのリンク</h3>

<p>OpenCV をすでに導入し、Xcode で設定済みであった場合は、<code>Build Settings</code> &gt; <code>Linking</code> &gt; <code>Other Linker Flags</code> にいろいろ設定されているかもしれないが、全部消す(と、自分の環境ではエラーがなおった)。</p>

<p>Homebrew で導入後にライブラリとのリンクを張るためには <code>Build Phases</code> &gt; <code>Link Binary With Libraries</code> に、<code>/usr/local/Cellar/opencv/2.4.12_2/lib</code> から必要なライブラリを追加する。<code>Shitf + Command + G</code> から <code>/usr/local/Cellar/opencv/2.4.12\_2/lib</code> と入力すれば楽。</p>

<h2>トラブルシューティング</h2>

<h3>Undefined symbols</h3>

<p><code>Undefined symbols for architecture x86_64:</code> みたいなエラーがドバッと出ることがある。</p>

<p><a href="http://stackoverflow.com/questions/24985713/opencv-undefined-symbols-for-architecture-x86-64-error">c++ - OpenCV Undefined symbols for architecture x86_64: error - Stack Overflow</a></p>

<p>OpenCV に必要なライブラリがリンクされていないことによるエラーのため、Link Binary With Libraries で必要なライブラリがリンクされているか確認する。</p>

<h3>dyld: Library not loaded</h3>

<p>Xcode における Build &amp; Run 後に、以下のようなエラーが吐かれた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dyld: Library not loaded: /usr/local/opt/libpng16.16.dylib
</span><span class='line'>  Referenced from: /usr/local/opt/opencv/lib/libopencv_highgui.2.4.dylib
</span><span class='line'>  Reason: Incompatible library version: libopencv_highgui.2.4.dylib requires version 33.0.0 or later, but libpng16.16.dylib provides version 32.0.0
</span><span class='line'>Trace/BPT <span class="nb">trap</span>: 5
</span></code></pre></td></tr></table></div></figure>

<p><code>/usr/local/opt</code> の libpng を読みに行ってるのが悪いのかな？そもそも <code>/usr/local/opt</code> の OpenCV 見に行ってるけどなんでかな？と思っていたが、どうやら試した環境では、 <code>/usr/local/opt</code> 内の libpng、 opencv は Cellar 以下の各ソフトウェアへのシンボリックリンクになってるらしかった。Homebrew がやってくれてるんだっけ？わからん&#8230;</p>

<p>バージョンが低いと言われているので、<code>brew update &amp; brew upgrade</code> したら、とりあえず治ったけど、実際何が原因だったのかはわからなかった&#8230;</p>

<p><a href="http://stackoverflow.com/questions/28124359/error-with-homebrew-opencv-libpng">c++ - Error with homebrew + opencv + libpng - Stack Overflow</a></p>

<h2>その他参考</h2>

<p><a href="http://nantekottai.com/2014/04/16/opencv-xcode5-homebrew/">HomebrewとXcode5でつくるOpenCVの環境 – なんてこったいブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El Capitan でブログを更新しようとしたらエラーを吐かれた]]></title>
    <link href="http://tasuwo.github.io/blog/2016/02/14/fix-octopress/"/>
    <updated>2016-02-14T13:06:20+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/02/14/fix-octopress</id>
    <content type="html"><![CDATA[<p>Mac OS X El Capitan にしてからブログを更新しようとしたらエラーを吐かれたので，解決方法をメモしておく．</p>

<!-- more -->

<p>octpress でブログを書こうとしたらエラーを吐かれた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake preview
</span><span class='line'>Starting to watch <span class="nb">source </span>with Jekyll and Compass. Starting Rack on port 4000
</span><span class='line'>rake aborted!
</span><span class='line'>Errno::ENOENT: No such file or directory - jekyll
</span><span class='line'>/Users/Tasuku_Tozawa/Documents/STUDY/blog/octopress/Rakefile:84:in <span class="sb">`</span>spawn<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/Users/Tasuku_Tozawa/Documents/STUDY/blog/octopress/Rakefile:84:in `block in &lt;top (requir                                                                                          </span>
</span><span class='line'><span class="s1">ed)&gt;&#39;</span>
</span><span class='line'>Tasks: <span class="nv">TOP</span> <span class="o">=</span>&gt; preview
</span><span class='line'><span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>El Capitan におけるバグらしい．</p>

<p><a href="https://github.com/imathis/octopress/issues/1749">When I upgraded the Mac system, I can&#39;t Preview · Issue #1749 · imathis/octopress</a></p>

<p>ruby のバージョンをあげたいんだけどエラーになる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install 2.2.3
</span><span class='line'>The following versions contain <span class="sb">`</span>2.2.3<span class="s1">&#39; in the name:</span>
</span><span class='line'><span class="s1">  rbx-2.2.3</span>
</span><span class='line'>
</span><span class='line'><span class="s1">See all available versions with `rbenv install --list&#39;</span>.
</span><span class='line'>
</span><span class='line'>If the version you need is missing, try upgrading ruby-build:
</span><span class='line'>
</span><span class='line'>  brew update <span class="o">&amp;&amp;</span> brew upgrade ruby-build
</span></code></pre></td></tr></table></div></figure>

<p><a href="http://qiita.com/ngtk/items/cc85c0d916ac4bcc2188">rbenvでインストールできるバージョンリストを最新にする - Qiita</a></p>

<p><code>brew update &amp;&amp; brew upgrade ruby-build</code> したら，インストールできた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install 2.2.3
</span><span class='line'>Downloading ruby-2.2.3.tar.bz2...
</span><span class='line'>-&gt; https://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.3.tar.bz2
</span><span class='line'>Installing ruby-2.2.3...
</span><span class='line'>Installed ruby-2.2.3 to /Users/Tasuku_Tozawa/.rbenv/versions/2.2.3
</span></code></pre></td></tr></table></div></figure>

<p>その後，octopress の root ディレクトリで以下を実行．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv <span class="nb">local </span>2.2.3
</span><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>rbenv rehash
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>

<p>無事実行できた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake preview                                                                              56<span class="p">|</span>
</span><span class='line'>Starting to watch <span class="nb">source </span>with Jekyll and Compass. Starting Rack on port <span class="m">4000</span>                57<span class="p">|</span> <span class="sb">```</span> bash
</span><span class='line'><span class="o">[</span>2016-02-14 12:50:40<span class="o">]</span> INFO  WEBrick 1.3.1                                                   58<span class="p">|</span>
</span><span class='line'><span class="o">[</span>2016-02-14 12:50:40<span class="o">]</span> INFO  ruby 2.2.3 <span class="o">(</span>2015-08-18<span class="o">)</span> <span class="o">[</span>x86_64-darwin15<span class="o">]</span>                       59<span class="p">|</span> <span class="sb">```</span>
</span><span class='line'><span class="o">[</span>2016-02-14 12:50:40<span class="o">]</span> INFO  WEBrick::HTTPServer#start: <span class="nv">pid</span><span class="o">=</span><span class="m">80458</span> <span class="nv">port</span><span class="o">=</span>4000
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クラスにおける Failable Initializerについて]]></title>
    <link href="http://tasuwo.github.io/blog/2016/02/02/failable-initializer/"/>
    <updated>2016-02-02T13:58:13+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/02/02/failable-initializer</id>
    <content type="html"><![CDATA[<p>Swift で，構造体やenum，クラスにおいて，初期化が失敗しうるコンストラクタを利用したい時には，<em>Failable Initializer</em> を利用すれば良いらしいのだが，これをクラスで利用しようとしたらハマったのでメモ．</p>

<!-- more -->

<h2>Failable Initializer とは</h2>

<p>初期化に失敗したことを，<code>nil</code> を返すことで伝えることのできるイニシャライザ．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">species</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// failable initializer</span>
</span><span class='line'>    <span class="c1">// init の末尾に ? を付加する</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">species</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">species</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 初期化失敗の場合には nil を返す</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">species</span> <span class="o">=</span> <span class="n">species</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これで，初期化がうまくいかなかった場合には，<code>nil</code> が返される．</p>

<h2>ハマったこと</h2>

<p>やろうとしたことは，コンストラクタ内で例外を扱うことで，具体的には以下のような感じ．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">var</span> <span class="nl">foo1</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">var</span> <span class="nl">foo2</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">foo1</span> <span class="o">=</span> <span class="n">try</span> <span class="cm">/* 例外を投げうる処理 */</span>
</span><span class='line'>            <span class="n">foo2</span> <span class="o">=</span> <span class="mi">0</span>   <span class="cm">/* 単純な代入 */</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>ところが，このように記述すると，<code>return nil</code> の位置で以下のようなエラーが発生する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">All</span> <span class="n">stored</span> <span class="n">properties</span> <span class="n">of</span> <span class="n">a</span> <span class="k">class</span> <span class="n">instance</span> <span class="n">must</span> <span class="n">be</span> <span class="n">initialized</span> <span class="n">before</span> <span class="n">returning</span> <span class="nb">nil</span> <span class="n">from</span> <span class="n">an</span> <span class="n">initializer</span>
</span></code></pre></td></tr></table></div></figure>

<p>同じことでハマった人がいるらしい．</p>

<blockquote>
<p><a href="http://stackoverflow.com/questions/26495586/best-practice-to-implement-a-failable-initializer-in-swift">All stored properties of a class instance must be initialized before returning nil from an initializer</a></p>
</blockquote>

<p>結論から言うと，値型である構造体や列挙型ではいかなるタイミングでも初期化を失敗(<code>return nil</code>)できるが，クラスについては，すべての stored property が明示的に初期化された後でなければ初期化を失敗させることができないらしい．</p>

<blockquote>
<p>A failable initializer for a value type (that is, a structure or enumeration) can trigger an initialization failure at any point within its initializer implementation. In the Animal structure example above, the initializer triggers an initialization failure at the very start of its implementation, before the species property has been set.<br>
For classes, however, a failable initializer can trigger an initialization failure only after all stored properties introduced by that class have been set to an initial value and any initializer delegation has taken place.<br>
<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID224">The Swift Programming Language (Swift 2.1): Initialization</a></p>
</blockquote>

<h2>動作を確認してみる</h2>

<p>Playground でサンプルコードを動かして動作を確かめてみる．<br>
まずは，構造体の場合．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 構造体</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">species</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">species</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">species</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">species</span> <span class="o">=</span> <span class="n">species</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">hoge</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="cm">/* ここに任意の値 */</span>
</span><span class='line'><span class="k">let</span> <span class="n">anonymousCreature</span> <span class="o">=</span> <span class="n">Animal</span><span class="p">(</span><span class="nl">species</span><span class="p">:</span> <span class="n">hoge</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">anonymousCreature</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;NG&quot;</span><span class="p">)</span> <span class="cm">/* hoge=&quot;&quot; の時 */</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">)</span> <span class="cm">/* hoge=&quot;任意の文字列&quot; の時 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>次に，クラスの場合．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Product</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">name</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">hoge</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="cm">/* ここに任意の値 */</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">bowTie</span> <span class="o">=</span> <span class="n">Product</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">hoge</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;The product&#39;s name is \(bowTie.name)&quot;</span><span class="p">)</span> <span class="cm">/* hoge=&quot;任意の文字列&quot; の時．The product&#39;s name is &lt;任意の文字列&gt; */</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;NG&quot;</span><span class="p">)</span> <span class="cm">/* hoge=&quot;&quot; の時 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>公式ドキュメント曰く，stored property である name は <code>String!</code> として宣言する．すると，デフォルト値として <code>nil</code> が格納されるが，初期化成功時には，stored property が nil かどうかを気にせずにアクセスしたい．(stored property に対する nil チェックが必要ないようにしたい)ので，クラスでは全ての stored property を初期化してから return nil する必要があるそうだ．<br>
でも，コンストラクタの返り値が nil であったならどちらにしろプロパティにアクセスはしないわけで，なぜ全プロパティを初期化してから nil を返す必要があるのか，いまいちわからなかった．</p>

<h2>参考</h2>

<p><a href="https://developer.apple.com/swift/blog/?id=17">Failable Initializers - Swift Blog - Apple Developer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発時の個人的に好みなディレクトリ構成とか Xib ファイルの使い方とか]]></title>
    <link href="http://tasuwo.github.io/blog/2016/01/10/ios-dev-setting/"/>
    <updated>2016-01-10T20:47:24+09:00</updated>
    <id>http://tasuwo.github.io/blog/2016/01/10/ios-dev-setting</id>
    <content type="html"><![CDATA[<p>自分が iOS アプリケーションを作るとき使いまわそうと思った，テンプレ的な設定とかをまとめておく．</p>

<!-- more -->

<h2>やりたいこと</h2>

<p>やることは以下．</p>

<ol>
<li>ディレクトリ構成をきれいにする

<ul>
<li>MVCアーキテクチャに対応させる</li>
</ul></li>
<li>Storyboard を削除する

<ul>
<li>segue とかで画面遷移させたり，一つの storyboard に複数の view controller が対応しているのは管理しづらくなりそうかな，と思ったので</li>
</ul></li>
<li>UI 整形に xib ファイルを使う

<ul>
<li>UIView を各画面ごとに作成し，対応した xib ファイルを UI 整形用に使う</li>
</ul></li>
</ol>

<h2>0. 環境</h2>

<ul>
<li>Xcode7.2</li>
<li>Swift2.0</li>
<li>OS X Yosemite</li>
</ul>

<h2>1. ディレクトリ構成をきれいにする</h2>

<p>iOS アプリケーションは MVC アーキテクチャに則っているので，対応したディレクトリ構成にする．<code>File &gt; New &gt; Project</code> から <code>Single View Application</code> を作成すると，デフォルトのディレクトリ構成は以下のようなかんじ．</p>

<p><img src="http://tasuwo.github.io/images/20160110_default.png" alt="default.png"></p>

<p>これを，以下のようなディレクトリ構成に変更する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>┬ /resources
</span><span class='line'>│  ├ info.plist
</span><span class='line'>│  └ Assets.xcassets
</span><span class='line'>└ /src
</span><span class='line'>   ├ AppDelegate.swift
</span><span class='line'>   ├ /model
</span><span class='line'>   ├ /view
</span><span class='line'>   └ /controller
</span><span class='line'>       └ ViewController.swift</span></code></pre></td></tr></table></div></figure>

<p>実際のディレクトリ構成と Xcode のカラム上でのディレクトリ構成は異なるので，その同期を撮りたいときには <a href="https://github.com/venmo/synx">venmo/synx</a> を使うと良い．</p>

<h2>2. Storyboard を削除する</h2>

<p>デフォルトで存在する，<code>Main.storyboard</code>, <code>LaunchScreen.storyboard</code> は削除する．削除するだけだとエラーとなってしまうので，以下のようにプロジェクトの設定を変更する．</p>

<ul>
<li><code>Deployment Info &gt; Main Interface</code> のテキストフィールドを空にする</li>
<li><code>App Icons and Launch Images &gt; Launch Screen File</code> のテキストフィールドを空にする</li>
</ul>

<p>これでプロジェクトから storyboard を除くことはできたが，この時点で Run しても画面に何も表示されない．rootViewConstroller を設定できていないためである．</p>

<p><img src="http://tasuwo.github.io/images/20160110_black.png" alt="black.png"></p>

<p>そこで，<code>AppDelegate.swift</code> に以下を追記することで，ViewController を rootViewController に設定する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSObject</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">window</span> <span class="o">=</span> <span class="bp">UIWindow</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">().</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">window</span> <span class="o">=</span> <span class="n">window</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">whiteColor</span><span class="p">()</span>
</span><span class='line'>            <span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">ViewController</span><span class="p">()</span>
</span><span class='line'>            <span class="n">window</span><span class="p">.</span><span class="n">makeKeyAndVisible</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これでOK．</p>

<p><img src="http://tasuwo.github.io/images/20160110_white.png" alt="white.png"></p>

<h2>3. UI 整形に xib ファイルを使う</h2>

<p>まず，以下のような <code>MainView.swift</code> を <code>src/view</code> 以下に作成する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">MainView</span> <span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>次に，<code>New file</code> から <code>iOS &gt; User Interface</code> 内の <code>view</code> を選択し， xib ファイル作成する．その <code>File&#39;s Owner</code> の Custom Class を <code>Main View</code> に設定</p>

<p><img src="http://tasuwo.github.io/images/20160110_mainview.png" alt="mainview.png"></p>

<p>この UI が適用されたことがわかるように，適当にラベルを設置しておく．</p>

<p><img src="http://tasuwo.github.io/images/20160110_main.png" alt="main.png"></p>

<p>xib ファイル側の view を <code>MainView.swift</code> に対応させる．</p>

<p><img src="http://tasuwo.github.io/images/20160110_outlet.png" alt="outlet.png"></p>

<p>MainView.swift を以下のように編集する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">MainView</span> <span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">var</span> <span class="nl">MainView</span><span class="p">:</span> <span class="bp">UIView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">loadNibNamed</span><span class="p">(</span><span class="s">&quot;MainView&quot;</span><span class="p">,</span> <span class="nl">owner</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">MainView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">addSubview</span><span class="p">(</span><span class="n">MainView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">required</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>さらに，<code>ViewController.swift</code> に以下を追記</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">view</span> <span class="o">=</span> <span class="n">MainView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これで Run すればよい．</p>

<p><img src="http://tasuwo.github.io/images/20160110_mianvi.png" alt="mianvi.png"></p>

<h2>捕捉 : Auto layout</h2>

<p>中央揃えしたいとかそういうのは auto layout を活用すれば良い．以下のサイトが参考になる．</p>

<p><a href="http://qiita.com/teradonburi/items/94b89379aa5a0bfdc71d">iOS - xcode6でAutoLayoutでレスポンシブデザイン - Qiita</a><br>
<a href="http://swift-salaryman.com/autolayout.php">AutoLayout - Swiftサラリーマン</a></p>

<p>ラベルから Ctrl 押しながら 親view へドラッグ</p>

<p><img src="http://tasuwo.github.io/images/20160110_auto.png" alt=" auto.png"></p>

<p>制約を適当に付加する．</p>

<p><img src="http://tasuwo.github.io/images/20160110_constraint.png" alt="constraint.png"></p>

<p>今回はこんな感じ．</p>

<p><img src="http://tasuwo.github.io/images/20160110_cons.png" alt="cons.png"></p>

<p>これで Run すると中央揃えになる．</p>

<p><img src="http://tasuwo.github.io/images/20160110_mmm.png" alt="mmm.png"></p>

<h2>おわりに</h2>

<p>最終的なディレクトリ構成は以下．</p>

<p><img src="http://tasuwo.github.io/images/20160110_V.png" alt="V.png"></p>

<h2>参考</h2>

<p><a href="http://tanihiro.hatenablog.com/entry/2015/10/13/092710">【iOS】【swift】カスタムViewとxibを紐付ける - tanihiro.log</a><br>
<a href="http://qiita.com/iKichiemon/items/3cfa6c2bf2a0acb299a0">[Swift]xibファイルを呼び出す最も簡単な方法 - Qiita</a><br>
<a href="http://qiita.com/noppefoxwolf/items/11401622950768c93fd2">Swift+xibで簡単レイアウトでカスタムビュー - Qiita</a><br>
<a href="http://qiita.com/MTattin/items/61beb3b4afcc779f707f">XCode7 - Storyboardにxib利用 - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cakePHPの導入からIDCFの仮想サーバでの立ち上げまでメモ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/09/28/cakephp/"/>
    <updated>2015-09-28T14:16:16+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/09/28/cakephp</id>
    <content type="html"><![CDATA[<p>某合宿で web サービスを作成する際に cakePHP を利用したので，そのまとめ．ローカルでの立ち上げから，サーバに up して外部から見れるようにするまでやる．導入とサーバ立ち上げの両方ではまった．</p>

<!-- more -->

<h2>自分の環境</h2>

<p>Mac OS X Yosemite です.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sw_vers
</span><span class='line'>ProductName:  Mac OS X
</span><span class='line'>ProductVersion:   10.10.3
</span><span class='line'>BuildVersion: 14D136
</span></code></pre></td></tr></table></div></figure>

<h2>インストール</h2>

<p>まず composer をいれる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -s https://getcomposer.org/installer <span class="p">|</span> php
</span></code></pre></td></tr></table></div></figure>

<p>適当なプロジェクトを作成してみる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>composer create-project --prefer-dist cakephp/app <span class="o">[</span>プロジェクト名<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>エラーが出た．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Your requirements could not be resolved to an installable <span class="nb">set </span>of packages.
</span><span class='line'>
</span><span class='line'>Problem 1
</span><span class='line'> - cakephp/cakephp 3.0.x-dev reqyures ext-intl * -&gt; the requested PHP extention intl is missing from your system.
</span><span class='line'> ...
</span></code></pre></td></tr></table></div></figure>

<p>intl がないと言われる．Mac の人は pecl を利用して<code>intl</code>を導入する(pecl導入していない場合は導入して&#8230;)．<br>
Win の人は <code>php.ini</code> の <code>;extention=php_intl.dll</code> のコメントアウトを外すと良い．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pecl install intl
</span></code></pre></td></tr></table></div></figure>

<p>すると，またエラーが出る．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>checking <span class="k">for</span> location of ICU headers and libraries... not found
</span><span class='line'>configure: error: Unable to detect ICU prefix or ./bin/icu-config failed. Please verify ICU install prefix and make sure icu-config works.
</span></code></pre></td></tr></table></div></figure>

<p>ICUがないと言われるので導入する．homebrew でインストールした．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install icu4c
</span><span class='line'><span class="nv">$ </span>brew link icu4c
</span></code></pre></td></tr></table></div></figure>

<p>もう一度インストールしてみる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pecl install intl
</span><span class='line'>downloading intl-3.0.0.tgz ...
</span><span class='line'>
</span><span class='line'><span class="o">[</span>略<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Build process completed successfully
</span><span class='line'>Installing <span class="s1">&#39;/usr/local/Cellar/php56/5.6.11_2/lib/php/extensions/no-debug-non-zts-20131226/intl.so&#39;</span>
</span><span class='line'>install ok: channel://pecl.php.net/intl-3.0.0
</span><span class='line'>Extension intl enabled in php.ini
</span></code></pre></td></tr></table></div></figure>

<p>やっとインストールできた！</p>

<p><code>sudo apachectl start</code> でapacheを起動し，phpでintlがロードできているか確認する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>php -m <span class="p">|</span> grep intl
</span><span class='line'>intl
</span></code></pre></td></tr></table></div></figure>

<p>できているらしい．今度こそプロジェクトをちゃんと作ってみる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>composer create-project --prefer-dist cakephp/app cake_test
</span><span class='line'>Installing cakephp/app <span class="o">(</span>3.0.4<span class="o">)</span>
</span><span class='line'>  - Installing cakephp/app <span class="o">(</span>3.0.4<span class="o">)</span>
</span><span class='line'>    Loading from cache
</span></code></pre></td></tr></table></div></figure>

<p><code>bin/cake server</code> を起動し，<code>localhost:8765</code>にアクセスできて確認できればOK．</p>

<blockquote>
<p><a href="http://stackoverflow.com/questions/27886117/php-intl-installation-on-xampp">$ sudo ./pecl install intl</a><br>
<a href="http://qiita.com/ms2sato/items/fd76d67fd5d63c3cb4a5">環境構築 - icuのインストール - Qiita</a><br>
<a href="http://tetsuwo.tumblr.com/post/35060809036/intl-%E3%81%A8-apc-%E3%82%92-php-5315-macbook-air">intl と APC を PHP 5.3.15 (MacBook Air)&#8230; « をぶろぐ</a><br>
<a href="http://darraghenright.tumblr.com/post/22027208929/installing-intl-package-on-osx-lion">Installing Intl package on OSX Lion - Darragh Enright</a><br>
<a href="http://qiita.com/s-kiriki/items/636ec1109f48fb977347">CakePHP3の使い方まとめ - Qiita</a></p>
</blockquote>

<h2>サーバにアップロード</h2>

<p>IDCFクラウドのサービスを利用した．</p>

<blockquote>
<p><a href="http://www.idcf.jp/cloud/">クラウドサービスならIDCFクラウド -使いやすく、パワフル</a></p>
</blockquote>

<h3>設定</h3>

<p>仮想マシンを作成して，めちゃらくガイドを参考に設定すればいい．OS は班員の一人が利用したことがあるということで Debian にした．</p>

<h3>ログイン</h3>

<p>秘密鍵をダウンロードできたはず(うろ覚え&#8230;)なので，以下でアクセスできるはず．</p>

<p><code>ssh -i [/path/to/秘密鍵] -p 22 [user_name]@[IPアドレス]</code></p>

<h3>アプリの立ち上げ</h3>

<p>cakePHP で作成したアプリケーションは，Github あたりで共有しておいて，サーバにログイン &amp; clone すればよい．設定で 80 番ポートを開けていたので，そこでアプリケーションを起動すればよいはず．ポートの指定方法は公式にある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bin/cake server -p 80
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p><a href="http://book.cakephp.org/3.0/ja/installation.html#id6">インストール — CakePHP Cookbook 3.x ドキュメント</a></p>
</blockquote>

<p>これで<code>http://[IPアドレス]</code>にアクセスすればよいはずなんだけど，できなくてはまった．ちょっと調べてみると&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>netstat -an <span class="p">|</span> grep LISTEN
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span>  ::1.80                 *.*                    LISTEN
</span></code></pre></td></tr></table></div></figure>

<p>IPv4 ではなく，IPv6 で LISTEN してしまっているので，以下のようにホストを指定して起動する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bin/cake server -p <span class="m">80</span> -H 0.0.0.0
</span><span class='line'><span class="nv">$ </span>netstat -an <span class="p">|</span> grep LISTEN
</span><span class='line'>tcp4       <span class="m">0</span>      <span class="m">0</span>  *.80                   *.*                    LISTEN
</span></code></pre></td></tr></table></div></figure>

<p>これで外部から見れるようになった！サーバの設定が悪いのかと思ってだいぶ時間がかかってしまった&#8230;</p>

<blockquote>
<p><a href="http://qiita.com/IKEA_dless/items/f536b3c009af295bb4a5">春だし CakePHP 3.0をComposer経由でCentOS6.5にインストール してみた - Qiita</a><br>
<a href="http://esoz.blog.fc2.com/blog-entry-49.html">コンピュータとかバイクとか。 Apache HTTP Server の設定いろいろ。</a><br>
<a href="http://qiita.com/cubicdaiya/items/003e36e17519ef32ac8a">Linux - 特定のポート番号をLISTENしているプロセスが知りたい - Qiita</a></p>
</blockquote>

<h2>ユーザの追加</h2>

<p>班員各が公開鍵認証でサーバにアクセスできるようにしたかったので，ユーザ追加の方法もメモっておく.<br>
クライアント側で以下の操作を行う．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/.ssh/
</span><span class='line'><span class="nv">$ </span>ssh-keygen
</span><span class='line'>名前は適当に
</span><span class='line'>id_hoge でつくって id_hoge<span class="o">(</span>秘密鍵<span class="o">)</span> と id_hoge.pub<span class="o">(</span>公開鍵<span class="o">)</span> ができた場合について説明する
</span></code></pre></td></tr></table></div></figure>

<p>サーバ側で以下の操作を行う．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>adduser hoge
</span><span class='line'>パスワードとか設定する
</span><span class='line'><span class="nv">$ </span>mv /home/hoge
</span><span class='line'><span class="nv">$ </span>mkdir .ssh
</span><span class='line'><span class="nv">$ </span>chown hoge .ssh
</span><span class='line'><span class="nv">$ </span>chmod <span class="m">700</span> .ssh
</span><span class='line'><span class="nv">$ </span>emacs .ssh/authorized_keys
</span><span class='line'>公開鍵<span class="o">(</span>id_hoe.pub<span class="o">)</span>の内容を貼り付け
</span><span class='line'><span class="nv">$ </span>chown hoge authorized_keys
</span><span class='line'><span class="nv">$ </span>chmod <span class="m">600</span> authorized_keys
</span><span class='line'><span class="nv">$ </span>/etc/ssh/sshd_config
</span><span class='line'>AllowUsers に hoge を追加
</span><span class='line'><span class="nv">$ </span>/etc/init.d/sshd restart
</span></code></pre></td></tr></table></div></figure>

<p>これで，クライアント側から <code>ssh -i [/path/to/id_hoge] -p 22 [user_name]@210.140.68.52</code> でサーバにログインできるはず．</p>

<blockquote>
<p><a href="http://www.serverlog.jp/ssh-key-auth/">公開鍵認証による SSH 接続の方法</a><br>
<a href="http://www015.upp.so-net.ne.jp/unixlife/linux/de-user.html">Debianでのユーザ管理</a></p>
</blockquote>

<p>ちなみに，ユーザに管理者権限を付与したい場合は，以下のサイトを参考にすればよい．グループに対して設定を行うときには，<code>%wheel ALL=(ALL) ALL</code> のように先頭に <code>%</code> を付加するんだけど，なぜか除いてしまっていてつまづいた．</p>

<blockquote>
<p><a href="http://www.websec-room.com/2014/01/18/1590">CentOS で root 権限を持ち、sudo を実行できるユーザーを作成する | Webセキュリティの小部屋</a><br>
<a href="http://qiita.com/n0bisuke/items/4e4419290d789699cafa">Debianでユーザー追加を追加して権限を付与などをするメモ - Qiita</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode のプラグイン導入についてメモ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/08/16/xcode-plugin/"/>
    <updated>2015-08-16T16:08:37+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/08/16/xcode-plugin</id>
    <content type="html"><![CDATA[<p>メモしておこう．</p>

<!-- more -->

<h2>Alcatraz</h2>

<p>パッケージ管理ツールをいれる．<br>
パッケージのインストールや管理がラクになる．</p>

<blockquote>
<p><a href="https://github.com/supermarin/Alcatraz">supermarin/Alcatraz · GitHub</a></p>
</blockquote>

<p>以下を実行．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh <span class="p">|</span> sh
</span></code></pre></td></tr></table></div></figure>

<p>Xcode を起動すると以下のような画面が表示されるので，<code>Load Bundle</code>する．</p>

<p><img src="http://tasuwo.github.io/images/xcode_alcatraz.png" alt="xcode_alcatraz"></p>

<p><code>Window &gt; Package Manager</code> からパッケージをインストールできるようになる．</p>

<h2>いれたもの</h2>

<p>とりあえず一通り見てみていれてみたもの．</p>

<h3>プラグイン</h3>

<ul>
<li>BlockJump</li>
<li>FuzzyAutocomplete</li>
<li>VVDocumenter-Xcode</li>
<li>XAlign</li>
</ul>

<h3>テーマ</h3>

<ul>
<li>Tomorrow Night</li>
</ul>

<p>まだ全然使っていないので，使用感だとかどんなものだとかは気が向いたら書く．</p>

<h2>その他</h2>

<p>他にも Xcode 使う上で知っておくといいことがいろいろあるらしいけど，気が向いたら読む．</p>

<blockquote>
<p><a href="http://himaratsu.hatenablog.com/entry/xcode">Xcodeを便利に使って爆速開発という発表をしました - Think Big Act Local</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs の色表示がおかしかったのでなおした]]></title>
    <link href="http://tasuwo.github.io/blog/2015/08/16/title/"/>
    <updated>2015-08-16T15:25:56+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/08/16/title</id>
    <content type="html"><![CDATA[<p>結論から言うと，悪いのは emacs ではなく， screen が 256 色表示に対応していなかったせいだった．</p>

<!-- more -->

<p>256色表示できているか確かめる(参考サイト参照)</p>

<ul>
<li>ターミナル上</li>
</ul>

<p><img src="http://tasuwo.github.io/images/terminal_color.png" alt="terminal_color"></p>

<ul>
<li>screen上</li>
</ul>

<p><img src="http://tasuwo.github.io/images/screen_color.png" alt="screen_color"></p>

<p>screen のバージョン確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>screen -v
</span><span class='line'>Screen version 4.00.03 <span class="o">(</span>FAU<span class="o">)</span> 23-Oct-06
</span></code></pre></td></tr></table></div></figure>

<p>homebrew で最新版を導入する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap homebrew/dupes
</span><span class='line'><span class="nv">$ </span>brew install screen
</span><span class='line'>...
</span><span class='line'><span class="nv">$ </span>screen -v
</span><span class='line'>Screen version 4.03.00 <span class="o">(</span>GNU<span class="o">)</span> 27-May-15
</span></code></pre></td></tr></table></div></figure>

<p>これでおk．</p>

<h2>参考</h2>

<blockquote>
<p><a href="http://qiita.com/trapple/items/8ad1b0a7c4fa5b8341b0">OSXに256color対応Screenをインストールする - Qiita</a><br>
<a href="http://kiyotakagoto.hatenablog.com/entry/2013/02/17/210834">Mac OS X + iTerm2 + tmux + emacs で256色表示 - 人生ずっと勉強</a><br>
<a href="http://qiita.com/sesame/items/e752b53ebf478d0d081f">emacsclientを使用するとテーマのmode-lineが効かない - Qiita</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim をさわってみた感想]]></title>
    <link href="http://tasuwo.github.io/blog/2015/06/26/title/"/>
    <updated>2015-06-26T22:39:00+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/06/26/title</id>
    <content type="html"><![CDATA[<p>雑記です．</p>

<!-- more -->

<p>案外予定がつまっていて忙しい．充実しているともいう．</p>

<p>さて，近頃ずっと Emacs の設定をしては悦にいるという暇のつぶし方をしていた．<br>
anything とか yasnippet とか&#8230;(設定ファイルは <a href="https://github.com/tasuwo/.emacs.d">tasuwo/.emacs.d</a> にあげてある)</p>

<p>Emacs を使い始めて数ヶ月がたった．<br>
  前の記事で説明したように，ブラウザも FireFox + keysnail で Emacs ライクなキーバインドにして楽しんでいたけれど，正直なところ，メタキーが押下しづらいし，小指を Ctrl に置いておくのが地味にキツい時がある．ちなみに，keysnail を利用している所感としては，トラックパッドを使わなくていい(Macbookのトラックパッドは十分に素晴らしいものだけど)のが楽だ．手首に優しい．</p>

<p>ネットではよく，Emacs vs Vim みたいな話を聞く．<br>
  自分が Emacs を使い始めたのは，大学で先輩に影響されたかのが大きく，Vim については触ったことすらなかった．軽量で，操作も(慣れれば)かなり快適だと聞く．Emacs から Vim に乗り換えてよかったという人もよく目にする．小指が疲れてきたこの機会に，少し触ってみることにした．</p>

<p>Vim にはデフォルトでチュートリアルが用意されていて，下記のように呼び出すことができる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vimtutor js
</span></code></pre></td></tr></table></div></figure>

<p>これをちょこちょこ触ってみた．</p>

<p>感想．<br>
文書編集能力は Vim が圧倒的に勝っているように感じた(ただ，日本語編集等なるとどうなんだろう&#8230;)．Emacs における単語移動の M-f や M-b は押下しづらすぎた．モード変換は慣れるまでが大変そうでなんともいえない．Emacs から Vim に乗り換えるかといわれると，おそらく Emacs と Vim では根底にある思想が異なる気がする(Emacs は良き OS ，Vim は良き Editor，みたいな)し，どうだろう．いろいろ言っているけど，別に Emacs が嫌いになったわけではないので，本格的に乗り換えるのは(今の所は)ないかな．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac使ってた人がWin使ってみたときのメモ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/06/18/win/"/>
    <updated>2015-06-18T19:21:44+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/06/18/win</id>
    <content type="html"><![CDATA[<p>普段使いは OS X だったんだけど，Winを利用しなきゃならない場面があったので，使いやすくするためにやったことをメモしておく．<br>
ちなみに Windows 7, 8 の話．</p>

<!-- more -->

<h1>つまりどうするのか</h1>

<ul>
<li>zsh つかいたい</li>
<li>Emacs つかいたい</li>
<li>ブラウザでも Emacs ライクなキーバインドつかいたい</li>
</ul>

<p>あまり大したことはしない．</p>

<h2>キーバインド</h2>

<p>Caps lock を Ctrl にするために，Ctrl2capを利用した．<br>
Ctrl は Capslock にはならないので注意．</p>

<ul>
<li>つかいかた

<ul>
<li>インストール

<ul>
<li><code>ctrl2cap /install</code></li>
</ul></li>
<li>アンインストール

<ul>
<li><code>ctrl2cap /uninstall</code></li>
</ul></li>
</ul></li>
</ul>

<p>インストールしたらインストール．</p>

<blockquote>
<p><a href="https://technet.microsoft.com/ja-jp/sysinternals/bb897578.aspx">Ctrl2cap - TechNet - Microsoft</a></p>
</blockquote>

<h2>Webブラウザ</h2>

<h3>Chrome？</h3>

<p>とりあえず，拡張機能をいくつかいれてみる．</p>

<ul>
<li>keyconfig</li>
<li>gleeBox</li>
</ul>

<p>Ctrl と command が同じ意味合いになっていて使いづらいので，<br>
keyconfigをいれてみた．なかなかいいぞこれは&#8230;</p>

<ul>
<li>ちなみにgleeBox のいろは

<ul>
<li>g : gleeBoxの起動</li>
<li>Alt-g : フォーカスがテキストにある場合の gleeBox の起動</li>
<li>. : タブマネージャの起動(chrome限定)</li>
<li>?img : イメージ要素選択</li>
<li>?? : 入力フィールド選択</li>
</ul></li>
</ul>

<p>しかし，行頭にもってくる<code>Ctrl+a</code>や前方削除の<code>Ctrl+h</code>のキーバインドが，全選択や履歴へのキーバインドになってしまう．Mac では Ctrl と Command でそこらへんの使い分けができていたけど，Win だとどちらも Ctrl だからだね．</p>

<h3>Firefox + keySnail</h3>

<p>emacs 使いには Firefox + keySnail が良いとの噂を聞きつけ，導入してみることにした．<br>
gleeBox が利用できないのが残念だ．</p>

<ul>
<li>keySnail

<ul>
<li>FireFox のアドオン</li>
<li>F1 + b でショートカット一覧が見れる</li>
</ul></li>
<li>プラグイン

<ul>
<li>bmany</li>
<li>Tanything</li>
<li>HoK</li>
</ul></li>
</ul>

<p>少し使ってみた感じ，HoK はなかなか気に入った．</p>

<blockquote>
<p><a href="http://nenono.hatenablog.com/entry/2015/04/02/160721">FireFox + KeySnail でEmacsキーバインドなWebブラウジング環境を作った話</a></p>
</blockquote>

<h2>ランチャー</h2>

<p>Executer というのをいれる．<br>
<code>Alt + Space</code>で起動できるようにすればおｋかな．ショートカットも追加できるのがgood．</p>

<blockquote>
<p><a href="http://executor.dk/">Welcome to Executor</a></p>
</blockquote>

<h2>アプリケーション切り替え</h2>

<p><code>Alt + Tab</code> で Mac の <code>Command + Tab</code> ができます．</p>

<h2>画面分割</h2>

<p>Mac では Spectable を利用していたけど，Win はデフォルトのキーバインドでできる．いいね．</p>

<ul>
<li><code>Win + →</code> : 右半分</li>
<li><code>Win + ←</code> : 左半分</li>
<li><code>Win + ↑</code> : 最大化</li>
<li><code>Win + ↓</code> : 最小化</li>
</ul>

<h2>シェル環境を整える</h2>

<p>ここが貧弱というのがよく聞く話なので，色々調べてみる．</p>

<p>Babun というものが良いという噂をすこし耳にする．</p>

<blockquote>
<p><a href="https://github.com/babun/babun">babun/babun</a><br>
<a href="http://qiita.com/syui/items/2c51a33a3ca82999bea2">Windowsのターミナル環境を整える vol.1</a><br>
<a href="http://blog.drikin.com/2015/01/windows-2.html">Windowsはターミナルがダメだから使えないってのは過去の話?</a></p>
</blockquote>

<p>以下の公式からダウンロードし，<code>install.bat</code> を実行すると，ホームディレクトリの <code>.babun</code> 以下にインストールされる．アンインストールの際にはこれを削除すればよいらしい．</p>

<blockquote>
<p><a href="http://babun.github.io/">Babun - a windows shell you will love!</a></p>
</blockquote>

<h3>emacs</h3>

<p>Babun では，<code>pact</code>と呼ばれるパッケージマネージャが利用されているらしい．<code>apt-get</code>や<code>yum</code>と同じような役割だ．とりあえず，Emacs がほしいのでインストールしておく．<br>
babun を立ち上げて，以下を実行．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pact install emacs</span></code></pre></td></tr></table></div></figure>

<h3>Chocolatey</h3>

<p>Mac で利用していた Homebrew のようなもの．<br>
ただし，アンインストールはインストールした各アプリケーションに従って主導で行う必要がある．</p>

<p><a href="http://yuukiar.co/blog/2015/04/04/windows-chocolatey/">ここ</a>を参考に，コマンドプロンプトを管理者権限で実行し，以下を実行すると，インストールされると共にパスが通る．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@powershell -NoProfile -ExecutionPolicy unrestricted -Command "(iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))) &gt;$null 2&gt;&1" && SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin</span></code></pre></td></tr></table></div></figure>

<p>バージョンの確認ができればOK．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;clist -lo
</span><span class='line'>Chocolatey v0.9.9.6
</span><span class='line'>0 packages installed.</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p><a href="http://yuukiar.co/blog/2015/04/04/windows-chocolatey/">Windows 7でパッケージ管理システム「Chocolatey」を導入する</a></p>
</blockquote>

<h3>Cask</h3>

<p>自分はGithubに<code>.emacs.d</code>をあげているので，こちらもダウンロードする．Cask を利用しているので，まずは動作のために Python2 をいれる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>choco install python2</span></code></pre></td></tr></table></div></figure>

<p><code>chocolateyInstall.ps1</code> スクリプトを実行するか？聞かれるので <code>yes</code> を選択．</p>

<p>また，Caskインストールのために<code>curl</code>をインストール．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>choco install curl</span></code></pre></td></tr></table></div></figure>

<p>そして，<strong>管理者権限として実行した</strong> babun上から Cask をインストール．<a href="http://cask.readthedocs.org/en/latest/guide/installation.html#manual-installation">公式サイト</a>より．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python</span></code></pre></td></tr></table></div></figure>

<p>ホームディレクトリ下にダウンロードされる．<br>
zsh を利用するので，<code>.zprofile</code>に以下を追加．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=$PATH:/home/ユーザ名/.cask/bin</span></code></pre></td></tr></table></div></figure>

<p>あとは，<code>cask install</code> でOK．</p>

<blockquote>
<p><a href="http://knjname.hateblo.jp/entry/2014/12/08/035828">WindowsでEmacsのClojure開発環境を立ち上げる</a></p>
</blockquote>

<h3>シンボリックリンク</h3>

<p>Win のコマンドプロンプトを管理者権限で実行し，<code>mklink</code>を利用することでシンボリックリンクを張れる．babunのホームディレクトリは<code>C:\Users\ユーザ名\.babun\cygwin\home\ユーザ名\</code>になっているはず(なんだそれは&#8230;)．Cドライブ以下にアクセスするためには，<code>/cygdrive/c</code>以下にアクセスする必要があるそうだ．よくわからないので，勉強したほうがいいかも&#8230;<br>
とりあえずは快適な利用のために，利用したいディレクトリのシンボリックリンクをCygwinのホーム直下に張っておきたい．使い方は以下．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mklink リンク ターゲット</span></code></pre></td></tr></table></div></figure>

<p>ディレクトリのシンボリックリンクを作成したい場合は<code>\D</code>オプションをつける．また，フルパスで指定しないとうまくいかない．<br>
自分は，マイドキュメントとDropboxのシンボリックリンクを張っておいた．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mklink /D C:/Users/ユーザ名/.babun/cygwin/home/ユーザ名/Dropbox C:/Users/ユーザ名/dropbox</span></code></pre></td></tr></table></div></figure>

<p>好きなものを張っておく．</p>

<blockquote>
<p><a href="http://qiita.com/opengl-8080/items/c2b6a93dfca5b61f9e6a">Windowsでハードリンクやシンボリックリンクを作成する</a><br>
<a href="https://sites.google.com/site/hymd3a/cygwin#TOC-2011-11-24-">cygwin - ひゃまだのブログ</a></p>
</blockquote>

<h3>.zshrc</h3>

<p>babun はデフォルトで oh-my-zsh がインストール済だけど，自分は個人用設定を共有したかったので，これは使わない．<br>
<code>.zshrc</code>をMac/Win間で共有するために，ホーム直下に<code>.dotfiles</code>というディレクトリを置き，Gitの管理下に置いたうえで，中身の<code>.zshrc</code>からシンボリックリンクを張っておいた．</p>

<p>ここで，<code>.zshrc</code>を置き換えると，以下のようなエラーが発生．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ignore insecure directories and continue [ny]?</span></code></pre></td></tr></table></div></figure>

<p>どうやら，パーミッション関係の問題らしい．<a href="http://www.wezm.net/technical/2008/09/zsh-cygwin-and-insecure-directories/">こちら</a>を参考にパーミッションの設定をし直す．babun を管理者権限で立ち上げ，以下を実行した．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod g-w /usr/share/zsh/site-functions /usr/share/zsh/5.0.6/functions /usr/share/zsh /usr/share/zsh/5.0.6
</span><span class='line'>$ compaudit</span></code></pre></td></tr></table></div></figure>

<h3>フォント</h3>

<p>Rictyフォントがお気に入りなんだけど，合成だのなんだのは面倒なので，<code>Ricty Diminished</code>を利用する．<a href="https://github.com/yascentur/RictyDiminished">yascentur/RictyDiminished</a>からZIPをダウンロードし，フォントをインストールする．</p>

<p>その後，Babunに設定する．Babun は Mintty というコンソールを利用しています．なので，Mintty の設定をいじろう．設定ファイルの場所は<code>~/home/ユーザ名/.minttyrc</code>にある．ここでフォントの種類やサイズを設定する．ウインドウの透過度も決められます．</p>

<p>設定のための<a href="http://mintty.googlecode.com/svn-history/r1065/trunk/docs/mintty.1.html">マニュアル</a>を参考にするとよい．</p>

<blockquote>
<p><a href="http://qiita.com/d9magai@github/items/b988f4c881cfa1261512">Cygwinのターミナルエミュレータminttyの導入</a><br>
<a href="https://121ware.com/qasearch/1007/app/servlet/relatedqa?QID=012622">Windows 7でインストール済みのフォント一覧を表示する方法</a><br>
<a href="http://nelog.jp/how-to-use-ricty-diminished-font">見やすいプログラミング用フォント「Ricty Diminished」をWindowsにインストールしてSublime Textで利用する方法</a></p>
</blockquote>

<h2>その他</h2>

<p><code>sudo</code> したいんだけど，なんとかならないかなぁ，とか．</p>

<blockquote>
<p><a href="http://unavoidablereset.blog.fc2.com/blog-entry-15.html">cygwinでsudo解決編 - バグ#予想不可能回避不可能</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリケーションの実行時の振る舞いについて]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/30/ios-02/"/>
    <updated>2015-05-30T11:18:52+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/30/ios-02</id>
    <content type="html"><![CDATA[<p>iOSアプリケーションの構造がよくわからなかったので，とりあえず実行時の振る舞いから理解していくためのまとめ．</p>

<!-- more -->

<p>以下の初心者用ガイドを一通りやった．</p>

<blockquote>
<p><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/">Start Developing iOS Apps Today: Setup - Apple Developer</a></p>
</blockquote>

<p>ちなみに，上記サイトの使用言語は Swift ではなく Objective-C．</p>

<h2>1. アプリケーション実行時の振る舞い</h2>

<p>アプリケーション起動時にはどのようなことが起きるのだろうか？Swift でも Objective-C でも，記述方法が違うだけでやってることは同じはずなので，結局何をしているのか？を公式ドキュメントから抽出してみる．</p>

<h3>やっていること</h3>

<p><code>UIApplicationMain</code>関数が呼び出され，以下の2つのインスタンスが生成される．</p>

<ul>
<li><code>UIApplication</code>クラスのインスタンス生成(<strong>application object</strong>)

<ul>
<li>イベントループを開始する</li>
<li>アプリケーションの基盤となる</li>
</ul></li>
<li><code>AppDelegate</code>クラスのインスタンス生成(<strong>app delegate</strong>)

<ul>
<li>コンテンツ描画のためのウインドウを管理する</li>
<li>状態遷移を管理する</li>
</ul></li>
</ul>

<p><em>application object</em> が <em>app delegate</em> 上に定義されたメソッドを呼び出し，記述されたコードを実行する．コードを見てみると，<code>UIApplicationMain</code>関数に<code>AppDelegate</code>クラスが渡され，紐づけられているようだ．</p>

<h2>2. App Delegate について</h2>

<p>アプリケーションを開発する上で関わりが深いのは<code>AppDelegate</code>だろう．初心者用ガイドに書かれていたことをメモしておく．</p>

<h3>window 属性</h3>

<p>コンテンツが描画されるウインドウが格納される</p>

<h3>重要メソッドのスケルトン</h3>

<p>アプリケーションが特殊な状態に陥った場合&#8230;アプリケーションの実行時，メモリ不足時，アプリケーション終了時など&#8230;には，<em>application object</em> が <em>app delegate</em> 内の対応したメソッドが呼び出す．デフォルトでは，対応した各メソッドのスケルトンが定義されている．これらの中身が空，もしくは削除されている場合には，デフォルトの振る舞いが呼び出される．必要に応じて記述すれば良い．</p>

<h2>3. Objective-C と Swift での違いについて</h2>

<p>開発言語は Swift を使用する予定だけど，気になったのでメモしておく．実行時の振る舞いに関係する各ソースコードを示したのちに，その違いについて考えてみる．各ソースコードは，Xcode で Single View Application を作成した時のテンプレ．中略の部分は，スケルトンコードが書かれていた部分．</p>

<h3>Objective-C</h3>

<p><code>AppDelegate</code>が定義されたファイルの他に，<code>main.m</code>がある．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Objective-C'><span class='line'><span class="c1">//////////</span>
</span><span class='line'><span class="c1">// main.m</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;AppDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// UIApplicationMain関数に，AppDelegateクラスを渡している．</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////////////////</span>
</span><span class='line'><span class="c1">// AppDelegate.h</span>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AppDelegate</span> : <span class="bp">UIResponder</span> <span class="o">&lt;</span><span class="bp">UIApplicationDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////////////////</span>
</span><span class='line'><span class="c1">// AppDelegate.m</span>
</span><span class='line'><span class="cp">#import &quot;AppDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AppDelegate</span> <span class="p">()</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">AppDelegate</span>
</span><span class='line'><span class="c1">// 中略</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Swift</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">/////////////////////</span>
</span><span class='line'><span class="c1">// AppDelegate.swift</span>
</span><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Main関数の自動実装？</span>
</span><span class='line'><span class="p">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="k">class</span> <span class="nl">AppDelegate</span><span class="p">:</span> <span class="bp">UIResponder</span><span class="p">,</span> <span class="bp">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">window</span><span class="p">:</span> <span class="bp">UIWindow</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSObject</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 中略</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Objective-C では，単純に<code>UIApplicationMain</code>関数に<code>AppDelegate</code>クラスを渡しているが，Swift の<code>@UIApplicationMain</code>とはなんなのか？<br>
探してみると，同じ疑問を抱いている人がいた．</p>

<blockquote>
<p><a href="http://stackoverflow.com/questions/24516250/what-does-uiapplicationmain-mean">swift - What does &quot;@UIApplicationMain&quot; mean? - Stackoverflow</a></p>
</blockquote>

<p>そもそも，iOSアプリケーションにおける<code>main</code>関数の主な役割は以下の2つである．</p>

<ul>
<li>C プログラムの入り口になる</li>
<li><code>UIApplicationMain</code>関数の呼び出し</li>
</ul>

<p>要は，<code>UIApplicationMain</code>関数と<code>AppDelegate</code>クラスをひもづけられれば良いようだ．これを実現するために，Swift では <strong>Attributes</strong> が用いられている．</p>

<p>Attributes とは定義や型に関して情報を補足するもので，先頭に<code>@</code>を付加して記述する．</p>

<blockquote>
<p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html">Attributes - iOS Developer Library</a></p>
</blockquote>

<p>公式ドキュメントでは，<code>UIApplicationMain</code> attirbute について以下のように記述されている．</p>

<blockquote>
<p>UIApplicationMain<br>
Apply this attribute to a class to indicate that it is the application delegate. Using this attribute is equivalent to calling the UIApplicationMain function and passing this class’s name as the name of the delegate class.</p>
</blockquote>

<p>まとめると&#8230;</p>

<ul>
<li><code>UIApplicationMain</code> attributes は<code>AppDelegate</code>クラスに付加する</li>
<li><code>UIApplicationMain</code> 関数を呼び出せる</li>
<li>付加されたクラスのクラス名を，<code>delegate class</code> のクラス名として登録する</li>
</ul>

<p>つまり，Objective-C における Main 関数と同等に振る舞うということらしい．ちなみに，この attributes を利用する代わりに<code>main.swift</code>を作成することもできるそうだ．</p>

<p>同じことをやっていることはわかっていたけど，やっぱり公式ドキュメントに記述を発見できたり，明確な理由付けができると，落ち着く．</p>

<h2>参考</h2>

<blockquote>
<p><a href="http://qiita.com/shu223/items/437d9a9a3502800a891b">Objective-C で書いたアプリを Swift で書き換える5ステップ - Qiita</a><br>
<a href="http://tomoyaonishi.hatenablog.jp/entry/2015/03/22/144246">SwiftのAttributesをまとめた。 - tomoyaonishiのブログ</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift] 関数とクロージャについて]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/29/swift-func/"/>
    <updated>2015-05-29T15:46:10+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/29/swift-func</id>
    <content type="html"><![CDATA[<p>クロージャって何？？？と思ったので．</p>

<!-- more -->

<h2>関数</h2>

<p>クロージャについてまとめる前に，まず関数について理解する．</p>

<h3>定義</h3>

<p><code>func</code>で宣言し，返り値は<code>-&gt;</code>を用いる．<br>
返り値は複数指定可能．<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">testFunc</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nl">first</span><span class="p">:</span><span class="n">Int</span><span class="p">,</span> <span class="nl">second</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span><br>
</span><span class='line'><span class="p">}</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<h3>特徴</h3>

<p>Swiftの関数には以下の特徴がある．</p>

<ol>
<li>可変数の引数を指定可能</li>
<li>ネストして宣言可能</li>
<li>引数に指定可能</li>
<li>返り値に指定可能</li>
</ol>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">// 1. 可変数の引数を指定可能</span>
</span><span class='line'><span class="c1">//    引数を配列で指定できる．</span>
</span><span class='line'><span class="k">func</span> <span class="nf">sumOf</span><span class="p">(</span><span class="nl">numbers</span><span class="p">:</span> <span class="n">Int</span><span class="p">...)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>        <span class="c1">// 21</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">597</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>   <span class="c1">// 651</span>
</span><span class='line'>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">// 2. ネストして宣言可能</span>
</span><span class='line'><span class="c1">//    ネストした関数は，外の関数の変数にアクセス可能</span>
</span><span class='line'><span class="k">func</span> <span class="n">returnFifteen</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">add</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">+=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">add</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">returnFifteen</span><span class="p">()</span>     <span class="c1">// 15</span>
</span><span class='line'>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">// 3. 引数に指定可能</span>
</span><span class='line'><span class="c1">// 数値のリストと条件となる関数を与えると，</span>
</span><span class='line'><span class="c1">// 条件にマッチした数値がリスト内に存在するか調べる関数．</span>
</span><span class='line'><span class="k">func</span> <span class="n">hasAnyMatches</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">],</span> <span class="nl">condition</span><span class="p">:</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">conition</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 10より小さい値ならば true</span>
</span><span class='line'><span class="k">func</span> <span class="n">lessThanTen</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span>
</span><span class='line'><span class="n">hasAnyMathces</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">lessThanTen</span><span class="p">)</span>    <span class="c1">// true</span>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span>
</span><span class='line'><span class="n">hasAnyMathces</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">lessThanTen</span><span class="p">)</span>    <span class="c1">// false</span>
</span><span class='line'>
</span><span class='line'><span class="c1">///////////////////////////</span>
</span><span class='line'><span class="c1">// 4. 返り値に指定可能</span>
</span><span class='line'><span class="k">func</span> <span class="n">makeIncrementer</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ネストした関数</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">addOne</span><span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// ネストして宣言された関数をそのまま返す</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">addOne</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>クロージャとは？</h2>

<p>実行可能なコードブロックのこと&#8230;?<br>
一言で言い表そうとすると難しい．公式では，<code>関数は再利用が可能な特別なクロージャである．</code>と言われている．</p>

<h3>宣言</h3>

<p>とりあえず，書き方を見てみる．<br>
名前が省略可能で，<code>{}</code>で囲んで記述する．引数と返り値の後に<code>in</code>を記述してから本体を記述する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// クロージャ</span>
</span><span class='line'><span class="k">var</span> <span class="nl">greetClosure</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span>
</span><span class='line'><span class="n">paramClosure</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 関数でも同様の振る舞いを定義をしてみる</span>
</span><span class='line'><span class="k">func</span> <span class="n">greetFunc</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 実行結果はどちらも変わらない．</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">greetClosure</span><span class="p">(</span><span class="s">&quot;tasuwo&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">greetFunc</span><span class="p">(</span><span class="s">&quot;tasuwo&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>これだけだと，クロージャの意味がイマイチわからない．つまり，なぜ関数じゃダメなのか？<br>
自分なりの解釈だが，クロージャの良い点は<strong>複数の処理の記述をコンパクトにまとめられること</strong>なのではと思う．<br>
例えば，<code>map</code>を例にとって考える．<br>
<code>map</code>はクロージャを引数にとり(つまり，関数を与えても問題はない)，配列の各値にその関数を適用・変換する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">numArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="c1">// 配列の各値を三倍にする</span>
</span><span class='line'><span class="n">numArray</span><span class="p">.</span><span class="n">map</span><span class="p">({</span>
</span><span class='line'>    <span class="p">(</span><span class="nl">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<p>クロージャは，引数や返り値の型が自明である時，その指定を省略可能である．また，返り値が1つに減退されている場合には，<code>return</code>も記述しなくて良い．<br>
よって，以下のように記述を省略できる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">numArray</span><span class="p">.</span><span class="n">map</span><span class="p">({</span>
</span><span class='line'>    <span class="n">number</span> <span class="k">in</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<p>記述がかなりコンパクトになったし，何をしているのかも一目見れば大体わかる．<br>
また，第二引数を以下のように外に出す書き方もできるそうだ．自分はこれを知らなくて，以下のような記述を見るたびに(なんだこれは&#8230;?)と頭をひねっていた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">numArray</span><span class="p">.</span><span class="n">map</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">number</span> <span class="k">in</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>もう一つの例を見てみる．<br>
<code>sorted</code>は，与えられた配列を並び替える．クロージャを引数にとると，その内容に従って並び替える．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">numArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">sortedNum</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">numArray</span><span class="p">){</span>
</span><span class='line'>    <span class="p">(</span><span class="nl">str1</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">str2</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">str1</span> <span class="o">&gt;</span> <span class="n">str2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>引数，返り値の型と，<code>return</code>を省略する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">sortedNum</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">numArray</span><span class="p">){</span>
</span><span class='line'>    <span class="n">str1</span><span class="p">,</span> <span class="n">str2</span> <span class="k">in</span> <span class="n">str1</span> <span class="o">&gt;</span> <span class="n">str2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>さらに，自分自身が引数となっている時，自身の引数を<code>$0,$1...</code>で記述可能．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">sortedNum</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">numArray</span><span class="p">){</span><span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>これでかなり省略できる．</p>

<h1>参考文献</h1>

<blockquote>
<p><a href="http://qiita.com/yuinchirn/items/2ebb6fed6de0c9c1c3c9">Swift さくっと確認したい基礎文法 クロージャ(closure)<br>
</a><br>
<a href="http://qiita.com/mst/items/b18e9531ac0cbdf2f3c3">swift Sort関数とClosure</a><br>
<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html">A Swift Tour</a><br>
<a href="http://chicketen.blog.jp/archives/14886216.html">iOS Swiftのクロージャを使う</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift] Optional型まとめ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/29/swift/"/>
    <updated>2015-05-29T14:22:24+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/29/swift</id>
    <content type="html"><![CDATA[<p>Optional型がよくわからなかったのでまとめておく．<br>
定義のメモだけなので，使い方とかもそのうち追記していきたい．</p>

<!-- more -->

<h2>Optional型とは？</h2>

<p><strong>nil を許す型</strong>のこと．</p>

<h2>宣言</h2>

<p>型に<code>?</code>を付加すると，Optional型を宣言できる．<br>
ちなみに<code>T?</code>は<code>Optional&lt;T&gt;</code>のシンタックスシュガー．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">optionalSuger</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>           <span class="c1">// Optional型の宣言．初期値はnil．</span>
</span><span class='line'><span class="k">var</span> <span class="nl">optional</span><span class="p">:</span>      <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>  <span class="c1">// Int? と同じ意味</span>
</span><span class='line'><span class="k">var</span> <span class="nl">notOptional</span><span class="p">:</span>   <span class="n">Int</span>            <span class="c1">// 非Optional型．初期値は空(nilですらない)</span>
</span></code></pre></td></tr></table></div></figure>

<h2>wrap と unwrap</h2>

<p><code>T</code>と<code>T?</code>は違う型．<br>
同様に扱うためには<strong>unwrap</strong>する必要がある．</p>

<ul>
<li><strong>unwrap</strong>とは？

<ul>
<li>Optional<T>型から<code>T</code>型の変数を取り出すこと．</li>
</ul></li>
</ul>

<p><strong>unwrap</strong>の方法には以下の4種類がある．</p>

<ol>
<li>Forced unwrapping</li>
<li>Optional Chaining</li>
<li>Optional Binding</li>
<li>比較演算子</li>
</ol>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// Optional型の宣言</span>
</span><span class='line'><span class="k">class</span> <span class="n">Dog</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">bark</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;BowWow!&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="nl">wrappedDog</span><span class="p">:</span> <span class="n">Dog</span><span class="o">?</span> <span class="o">=</span> <span class="n">Dog</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// 1. Forced Unwrapping</span>
</span><span class='line'><span class="c1">//    「!」を付加する．</span>
</span><span class='line'><span class="c1">//    値が nil だった場合はランタイムエラー．</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">wrappedDog</span><span class="o">!</span><span class="p">.</span><span class="n">bark</span><span class="p">)</span>           <span class="c1">// &quot;BowWow!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// 2. Optional Chaining</span>
</span><span class='line'><span class="c1">//    「?」を付加する</span>
</span><span class='line'><span class="c1">//    値が nil だった場合は nil を返す．</span>
</span><span class='line'><span class="c1">//    最終的な戻り値は Optional型 となる．</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">wrappedDog</span><span class="o">?</span><span class="p">.</span><span class="n">bark</span><span class="p">())</span>         <span class="c1">// Optional(&quot;BowWow!&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// 3. Optional Binding</span>
</span><span class='line'><span class="c1">//    if，while 等の条件式内で宣言，代入されると unwrap される．</span>
</span><span class='line'><span class="c1">//    値が nil の場合は条件式が false となる．</span>
</span><span class='line'><span class="k">if</span> <span class="k">var</span> <span class="n">unwrappedDog</span> <span class="o">=</span> <span class="n">wrappedDog</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">unwrappedDog</span><span class="p">.</span><span class="n">bark</span><span class="p">())</span>    <span class="c1">// &quot;BowWow!&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">// 4. 比較演算子</span>
</span><span class='line'><span class="c1">//    比較演算子を使うと unwrap される．</span>
</span><span class='line'><span class="k">var</span> <span class="nl">wrappedInt</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">wrappedInt</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>            <span class="c1">// &quot;true&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Implicitly Unwrapped Optional型とは？</h2>

<p>型に<code>!</code>を付加すると，Implicitly Unwrapped Optional型を宣言できる．<br>
ちなみに<code>T!</code>は<code>ImplicitlyUnwrappedOptional&lt;T&gt;</code>のシンタックスシュガー．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">iuOptionalSuger</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>                              <span class="c1">// Implicitly Unwrapped Optional型の宣言．初期値はnil．</span>
</span><span class='line'><span class="k">var</span> <span class="nl">iuOptional</span><span class="p">:</span>      <span class="n">ImplicitlyUnwrappedOptional</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>  <span class="c1">// Int! と同じ意味</span>
</span><span class='line'><span class="k">var</span> <span class="nl">Optional</span><span class="p">:</span>        <span class="n">Int</span><span class="o">?</span>                              <span class="c1">// Optional型</span>
</span><span class='line'>
</span><span class='line'><span class="n">iuOptional</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Optional</span>   <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 自動的に unwrap される．</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">iuOptional</span><span class="p">)</span>    <span class="c1">// &quot;1&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">Optional</span><span class="p">)</span>      <span class="c1">// &quot;Optional(1)&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>比較演算子：??</h2>

<p>nil かどうか判定する比較演算子．<br>
<code>a ?? b</code>は<code>a != nil ? a! : b</code>のシンタックスシュガー．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">wrappedInt</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'><span class="n">ptinrln</span><span class="p">(</span><span class="n">wrappedInt</span> <span class="o">??</span> <span class="mi">2</span><span class="p">)</span>    <span class="c1">// &quot;2&quot;</span>
</span><span class='line'><span class="n">wrappedInt</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">wrappedInt</span> <span class="o">??</span> <span class="mi">2</span><span class="p">)</span>    <span class="c1">// &quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h1>参考サイト</h1>

<blockquote>
<p><a href="http://qiita.com/cotrpepe/items/518c4476ca957a42f5f1">Swift Optional 型についてのまとめ Ver2</a><br>
<a href="http://qiita.com/koher/items/c6f446bad54442a28bf4">SwiftのOptional型を極める</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[論文の管理に Mendeley を導入した話]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/14/mendeley/"/>
    <updated>2015-05-14T10:59:35+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/14/mendeley</id>
    <content type="html"><![CDATA[<p>何も大したことはしてないので雑記みたいな感じです．<br>
いつものことだけど，Mac OS X Yosemite での話です．</p>

<!-- more -->

<h2><a href="https://www.mendeley.com/dashboard/">Mendeley</a> を導入した</h2>

<p>フリーの文献管理アプリケーション．<br>
Win/Mac/Linux で使用可能．<br>
使ってみた感じを書いておく．</p>

<h3>悪い部分</h3>

<ul>
<li>論文情報の自動抽出はあまりあてにならない

<ul>
<li>海外製なので，日本語論文より英語論文の方が精度が良い(気がする)</li>
<li>というか，日本語論文でも英語タイトルの方が抽出されたりする</li>
</ul></li>
<li>「Google Scholar を参照して補完する」と聞いてすごいって思ったけどあまりあてにならない</li>
<li>たまにうまく表示されない PDF がある

<ul>
<li>保護されているものとか(しょうがない)</li>
<li>それ以外でも表示されない場合がある</li>
</ul></li>
<li>タグ付けは有用かとおもいきやそうでもなかった

<ul>
<li>いちいちつけるのが面倒になる</li>
</ul></li>
<li>日本語でキーワード検索できない

<ul>
<li><del>Spotlight使え</del></li>
</ul></li>
</ul>

<h3>良い部分</h3>

<ul>
<li>論文に Note をつけられるところ

<ul>
<li>今のところ一番うれしい</li>
<li>ダウンロードした時，なぜ有用だと思ったのかをメモっておくと，後から見返すときに便利</li>
</ul></li>
<li>他のデバイスとの同期が簡単

<ul>
<li>ストレージが2GB与えられる</li>
<li>足りなくなりそう</li>
</ul></li>
<li>iPhone/iPad からも利用できる

<ul>
<li>まだあまり活用してない</li>
<li>結構大きいと思う</li>
</ul></li>
</ul>

<h2>やったこと</h2>

<ol>
<li>論文PDF をダウンロード</li>
<li>ダウンロードしたPDF を Mendeley に追加</li>
</ol>

<p>という作業がだるい．</p>

<p>Mendeley には Watch Folder という機能がある．<br>
フォルダを指定すると，そのフォルダにPDFが追加された時に自動で取得できる．<br>
でも&#8230;</p>

<ul>
<li>ダウンロードフォルダを Watch Folder にしたくない

<ul>
<li>具体的には，PDF だけダウンロードするフォルダを別にして，そのフォルダを Watch Folder にしたい</li>
<li>別にダウンロードフォルダを Watch Folder にしても大丈夫(だと思う)だけど，気持ちの問題</li>
</ul></li>
</ul>

<p>なので，以下のようにした</p>

<ol>
<li>ダウンロードフォルダに PDF が追加されたら，専用フォルダに移動させる</li>
<li>専用フォルダを Watch Folder に指定する</li>
</ol>

<p>Automator を使ったら簡単に出来た．<br>
以下のサイトのソースをほぼコピペ．</p>

<blockquote>
<p><a href="http://www.virment.com/automator-tips/">Automatorのフォルダアクションを使った小技.ファイル自動振り分けとファイルの自動アップロード</a></p>
</blockquote>

<p>ありがとうございました．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開発モデルの話]]></title>
    <link href="http://tasuwo.github.io/blog/2015/05/07/model/"/>
    <updated>2015-05-07T09:48:27+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/05/07/model</id>
    <content type="html"><![CDATA[<p>開発モデルについて，調べる機会があったのでメモしておく．<br>
調査記録なので，間違い等が含まれる可能性がある．</p>

<!-- more -->

<h1>はじめに</h1>

<h2>開発プロセスとは</h2>

<p>開発の企画からリリース，運用・保守までの作業段階．以下のように分けられる．</p>

<ol>
<li>要件定義

<ul>
<li>機能やパフォーマンス等の条件の明確化</li>
</ul></li>
<li>基本設計(外部設計)

<ul>
<li>UIや入出力等</li>
</ul></li>
<li>詳細設計(内部設計)

<ul>
<li>具体的な機能の設計</li>
</ul></li>
<li>実装</li>
<li>単体テスト</li>
<li>結合テスト</li>
<li>総合テスト</li>
<li>導入・運用</li>
</ol>

<h2>開発モデルとは</h2>

<p>開発プロセスを実施する順番・形式をモデル化したもの．</p>

<h1>1. ウォーターフォールモデル</h1>

<p>最も基本的な開発モデル．前のプロセスの成果物を基に次のプロセスの作業を行う．</p>

<ul>
<li>主流．ドキュメントの作成量が多い．</li>
<li>大規模システム開発に有効とされる</li>
</ul>

<h3>メリット</h3>

<ul>
<li>計画を立て易い

<ul>
<li>各開発プロセスの区切りが明確で，流れを把握しやすい</li>
</ul></li>
<li>進捗管理がし易い</li>
</ul>

<h3>デメリット</h3>

<ul>
<li>上流工程でしか要件定義をしない</li>
<li>仕様変更の影響が強い

<ul>
<li>手戻りの発生</li>
</ul></li>
<li>成果物管理の稼働不可

<ul>
<li>成果物の作成が重みになる</li>
</ul></li>
</ul>

<h1>2. プロトタイピングモデル</h1>

<ul>
<li>比較的小規模な開発向け．</li>
<li>プロトタイプをユーザに提示し，システムの機能を確認してもらう

<ul>
<li>評価と改善を繰り替えし，要件に見合った製品を作り上げる</li>
</ul></li>
</ul>

<h3>メリット</h3>

<ul>
<li>設計段階でユーザの意見が取り入れられるため，手戻りが少なくなる</li>
</ul>

<h3>デメリット</h3>

<ul>
<li>プロトタイプ作りから始めるため，手間と費用がかかる</li>
</ul>

<h1>3. 繰り返し型開発モデル</h1>

<p>ウォーターフォールにおける，手戻りの大きいデメリットを改善するために考えられた．</p>

<h2>3.1 スパイラルモデル</h2>

<p>ソフトウェア全体を，独立性の高いサブシステムに分割する</p>

<ul>
<li><code>要件定義⇒設計⇒プログラミング⇒テスト</code> の流れを繰り返す</li>
<li>開発のリスクが最小となるように改良しながらシステムを育てる

<ol>
<li>リスク分析・代替手段評価</li>
<li>開発と検証</li>
<li>次のフェーズの計画</li>
<li>目標の設定・代替手段検討</li>
</ol></li>
</ul>

<h3>メリット</h3>

<ul>
<li>リスクの現象が計れる</li>
<li>大きな手戻りが発生しにくい

<ul>
<li>ユーザとの認識の違い，設計・要件定義のミスを早期発見可能</li>
</ul></li>
<li>仕様変更に対応しやすい</li>
</ul>

<h3>デメリット</h3>

<ul>
<li>システムの分割方法によっては運用しにくい</li>
<li>ユーザに仕様変更の余地を与えてしまう</li>
<li>プロジェクト全体の管理が困難

<ul>
<li>終了時期の見極めが難しい</li>
</ul></li>
</ul>

<h2>3.2 インクリメンタルモデル(漸増型)</h2>

<p>要求を一度に全て実現するのではなく，開発単位毎に新規の増分を追加していく．<br>
スパイラルモデルとは，繰り返しの範囲が異なる．<br>
スパイラルモデルは <code>要求定義〜テスト工程</code> を繰り返すが，インクリメンタルモデルは要求定義は最初の1回だけ行い，それ以後の <code>設計〜テスト工程</code> のみを繰り返す．</p>

<ul>
<li>最初にシステム全体の要求定義を行う

<ul>
<li>ソフトウェアを独立性の高い機能に分割する</li>
</ul></li>
<li>機能ごとに並行して開発を行う

<ul>
<li>各機能について段階的にリリースする</li>
</ul></li>
</ul>

<h3>メリット</h3>

<ul>
<li>機能毎のソフトウェア構造がまったく異なるもの，依存関係のないものに適している

<ul>
<li>繰り返しの単位の独立性が保てる</li>
</ul></li>
<li>機能毎に開発する

<ul>
<li>全ての機能が揃っていなくても，最初のリリースからシステムの動作を確認できる</li>
</ul></li>
</ul>

<h3>デメリット</h3>

<ul>
<li>開発単位間に共通した構造が存在した場合，二重に開発を行ってしまう

<ul>
<li>保守性に問題が生じる</li>
</ul></li>
<li>細部まで作り込んでしまうと，修正が大変</li>
</ul>

<h2>3.3 イテレーションモデル(反復型)</h2>

<p>何度も薄く色を塗ることで，最終的にしっかりとした色へもっていくイメージ．<br>
スパイラルモデルとの違いは，分割の仕方．<br>
スパイラルモデルは <code>設計〜テスト工程</code> を繰り返すが，イテレーションモデルは <code>機能追加</code> の工程を繰り返し，各機能の完成度を高めていく．</p>

<ul>
<li>ソフトウェアの全体，あるいは部分について，最初は薄く作り，少しずつ肉付けしていく

<ul>
<li>システムの要素をとりあえず完成させ，段階的に要素を開発・追加してく</li>
</ul></li>
<li>OS の開発に向いている

<ul>
<li>どんなモジュールからも呼び出すカーネル(プロセス管理等)を先に開発する</li>
<li>カーネルのモジュールを利用しながらシェルを追加して行く</li>
</ul></li>
</ul>

<p>エヴォリューショナルモデルと同義(たぶん&#8230;)．</p>

<h3>メリット</h3>

<ul>
<li>徐々に確認しながら肉付けし，中身を濃くしていける

<ul>
<li>非常に重要かつ複雑なソフトウェアの箇所に対して有効</li>
</ul></li>
</ul>

<h3>デメリット</h3>

<ul>
<li>ユーザーの要求が発散してしまい，ソフトウェアがいつまでたっても完成しないリスクがある</li>
</ul>

<h2>UP(Unified Process)</h2>

<p>開発モデルというわけじゃないけど，このタイミングで書いておく．<br>
UP は有名な反復型プロセス(イテレーション + インクリメンタル)フレームワーク．<br>
実際の現場では，インクリメンタルモデル，イテレーションモデルをミックスした戦略がよくとられる．</p>

<ul>
<li>機能単位の開発：インクリメンタル戦略</li>
<li>コアアーキテクチャの開発：イテレーション戦略</li>
</ul>

<h3>最終目標</h3>

<p>品質の高いソフトウェアを開発するためのガイドラインを提供する</p>

<h3>思想</h3>

<ul>
<li>ユーザーの求める真の要求を満足させる</li>
<li>要求や環境の変化に対応できる</li>
<li>ソフトウエア開発のリスクを減少させる</li>
<li>再利用可能なコンポーネントベースのシステムを実現する</li>
</ul>

<h3>アプローチ</h3>

<ul>
<li>ユースケース駆動

<ul>
<li>ユースケースを出発点として開発する</li>
<li>反復の度に1つ以上のユースケースを実装していく</li>
</ul></li>
<li>アーキテクチャセントリック

<ul>
<li>アーキテクチャ中心で開発する</li>
<li>開発早期でアーキテクチャを確立する</li>
<li>開発者視点ではなく，ユーザ視点(ユースケース)から考える

<ul>
<li>開発者視点の関連モジュールではなく，ユースケースを実現するモジュール群を優先して開発する</li>
</ul></li>
</ul></li>
<li>反復型開発

<ul>
<li>要求，成果物，人，リスク等を管理しつつ，マイルストーンを設定した計画のもとで反復開発を行う</li>
</ul></li>
</ul>

<h3>フェーズ</h3>

<ol>
<li>インセプション(方向づけ)フェーズ

<ul>
<li>アイデアのプロトタイプの開発と評価</li>
<li>開発を進めるべきか，止めるべきかを判断する</li>
</ul></li>
<li>エラボレーション(推敲)フェーズ

<ul>
<li>システム構築のための核となるアーキテクチャベースラインを作る</li>
<li>骨組みと黄金ルート(必ず通る基本のルート)を作る</li>
</ul></li>
<li>コンストラクション(作成)フェーズ

<ul>
<li>システムとして仕上げる</li>
<li>β版のリリースが目標</li>
</ul></li>
<li>トランジション(移行)フェーズ

<ul>
<li>β版のリリース</li>
<li>フィールドでの評価結果の反映.</li>
</ul></li>
</ol>

<h2>3.4 アジャイルプロセスモデル</h2>

<ul>
<li>重厚長大な開発手法(UP)に対するアンチテーゼ

<ul>
<li>小さいシステムはもっと簡単に作っても良い</li>
</ul></li>
<li>状況に対して柔軟かつ迅速に対応する</li>
<li>イテレーションを区切り，必須度の高い機能から定義・開発して行く</li>
</ul>

<h3>メリット</h3>

<ul>
<li>最低限だが使用可能なソフトを早期リリース可能</li>
<li>優先度の低い開発を後続のイテレーションに後回しに出来る</li>
</ul>

<h3>デメリット</h3>

<ul>
<li>大規模システムに向かない</li>
<li>場当たり的なシステムになってしまう可能性がある</li>
<li>習熟した技術者によってのみ成し遂げられる</li>
</ul>

<h1>参考文献</h1>

<blockquote>
<p><a href="http://www.linuxacademy.ne.jp/lablog/programmer/98/">開発手法の基礎、ウォーターフォールモデルの特徴とは</a><br>
<a href="http://gihyo.jp/lifestyle/serial/01/ipa-terminology/0012">第12回　システム開発の工程とソフトウェア開発モデル | めざせ!情報処理技術者試験</a><br>
<a href="http://monoist.atmarkit.co.jp/mn/articles/1011/25/news112.html">【問題5】ソフトウェア開発モデルについて</a><br>
<a href="http://www.itmedia.co.jp/im/articles/0310/08/news001.html">第10回 開発プロセスの上手な組み合わせ</a><br>
<a href="http://d.hatena.ne.jp/incarose86/20121117/1353144430">インクリメンタル開発とイテレーション開発</a><br>
<a href="http://itpro.nikkeibp.co.jp/article/lecture/20070221/262716/">Part1　Unified Process，その生い立ちと構造を知る</a><br>
<a href="http://hhhuang.homelinux.com/lectures/OO_Dalian/Lesson05.pdf">第5講 オブジェクト指向開発とは何か</a><br>
<a href="http://itpro.nikkeibp.co.jp/article/lecture/20070221/262716/">Part1 Unified Process，その生い立ちと構造を知る</a><br>
<a href="http://codezine.jp/article/detail/6423">第１回 RUPはどこに消えたのか？</a><br>
<a href="http://blog.livedoor.jp/yasuyukimiyoshi/archives/51283739.html">テーマ０１：ソフトウェア開発モデル</a><br>
<a href="http://stackoverflow.com/questions/3897335/whats-the-difference-between-incremental-software-process-model-evolutionary-m">What&#39;s the difference between incremental software process model, evolutionary model, and the spiral model?</a><br>
<a href="http://www.it-shikaku.jp/top30.php?hidari=13-01-01.php&amp;migi=km13-01.php">1.ソフトウェア開発手法 - it-shikaku.jp</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MATLAB のコーディングガイドラインについてメモ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/04/28/matlab-guideline/"/>
    <updated>2015-04-28T12:13:30+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/04/28/matlab-guideline</id>
    <content type="html"><![CDATA[<p>研究で MATLAB を利用しているので，コードを綺麗にかくためのメモ．</p>

<!-- more -->

<h2>コーディング作法</h2>

<p>MATLAB のコードを書く際のコーディング作法を記述しているドキュメントを発見した．</p>

<blockquote>
<p><a href="http://www.mathworks.com/matlabcentral/fileexchange/46056-matlab-style-guidelines-2-0">MATLAB Programming Style Guidelines 2.0 | MATLAB CENTRAL</a></p>
</blockquote>

<p>日本語訳をしていらっしゃる方もいて素晴らしい．</p>

<blockquote>
<p><a href="http://myenigma.hatenablog.com/entry/20120103/1325575787#fn-a7d7d54e">MATLAB Programming Style Guidelines 1 - はてなダイアリー</a></p>
</blockquote>

<p>自分はプログラミング経験が浅いので，とても参考になる．コードがぐっと見やすくなった．</p>

<h2>単体テスト</h2>

<p>作成しているツールの規模が大きくなってきたので，しっかりテストしたいと思うようになってきた．MATLAB には単体テスト用のフレームワークが用意されているようだ．</p>

<blockquote>
<p><a href="http://jp.mathworks.com/help/matlab/write-unit-tests-1.html">単体テストの作成 - MATLAB &amp; Simulink - MathWorks 日本</a><br>
<a href="http://blog.smooth-works.net/archives/2183">スムーズワークス日想 » Blog Archive » m-fileに品質を！（2）</a><br>
<a href="http://d.hatena.ne.jp/hkob/20131226">Jenkins 導入と MATLAB の自動テスト (教員のための Mac Tips:9)</a></p>
</blockquote>

<p>Jenkins による継続的インテグレーションにも興味があるので，気が向けば触れてみたいと思う．具体的なやり方については，そのうちまとめる．たぶん．</p>

<h2>その他の参考文献</h2>

<blockquote>
<p><a href="http://blog.smooth-works.net/archives/2901">MATLABプログラミングスタイル | スムーズワークス日想 シミュレーション業界関連情報</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発初心者がTwitterクライアントを作成する その1]]></title>
    <link href="http://tasuwo.github.io/blog/2015/04/12/title/"/>
    <updated>2015-04-12T21:55:11+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/04/12/title</id>
    <content type="html"><![CDATA[<p>久しぶりの更新です．iOSアプリ作ってました．</p>

<!-- more -->

<h1>これはなに</h1>

<p>Twitterクライアントを使っていて，欲しい機能がなかったので安易な気持ちで手を出した．とりあえずの叩き台として，簡単なTwitterクライアントを作成した．<br>
知識ゼロからのスタートだったので，やったことを簡単にまとめておく．</p>

<h1>つくったもの</h1>

<p>とりあえず1週間くらいでつくった拙作が以下になります．</p>

<p><img src="http://tasuwo.github.io/images/tasuwotter.png" alt="tasuwotter"></p>

<blockquote>
<p><a href="https://github.com/tasuwo/tasuwotter">tasuwo/tasuwotter</a></p>
</blockquote>

<ul>
<li>できること

<ul>
<li>ホームタイムラインの表示と更新</li>
<li>メンションの表示と更新</li>
<li>ツイートする</li>
</ul></li>
<li>できないこと

<ul>
<li>その他全部</li>
</ul></li>
</ul>

<h1>前提知識</h1>

<ul>
<li>Xcode使用経験

<ul>
<li>なし</li>
</ul></li>
<li>iOS/Android アプリ開発経験

<ul>
<li>なし</li>
</ul></li>
<li>Twitter クライアント開発経験

<ul>
<li>なし</li>
</ul></li>
<li>Swift 使用経験

<ul>
<li>なし</li>
</ul></li>
<li>使用経験のある言語

<ul>
<li>C，C++，Java，<del>Common Lisp</del></li>
</ul></li>
</ul>

<h1>やったこと</h1>

<h2>はじまりからつまづくまで(悪い例)</h2>

<p>最初に見たサイト</p>

<blockquote>
<p><a href="http://qiita.com/mokumoku/items/bf0460f420acac3c04fc">(iOS)FabricでTwitterクライアントを作った</a></p>
</blockquote>

<p>Twitter産の SNS Framework である <a href="https://get.fabric.io">Fabric</a> を用いてTwitterクライアントを作成する，という内容．詳しいことは割愛．上記サイトの内容に従って以下を実行した．</p>

<ol>
<li>Fabric.app のダウンロード</li>
<li>Xcode プロジェクトの作成</li>
<li>Xcode プロジェクトに，Fabric SDK および Twitter Kit をダウンロード</li>
<li>サンプルコードをためす</li>
</ol>

<p>サンプルコードを動かしたところで，これ以上どう動けばいいかわからない．つまづく．</p>

<ol>
<li><a href="http://qiita.com/mokumoku/items/bf0460f420acac3c04fc">参考サイト</a>の著者様のソースコードを拝見する</li>
</ol>

<p>コードが読めない(swiftがわからない &amp; iOSアプリのアーキテクチャがわからない)．つまづく．</p>

<h2>やったほうがいいこと(良い例)</h2>

<h3>Apple のドキュメントを読む</h3>

<p>iOSアプリの開発経験がない場合は，まず公式のチュートリアルを一通りやると良い．</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/index.html#//apple_ref/doc/uid/TP40011343-CH2-SW1">Start Developing iOS Apps Today</a>

<ul>
<li>Apple 公式の初心者向け iOS アプリ作成ガイド</li>
<li>簡単な To-do list アプリを作成しながら，iOSアプリの仕組みと特徴について学べる</li>
<li>英語です</li>
</ul></li>
</ul>

<p>チュートリアルだけでは iOS アプリについて理解しきれないので，適宜公式のドキュメントを参照すると良い．</p>

<ul>
<li><a href="https://developer.apple.com">Apple Developer</a></li>
<li><a href="https://developer.apple.com/jp/">Apple Developer(日本語)</a>

<ul>
<li>Apple 公式の開発者用サイト</li>
<li><code>Resources(リソース) &gt; iOS Developer Library(日本語ドキュメントを見る)</code> でiOSのドキュメントを閲覧できる</li>
<li>日本語サイトよりも英語サイトのほうが情報量が多い上に最新</li>
</ul></li>
</ul>

<p>特に，自分が参考にしたドキュメントは以下．</p>

<ul>
<li><p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/index.html#//apple_ref/doc/uid/TP40006955">UIKit Framework Reference</a></p>

<ul>
<li>UIKit のリファレンス．クラスやメソッド等について調べたい時に</li>
<li>自分は特に以下のクラスについては目を通しておいた

<ul>
<li>UIApplication，UIApplicationDelegate，UIResponder，UIViewController</li>
</ul></li>
<li>英語です</li>
</ul></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">The Swift Programming Language</a></p>

<ul>
<li>Swift のドキュメント</li>
<li>とりあえず Swift Tour を通してやるべき</li>
<li>英語です</li>
</ul></li>
<li><p><a href="https://developer.apple.com/jp/documentation/ViewPG_iPhoneOS.pdf">iOS View プログラミングガイド</a></p></li>
<li><p><a href="https://developer.apple.com/jp/documentation/ViewControllerPGforiOS.pdf">iOS View Controller プログラミングガイド</a></p>

<ul>
<li>View と View Controller に関するガイド</li>
<li>画面遷移とからへんについて学びたい時に読むと良い</li>
<li>日本語です</li>
</ul></li>
<li><p><a href="https://developer.apple.com/jp/documentation/EventHandlingiPhoneOS.pdf">イベント処理カイド (iOS用)</a></p>

<ul>
<li>イベント処理について学ぶなら</li>
<li>日本語の方は少し古いけど，概要を学ぶだけならいいかもしれない</li>
</ul></li>
</ul>

<p>自分も各々隅々まで読んでいないので理解は大分あやしい．View Controller の役割についてはもう少しよく読む必要がある気がする．</p>

<h3>Twitter のドキュメントを読む</h3>

<p>iOS アプリについて大雑把に理解したら，Twitter のドキュメントを読んで利用の仕方を学ぶ．</p>

<ul>
<li><p><a href="https://dev.twitter.com/twitter-kit/ios">Twitter Kit for iOS | Twitter Developers</a></p>

<ul>
<li>Fabric の公式ドキュメント</li>
<li>「ログインの仕方」，「タイムラインの表示の仕方」，「ツイートの仕方」等，使用方法とサンプルコードがいくつか紹介されている</li>
</ul></li>
<li><p><a href="https://dev.twitter.com/twitter-kit/ios-reference">iOS Reference | Twitter Developers</a></p>

<ul>
<li>Twitter Kit に含まれるクラスのリファレンス</li>
<li>上記を一通り眺めた後に，より詳細に知りたい場合には参考にする</li>
</ul></li>
<li><p><a href="https://dev.twitter.com/twitter-kit/ios/api">Access Twitter&#39;s REST API | Twitter developers</a></p>

<ul>
<li>上記の公式ドキュメントのうちの一つ</li>
<li>Twitterクライアントは REST API を叩いて様々な情報を取得する．本ドキュメントに叩き方が書かれているので，あとは好きにやれば良い</li>
</ul></li>
<li><p><a href="https://dev.twitter.com/rest/public">REST APIs | Twitter Developers</a></p></li>
<li><p><a href="http://dx.24-7.co.jp/twitterapi1-1-rest-api/">【保存版】TwitterAPI1.1 REST API 全項目解説</a></p>

<ul>
<li>REST API の一覧</li>
<li>公式とその日本語訳がある</li>
</ul></li>
<li><p><a href="https://dev.twitter.com/rest/public/timelines">working with timeline | twiter developers</a></p>

<ul>
<li>タイムライン更新処理を適切に行うために必要な技術について記述されている</li>
<li>要約すると，<code>since_id</code> と <code>max_id</code> を，リクエスト発行の際にパラメータとして指定してやれば良い，ということ</li>
</ul></li>
</ul>

<h3>その他の参考サイト</h3>

<blockquote>
<p><a href="http://dev.classmethod.jp/smartphone/ios-fabric-sign-in-with-twitter/"><iOS> Fabric 入門 #1 アカウント登録 &amp; Twitter Kit を使ってログインする</a><br>
<a href="http://nonbiri-tereka.hatenablog.com/entry/2014/03/06/220015">Twitter API Timeline解説 | のんびりしているエンジニアの日記</a></p>
</blockquote>

<h1>総括</h1>

<ul>
<li>ドキュメントをいろいろ参考にして，簡単なTwitterクライアントを作成した</li>
<li>参考サイトにならって Storyboard を使用していないが，使用した場合の開発もしてみたい</li>
<li>これを叩き台として個性溢れるTwitterクライアントを作成していきたい</li>
</ul>

<p>途中つまった部分(Swift で Objective-C のライブラリを使うところとか)や得られた知識等，そのうちちょくちょくまとめていく予定．</p>

<h1>雑記</h1>

<p>ずっと iOS アプリの勉強をしていたら，他のことが進んでいない．組み込みの知識をつけたいので，自作OSの方も頑張っていこう．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lispメモ]]></title>
    <link href="http://tasuwo.github.io/blog/2015/03/24/land-of-lisp/"/>
    <updated>2015-03-24T12:49:43+09:00</updated>
    <id>http://tasuwo.github.io/blog/2015/03/24/land-of-lisp</id>
    <content type="html"><![CDATA[<p>Land of Lisp を読んでいるのでメモ．<br>
本ブログは自己啓発の意味合いもあるため，定期的に何かしらはブログにアップすることを目標にする．<br>
そのうち綺麗にまとめます．</p>

<!-- more -->

<ul>
<li><p>関数型プログラミング</p>

<ul>
<li>関数は，引数か関数内で宣言された変数しか参照せず，また値を返す以外の動作をしない．</li>
</ul></li>
<li><p>比較についてのルール</p>

<ul>
<li>シンボル同士は<strong>EQ</strong>で比較する</li>
<li>それ以外は<strong>EQUAL</strong>で比較する</li>
</ul></li>
<li><p>Common Lispでは，空リスト( &#39;(),(),&#39;nil,nil )が<strong>唯一の</strong>偽値</p></li>
<li><p>リストはコンスセルがつながってできている</p></li>
<li><p>コンスセルは<code>cons</code>コマンドで作られる</p></li>
<li><p><code>car</code>と<code>cdr</code>でリストの中身を調べることができる</p></li>
<li><p>Lispには<strong>コードモード</strong>と<strong>データモード</strong>がある</p>

<ul>
<li>デフォルトではコードモード</li>
<li>REPLへの入力は<strong>フォーム</strong>の形式でなくてはならない

<ul>
<li><code>(command bla bla bla bla ...)</code></li>
</ul></li>
<li><code>&#39;</code>(シングルクオート)を式に付加すると，データモードで扱われる(<strong>クオートする</strong>)</li>
<li>準クオート

<ul>
<li><strong>`</strong>(バッククオート)を付加した式の中で<code>,</code>(コンマ)を使用すると，一部分だけコードモードに戻すことができる(<strong>アンクオートする</strong>)</li>
</ul></li>
</ul></li>
<li><p>関数</p>

<ul>
<li><code>assoc</code>：キーをもとに要素を抜き出す</li>
<li><code>mapcar</code>：関数とリストを引数とする．リストの要素1つ1つに対し，関数を実行する</li>
<li><code>append</code>：リストをつなげて1つのリストにする</li>
<li><code>apply</code>：関数とリストを引数とする．リストの各要素を引数として関数を呼び出したかのように動作する</li>
<li><code>remove-if-not</code>：関数とリストを受け取る．リストの各要素に関数を適用し，真でなかったものを除いたリストを返す</li>
</ul></li>
<li><p>高階関数：他の関数を引数として受け取る関数</p>

<ul>
<li><code>#&#39;</code>：functionオペレータの略記．関数を値として扱う場合にそれを明示する必要がある(Common Lispでは)</li>
</ul></li>
<li><p>典型的なLispコードスタイル</p>

<ul>
<li><code>(apply #&#39;append (mapcar #&#39;describe-path (cdr (assoc location edges))))</code></li>
<li>複雑なデータの塊を幾つかのステップで受け渡しながら処理を進める</li>
<li>高階関数も頻繁に使われる</li>
</ul></li>
<li><p>関数末尾のp</p>

<ul>
<li>nilか真を返す場合，Common Lisp では関数名の最後に<strong>p</strong>をつける</li>
<li>真偽値を確かめる関数は<strong>述語(predicate)</strong>と呼ばれるため</li>
</ul></li>
</ul>

<h3>雑記</h3>

<p>一週間ほど海外なので，更新はないです．<br>
自作OSは飛行機の中やホテルでの夜にも進める予定だけど，リモートにpushするのは帰国してからかも．</p>
]]></content>
  </entry>
  
</feed>
