---
layout: post
title: "読書：コーディングを支える技術 1〜3章"
date: 2015-02-18 01:16:55 +0900
comments: true
categories:
- 読書
---

読書して，感想や得た知識をメモします．今読んでいるのは[この本](http://www.amazon.co.jp/コーディングを支える技術-~成り立ちから学ぶプログラミング作法-WEB-PRESS-plus/dp/477415654X)です．

<!-- more -->

#はじめに

大学の講義で，とんでもなく実装能力の高い後輩に刺激されて，とにかく勉強しなきゃと思って購入した本．特に，言語間の違いっていうのがよくわかっていなかった．各言語の設計思想ってどう違うの，とか，そもそもプログラミング言語ってどういう風に発達してきたの，とか，そういう部分を学びたいと思っていたら目に付いた．

本著書で学んだポイントをメモしておく．

##言語の学び方
* 何が言語間で共通しているのか？
* 何が特定言語におけるローカルルールなのか？

(例)
C言語では**0が偽**でその他が真
Rubyでは**false，nilが偽**でその他が真

* 言語設計者が何を解決したかったのか？
* その言語がどのような背景から生まれたのか？

多くの言語の比較，言語の歴史・理由を調べることで，言語が変わっても通用する理解力を養うべき．

##プログラミング言語の存在意義

プログラミング言語は人間が楽をするために存在する．しかし，何を「楽」だと考えるかは人により異なる．

* プログラマの三大美徳
	* 無精：将来も含めて一番楽な方法を選ぶ
	* 短気
	* 傲慢


##各言語の設計思想や方針まとめ

###FORTH，Lisp，FORTLAN

* FORTH，Lisp
	* ルールの少なさ，シンプルさを求めた
	* しかし，括弧が多かったり前置・後置記法だったりで扱いづらい

* FORTLAN(Formula Translating System)
	* 中置記法で数式を記述できる
	* プログラマが慣れた方法で数式を記述できるように
	* FORTH，Lispよりもつっつきやすい

###C++，Scheme，Python

* C++
	* コードの高速さを重視
	* しかし，言語仕様は複雑

* Scheme
	* 言語仕様を把握する楽さを重視
	* しかし，構文が括弧だらけで抵抗がある

* Python
	* 他人の書いたコードの可読性を重視
	* しかし，早くもないし，言語仕様も特にコンパクトではない

###その他

* Perl(practical extraction and report language)
	* レポート作成を楽にできるように設計された

* PHP
	* Webサービスを書くことが楽

* Haskell，OCaml (ML系言語)
	* 言語処理系を書くことが楽

#感想

できる人からすれば当たり前のことかもしれないが，勉強になる．ずっと積んでいたし，他に読みたい本もあるので，一週間程度で読み切ることを目標にする．
