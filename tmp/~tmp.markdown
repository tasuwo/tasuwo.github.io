---
layout: post
title: "読書：コーディングを支える技術 2"
date: 2015-03-26 10:49:25 +0900
comments: true
categories: 読書
---

[コーディングを支える技術](http://www.amazon.co.jp/コーディングを支える技術-~成り立ちから学ぶプログラミング作法-WEB-PRESS-plus/dp/477415654X)のメモ．
読んではいたけどまとめていなかったので．いちいちまとめずにたくさん本を読んだ方がいいかもしれないが，自分の場合は大抵忘れるので書き留めておくことにする．

<!-- more -->

##制御構文

なぜ制御構文が生まれたのか？を学ぶ．制御構文のないアセンブリ言語と制御構文があるC言語を比較する．1960年代，「人間が楽に読み書きできるルールを作ろう」という思想の元，「構造化プログラミング」が生まれる．構造化プログラミングでは，言語にルール(構文)を追加し，その構造を分かりやすくする．その後，for，while，if...elseの必要性について述べられる．

##関数

なぜ関数があるのか？を学ぶ．関数は理解と再利用のためにある．また，入れ子構造を扱うための再帰処理についても触れられる．

##例外

エラー処理の方法は2つ

* 返り値を用いた方法
* 例外を用いた方法

###返り値を用いた方法

失敗した時は返り値に書き，後でチェックする

* 問題点
    * 失敗を見落とす
    * エラー処理のせいでコードが見辛い

###エラー処理の歴史

* UNIVAC Ⅰ(1950)
    * **割り込み(interrupt)**導入
        * オーバーフロー時には，000番地に置かれている命令を実行
* FORTLAN(1954)
    * 例外処理なし
* COBOL(1959)
    * 二種類のエラー処理(データ読み込み時，オーバーフロー時)
    * プログラマがエラー処理を増やすことはできない
* PL/I(1964)
    * FORTLAB，COBOL，ALGOLの集大成として設計
    * **ON構文**導入
        * 例外の種類の追加，処理内容の記述が可能
        * プログラマが例外を発生させられる

この時点での例外処理「先に失敗した処理を登録」していた

* John Goodenough の論文(1975)
    * プログラマは以下のようなミスをする
        * 例外を投げる必要があることを忘れる
        * 適切でない場所，適切でない種類の例外処理を書く
    * 防ぐために必要な方法
        * 命令がどういう例外を投げる可能性があるかを明示的に宣言させる
        * 字句的に「失敗しそうな処理」を囲む構文
* CLU(1977)
    * **except構文**導入
        * **最後に**例外のブロックを記述し，処理内容を書く
* C++(1983)
    * **try〜catch構文**導入
    * **RAII(Resource Acquisition Is Initialization)**
        * リソース確保は初期化時に
        * ファイルを開く/閉じる時はその対象を扱うためだけのクラスを作成
            * コンストラクタで開き，デストラクタで閉じる
        * 後のfinallyよりもエレガントな方法と主張される
* Windows NT 3.1(1990)
    * MicrosoftがC言語により作成したOS
    * **構造化例外(Structured Exception Handling，SEH)**導入
    * **finaly**導入
        * 失敗しても成功しても必ず実行する
        * 必ず対になる処理がある(ファイル開閉，メモリ確保/解放)
        * 対になる処理を確実に行う必要がある
* Java(1995)
    * finaly導入
* D言語(2001)
    * 「C++をもっとよくしよう」という目的のもと開発
    * **スコープガード**導入
        * RAIIはエレガントでないと主張
        * スコープを抜ける際に行う処理をあらかじめ登録可能

###例外を投げるタイミング

**例外は例外的な状況にのみ投げるべき**と言われるが，それはいつか？

例：Python，JavaScript，Ruby

* 引数の不足
    * Python：関数呼び出し時にエラー
    * Ruby：関数呼び出し時にエラー
    * JavaScript：`undefined`にして実行

* 配列の範囲外の参照
    * Python：例外を投げる
    * Ruby：`nil`を返す
    * JavaScript：`undefined`を返す

つまり，明確な回答はない

###例外の伝搬

関数fが関数gを呼び，さらに関数hを呼ぶ．関数hで例外が投げられ処理されなかった場合，関数g，fに例外が伝播する．

* 問題
    * 関数fがどんな例外を投げる可能性があるかわからない

* 解決策
    * Javaの**検査例外**
        * メソッドの定義時に，投げる可能性のある例外を宣言(`throws`節導入)

* 普及しない理由
   * 面倒臭い
   * C#はJavaの多くの部分を採用しているが，検査例外は採用していない
